# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# 
# Contributor(s):
# 
# Portions Copyrighted 2008 Sun Microsystems, Inc.

#Generator classes
INCREMENT_GENERATOR_DESC=Generates identifiers of type <code>long</code>, <code>short</code> or <code>int</code> that are unique only when no other process is inserting data into the same table. \ud074\ub7ec\uc2a4\ud130\uc5d0\uc11c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.
IDENTITY_GENERATOR_DESC=Supports identify columns in DB2, MySQL, MS SQL Server, Sybase and HypersonicSQL. The returned identifier is of type <code>long</code>, <code>short</code> or <code>int</code>.
SEQUENCE_GENERATOR_DESC=Uses a sequence in DB2, PostgreSQL, Oracle, SAP DB, McKoi or a generator in Interbase. The returned identifier is of type <code>long</code>, <code>short</code> or <code>int</code>.
HILO_GENERATOR_DESC=Uses a hi/lo algorithm to efficiently generate identifiers of type <code>long</code>, <code>short</code> or <code>int</code>, given a table and column (by default <code>hibernate_unique_key</code> and <code>next_hi</code> respectively) as a source of hi values. The hi/lo algorithm generates identifiers that are unique only for a particular database.
SEQHILO_GENERATOR_DESC=Uses a hi/lo algorithm to efficiently generate identifiers of type <code>long</code>, <code>short</code> or <code>int</code>, given a named database sequence.
UUID_GENERATOR_DESC=Uses a 128-bit UUID algorithm to generate identifiers of type string, unique within a network (the IP address is used). The UUID is encoded as a string of hexadecimal digits of length 32.
GUID_GENERATOR_DESC=Uses a database-generated GUID string on MS SQL Server and MySQL.
NATIVE_GENERATOR_DESC=Picks <code>identity</code>, <code>sequence</code> or <code>hilo</code> depending upon the capabilities of the underlying database.
ASSIGNED_GENERATOR_DESC=Allows the application assign an identifier to the object before save() is called. This is the default strategy if no &lt;generator&gt; element is specified.
SELECT_GENERATOR_DESC=Retrieves a primary key assigned by a database trigger by selecting the row by some unique key and retrieving the primary key value.
FOREIGN_GENERATOR_DESC=Uses the identifier of another associated object. Usually used in conjunction with a &lt;one-to-one&gt; primary key association.
SEQUENCE_IDENTITY_GENERATOR_DESC=A specialized sequence generation strategy which utilizes a database sequence for the actual value generation, but combines this with JDBC3 getGeneratedKeys to actually return the generated identifier value as part of the insert statement execution. This strategy is only known to be supported on Oracle 10g drivers targeted for JDK 1.4. Note comments on these insert statements are disabled due to a bug in the Oracle drivers.

#Hibernate types
BIG_DECIMAL_DESC=<code>java.math.BigDecimal</code> \ub97c <code>NUMERIC</code> (\ud639\uc740 \uc624\ub77c\ud074 <code>NUMBER</code>)\ub85c \ud0c0\uc785 \ub9e4\ud551.
BIG_INTEGER_DESC=<code>java.math.Biginteger</code> \ub97c <code>NUMERIC</code> (\ud639\uc740 \uc624\ub77c\ud074 <code>NUMBER</code>)\ub85c \ud0c0\uc785 \ub9e4\ud551.
BINARY_DESC=<code>byte[]</code> \ub97c \uc801\uc808\ud55c SQL \ubc14\uc774\ub108\ub9ac \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551
BLOB_DESC=JDBC class <code>java.sql.Blob</code> \uc744 \uc704\ud55c \ud0c0\uc785 \ub9e4\ud551
BOOLEAN_DESC=<code>boolean</code> \ud639\uc740 <code>java.lang.Boolean</code> \ub97c \uc801\uc808\ud55c (\ubca4\ub354-\uc9c0\uc815) SQL \uceec\ub7fc \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551.
BYTE_DESC=<code>byte</code> \ud639\uc740 <code>java.lang.Byte</code> \ub97c \uc801\uc808\ud55c (\ubca4\ub354-\uc9c0\uc815) SQL \uceec\ub7fc \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551.
CALENDAR_DESC=<code>java.util.Calendar</code> \ub97c SQL \uc720\ud615 <code>TIMESTAMP</code> (\ud639\uc740 \ub3d9\uc885)\ub85c \ud0c0\uc785 \ub9e4\ud551 
CALENDAR_DATE_DESC=<code>java.util.Calendar</code> \ub97c SQL \uc720\ud615 <code>DATE</code> (\ud639\uc740 \ub3d9\uc885)\ub85c \ud0c0\uc785 \ub9e4\ud551 
CHARACTER_DESC=<code>char</code> \ud639\uc740 <code>java.lang.Character</code>  \ub97c \uc801\uc808\ud55c (\ubca4\ub354-\uc9c0\uc815) SQL \uceec\ub7fc \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551.
CLASS_DESC=<code>java.lang.Class</code> \ub97c <code>VARCHAR</code> (\ud639\uc740 \uc624\ub77c\ud074 <code>VARCHAR2</code>) \ub85c \ud0c0\uc785 \ub9e4\ud551 A <code>Class</code> is mapped to its fully qualified name.
CLOB_DESC=JDBC class <code>java.sql.Clob</code> \uc744 \uc704\ud55c \ud0c0\uc785 \ub9e4\ud551
CURRENCY_DESC=<code>java.util.Currency</code> \ub97c <code>VARCHAR</code> (\ud639\uc740 \uc624\ub77c\ud074 <code>VARCHAR2</code>) \ub85c \ud0c0\uc785 \ub9e4\ud551 Instances of <code>Currency</code> are mapped to their ISO codes.
DATE_DESC=<code>java.util.Date</code> \uc640 \uc11c\ube0c\ud074\ub798\uc2a4\ub97c SQL \uc720\ud615 <code>DATE</code> (\ud639\uc740 \ub3d9\uc885)\ub85c \ud0c0\uc785 \ub9e4\ud551
DOUBLE_DESC=<code>double</code> \ud639\uc740 <code>java.lang.Double</code> \ub97c \uc801\uc808\ud55c (\ubca4\ub354-\uc9c0\uc815) SQL \uceec\ub7fc \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551. 
FLOAT_DESC=<code>float</code> \ud639\uc740 <code>java.lang.Float</code> \ub97c \uc801\uc808\ud55c (\ubca4\ub354-\uc9c0\uc815) SQL \uceec\ub7fc \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551.
IMM_BINARY_DESC=Type mapping for <code>byte[]</code>, where Hibernate treats the object as immutable.
IMM_CALENDAR_DESC=Type mapping from <code>java.util.Calendar</code> to SQL type <code>TIMESTAMP</code> (or equivalent), where Hibernate treats the object as immutable.
IMM_CALENDAR_DATE_DESC=Type mapping from <code>java.util.Calendar</code> to SQL type <code>DATE</code> (or equivalent), where Hibernate treats the object as immutable.
IMM_DATE_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>DATE</code> (or equivalent), where Hibernate treats the object as immutable.
IMM_SERIALIZABLE_DESC=Type mapping from serializable Java types to an appropriate SQL binary type, where Hibernate treats the object as immutable.
IMM_TIME_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>TIME</code> (or equivalent), where Hibernate treats the object as immutable.
IMM_TIMESTAMP_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>TIMESTAMP</code> (or equivalent), where Hibernate treats the object as immutable.
INTEGER_DESC=<code>int</code> \ud639\uc740 <code>java.lang.Integer</code> \ub97c \uc801\uc808\ud55c (\ubca4\ub354-\uc9c0\uc815) SQL \uceec\ub7fc \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551.
#INTEGER_DESC=<b>Java type:</b>  <code>int</code> or <code>java.lang.Integer</code> <br> <b>Standard SQL built-in type:</b> <code>INTEGER</code>
LOCALE_DESC=Type mapping from <code>java.util.Locale</code> to <code>VARCHAR</code> (or Oracle <code>VARCHAR2</code>). Instances of Locale are mapped to their ISO codes.
LONG_DESC=<code>long</code> \ud639\uc740 <code>java.lang.Long</code> \ub97c \uc801\uc808\ud55c (\ubca4\ub354-\uc9c0\uc815) SQL \uceec\ub7fc \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551.
SERIALIZABLE_DESC=\uc9c1\ub82c\ud654\ub41c \uc790\ubc14 \uc720\ud615\uc744 \uc801\uc808\ud55c SQL \ubc14\uc774\ub108\ub9ac \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551
SHORT_DESC=<code>short</code> \ud639\uc740 <code>java.lang.Short</code> \ub97c \uc801\uc808\ud55c (\ubca4\ub354-\uc9c0\uc815) SQL \uceec\ub7fc \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551.
STRING_DESC=<code>java.lang.String</code> \ub97c <code>VARCHAR</code> (\ud639\uc740 \uc624\ub77c\ud074 <code>VARCHAR2</code>) \ub85c \ud0c0\uc785 \ub9e4\ud551
TEXT_DESC=\uae34 \uc790\ubc14 \ubb38\uc790\uc5f4\uc744 SQL <code>CLOB</code> \ud639\uc740 <code>TEXT</code> \uc720\ud615\uc73c\ub85c \ud0c0\uc785 \ub9e4\ud551.
TIME_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>TIME</code> (or equivalent).
TIMESTAMP_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>TIMESTAMP</code> (or equivalent).
TIMEZONE_DESC=Type mapping from <code>java.util.TimeZone</code> to <code>VARCHAR</code> (or Oracle <code>VARCHAR2</code>). Instances of <code>TimeZone</code> are mapped to their ID.
TRUE_FALSE_DESC=An alternative encoding for a Java <code>boolean</code> or <code>java.lang.Boolean</code>.
YES_NO_DESC=An alternative encoding for a Java <code>boolean</code> or <code>java.lang.Boolean</code>.

# Hibernate configuration properties
AUTOCOMMIT_DESC=JDBC autocommit mode.
AUTO_CLOSE_SESSION_DESC=Enable automatic session close at end of transaction.
BYTECODE_PROVIDER_DESC=Specifies the bytecode provider to use to optimize the use of reflection in Hibernate.
BATCH_STRATEGY_DESC=Select a custom batcher.
BATCH_VERSIONED_DATA_DESC=Include versioned data in batching?
C3P0_ACQUIRE_INCREMENT_DESC=Number of connections acquired when pool is exhausted.
C3P0_IDLE_TEST_PERIOD_DESC=Idle time before a C3P0 pooled connection is validated.
C3P0_MAX_SIZE_DESC=Maximum size of C3P0 connection pool.
C3P0_MAX_STATEMENTS_DESC=Maximum size of C3P0 statement cache.
C3P0_MIN_SIZE_DESC=Minimum size of C3P0 connection pool.
C3P0_TIMEOUT_DESC=Maximum idle time for C3P0 connection pool.
CACHE_PROVIDER_DESC=The <code>CacheProvider</code> implementation class.
CACHE_REGION_PREFIX_DESC=The <code>CacheProvider</code> region name prefix.
CACHE_PROVIDER_CONFIG_DESC=The <code>CacheProvider</code> implementation class.
CACHE_NAMESPACE_DESC=The <code>CacheProvider</code> JNDI namespace, if pre-bound to JNDI.
CONNECTION_PROVIDER_DESC=The <code>ConnectionProvider</code> implementor to use when obtaining connections.
CONNECTION_PREFIX_DESC=The prefix for arbitrary JDBC connection properties.
CURRENT_SESSION_CONTEXT_CLASS_DESC=Context scoping impl for <code>SessionFactory.getCurrentSession()</code> processing.
DATASOURCE_DESC=<code>java.sql.Datasource</code> JNDI \uc774\ub984.
DEFAULT_BATCH_FETCH_SIZE_DESC=The default batch size for batch fetching.
DEFAULT_CATALOG_DESC=A default database catalog name to use for unqualified table names.
DEFAULT_ENTITY_MODE_DESC=The EntityMode in which set the Session opened from the SessionFactory.
DEFAULT_SCHEMA_DESC=A default database schema (owner) name to use for unqualified table names.
DIALECT_DESC=Hibernate SQL <code>\ubc29\uc5b8</code> \ud074\ub798\uc2a4.
DRIVER_DESC=JDBC \ub4dc\ub77c\uc774\ubc84 \ud074\ub798\uc2a4.
FLUSH_BEFORE_COMPLETION_DESC=Enable automatic flush during the JTA <code>beforeCompletion()</code> callback.
FORMAT_SQL_DESC=\ucf58\uc194\uc5d0 \ub85c\uadf8\ub41c SQL \ud3ec\ub9f7\ud305 \ud65c\uc131\ud654.
GENERATE_STATISTICS_DESC=\ud1b5\uacc4 \uc218\uc9d1 \ud65c\uc131\ud654.
HBM2DDL_AUTO_DESC=Auto export/update schema using hbm2ddl tool. Valid values are <code>update</code>, <code>create</code>, <code>create-drop</code> and <code>validate</code>.
ISOLATION_DESC=JDBC \ud2b8\ub79c\uc7ad\uc158 \uaca9\ub9ac \uc218\uc900.
JACC_CONTEXTID_DESC=The jacc context id of the deployment.
JNDI_CLASS_DESC=JNDI initial context class, <code>Context.INITIAL_CONTEXT_FACTORY</code>.
JNDI_URL_DESC=JNDI provider URL, <code>Context.PROVIDER_URL</code>.
JPAQL_STRICT_COMPLIANCE_DESC=Compliance to JAP QL.
MAX_FETCH_DEPTH_DESC=Maximum depth of outer join fetching.
ORDER_UPDATES_DESC=Enable ordering of update statements by primary key value.
OUTPUT_STYLESHEET_DESC=An XSLT resource used to generate "custom" XML.
PASS_DESC=JDBC \uc554\ud638.
POOL_SIZE_DESC=Maximum number of inactive connections for Hibernate's connection pool.
PROXOOL_EXISTING_POOL_DESC=Proxool property to configure the Proxool Provider from an already existing pool (<code>true/false</code>).
PROXOOL_POOL_ALIAS_DESC=Proxool property with the Proxool pool alias to use (Required for <code>PROXOOL_EXISTING_POOL</code>, <code>PROXOOL_PROPERTIES</code>, or <code>PROXOOL_XML</code>).
PROXOOL_PREFIX_DESC=Proxool/Hibernate property prefix.
PROXOOL_PROPERTIES_DESC=Proxool property to configure the Proxool Provider using a properties file (<code>/path/to/proxool.properties</code>).
PROXOOL_XML_DESC=Proxool property to configure the Proxool Provider using an XML (<code>/path/to/file.xml</code>).
QUERY_CACHE_FACTORY_DESC=The <code>QueryCacheFactory</code> implementation class.
QUERY_TRANSLATOR_DESC=The classname of the HQL query parser factory.
QUERY_SUBSTITUTIONS_DESC=A comma-separated list of token substitutions to use when translating a Hibernate query to SQL.
QUERY_STARTUP_CHECKING_DESC=Check named queries during startup (enabled by default). Mainly intended for test environments. 
RELEASE_CONNECTIONS_DESC=Specifies how Hibernate should release JDBC connections.
SESSION_FACTORY_NAME_DESC=JNDI name to bind to <code>SessionFactory</code>.
SHOW_SQL_DESC=Enable logging of generated SQL to the console.
SQL_EXCEPTION_CONVERTER_DESC=The <code>SQLExceptionConverter</code> to use for converting SQLExceptions to Hibernate's <code>JDBCException</code> hierarchy. The default is to use the configured Dialect's preferred <code>SQLExceptionConverter</code>.
STATEMENT_BATCH_SIZE_DESC=\ucd5c\ub300 JDBC batch \ud06c\uae30. A nonzero value enables batch updates.
STATEMENT_FETCH_SIZE_DESC=Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed. If 0, JDBC driver default settings will be used.
TRANSACTION_STRATEGY_DESC=<code>TransactionFactory</code> implementor to use for creating <code>Transactions</code>.
TRANSACTION_MANAGER_STRATEGY_DESC=<code>TransactionManagerLookup</code> implementor to use for obtaining the <code>TransactionManager</code>.
URL_DESC=JDBC URL.
USER_DESC=JDBC \uc0ac\uc6a9\uc790.
USE_GET_GENERATED_KEYS_DESC=Tells the JDBC driver to attempt to retrieve row Id with the JDBC 3.0 <code>PreparedStatement.getGeneratedKeys()</code> method. In general, performance will be better if this property is set to true and the underlying JDBC driver supports getGeneratedKeys().
USE_SCROLLABLE_RESULTSET_DESC=JDBC \uc2a4\ud06c\ub864 \uac00\ub2a5\ud55c ResultSets\uc744 \uc0ac\uc6a9\ud558\uc2ed\uc2dc\uc624. This property is only necessary when there is no ConnectionProvider, i.e. the user is supplying JDBC connections.
USE_STREAMS_FOR_BINARY_DESC=Use java.io streams to read/write binary data from/to JDBC.
USE_IDENTIFIER_ROLLBACK_DESC=Determines whether Hibernate uses identifier rollback.
USE_SQL_COMMENTS_DESC=\uc0dd\uc131\ub41c SQL\uc5d0 \uc8fc\uc11d \ucd94\uac00.
USE_MINIMAL_PUTS_DESC=Optimize the cache for minimal puts instead of minimal gets.
USE_QUERY_CACHE_DESC=\ucffc\ub9ac \uce90\uc2dc \ud65c\uc131\ud654 (\uae30\ubcf8\uac12\uc740 \ube44\ud65c\uc131)
USE_SECOND_LEVEL_CACHE_DESC=2\ucc28 \uc218\uc900 \uce90\uc2dc \ud65c\uc131\ud654 (\uae30\ubcf8\uac12\uc740 \ud65c\uc131)
USE_STRUCTURED_CACHE_DESC=Enable use of structured second-level cache entries.
USER_TRANSACTION_DESC=JNDI name of JTA <code>UserTransaction</code> object.
USE_REFLECTION_OPTIMIZER_DESC=Use bytecode libraries optimized property access.
WRAP_RESULT_SETS_DESC=Enable wrapping of JDBC result sets in order to speed up column name lookups for broken JDBC drivers.


