LBL_TabsAndIndents=Tabuladores y sangrados
LBL_CodeGeneration=Generaci\u00f3n de c\u00f3digo
LBL_Alignment=Alineaci\u00f3n
LBL_Braces=Llaves
LBL_Wrapping=Envoltorio
LBL_BlankLines=Lineas en Blanco
LBL_Spaces=Espacios
LBL_Imports=Importaciones

LBL_bp_SAME_LINE=Misma L\u00ednea
LBL_bp_NEW_LINE=Nueva L\u00ednea
LBL_bp_NEW_LINE_HALF_INDENTED=Nueva L\u00ednea con Media Sangrado
LBL_bp_NEW_LINE_INDENTED= Nueva L\u00ednea Sangrada

LBL_bg_GENERATE=Generar
LBL_bg_LEAVE_ALONE=Dejar Solo
LBL_bg_ELIMINATE=Eliminar

LBL_wrp_WRAP_ALWAYS=Siempre
LBL_wrp_WRAP_IF_LONG=Si a lo Largo
LBL_wrp_WRAP_NEVER=Nunca

LBL_ExpandTabToSpaces=Aum&entar tabuladores para espacios
LBL_TabSize=Ta&ma\u00f1o del tabulador:
LBL_IndentSize=Tama\u00f1o de la sangr\u00eda:
LBL_ContinuationIndentSize=Tama\u00f1o de la sangr\u00eda de &continuaci\u00f3n:
LBL_LabelIndent=Sangrado de la Etiqueta\:
LBL_AbsoluteLabelIndent=Sangrado &Absoluto de Etiquetas
LBL_IndentTopLevelClassMemberts=Sa&ngrar los miembros de la clase de nivel superior
LBL_AddLeadingStarInComment=Agregar estrella l\u00ed&der en el comentario
LBL_RightMargin=&Margen derecho:

LBL_Naming=Denominaci\u00f3n\:
LBL_PreferLongerNames=Preferir nombres largos
LBL_Prefix=Prefijo
LBL_Suffix=Sufijo
LBL_Field=Campo\:
LBL_StaticField=Campo est\u00e1tico\:
LBL_Parameter=Par\u00e1metro\:
LBL_LocalVariable=Variable Local\:
LBL_Misc=Miscel\u00e1neo\:
LBL_QualifyFieldAccess=Acceso Calificado al Campo
LBL_UseIsForBooleanGetters=Usar Is Para Getters Booleanos
LBL_AddOverrideAnnotation=A\u00f1adir Anotaci\u00f3n Override
LBL_FinalMofier=Modificador Final\:
LBL_ParametersFinal=Hacer al Par\u00e1metro Generado Final
LBL_LocalVariablesFinal=Hacer a las variables Locales Generadas Final
LBL_ImportOredering=Orden de Importaci\u00f3n\:
LBL_ImportUp=Desplazar hacia arriba
LBL_ImportDown=Desplazar hacia abajo
LBL_blBeforePackage=Antes del &Paquete\:
LBL_blAfterPackage=Despu\u00e9s del P&aquete\:
LBL_blBeforeImports=Antes de los Imports\:
LBL_blAfterImports=Despu\u00e9s de los Imports\:
LBL_blBeforeClass=Antes de la &Clase\:
LBL_blAfterClass=Despu\u00e9s de la C&lase\:
LBL_blAfterClassHeader=Despu\u00e9s de la Cabecera de la Clase\:
LBL_blBeforeFields=Antes del Campo\:
LBL_blAfterFields=D&espu\u00e9s del Campo\:
LBL_blBeforeMethods=Antes del M\u00e9todo\:
LBL_blAfterMethods=Despu\u00e9s del M\u00e9todo\:

LBL_BeforeKeywords=Antes de las Palabras Clave
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Antes de un Par\u00e9ntesis
LBL_spaceBeforeMethodDeclParen=Declaraci\u00f3n del m\u00e9todo
LBL_spaceBeforeMethodCallParen=Llamada al m\u00e9todo
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeTryParen="try"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Par\u00e1metros de la Anotaci\u00f3n

LBL_AroundOperators=Alrededor de los Operadores
LBL_spaceAroundUnaryOps=Operadores Unarios
LBL_spaceAroundBinaryOps=Operadores Binarios
LBL_spaceAroundTernaryOps=Operadores Ternarios
LBL_spaceAroundAssignOps=Operadores de Asignaci\u00f3n

LBL_BeforeLeftBraces=Antes de las Llaves Izquierdas
LBL_spaceBeforeClassDeclLeftBrace=Declaraci\u00f3n de la clase
LBL_spaceBeforeMethodDeclLeftBrace=Declaraci\u00f3n del m\u00e9todo
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeDoLeftBrace="do"
#LBL_spaceBeforeSwitchLeftBrace="switch"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
#LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Inicializador Est\u00e1tico
LBL_spaceBeforeArrayInitLeftBrace=Inicializador de Arreglo

LBL_WithinParentheses=Dentro de los Par\u00e9ntesis
LBL_spaceWithinParens=Par\u00e9ntesis
LBL_spaceWithinMethodDeclParens=Declaraci\u00f3n del m\u00e9todo
LBL_spaceWithinMethodCallParens=Llamada al m\u00e9todo
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinTryParens="try"
#LBL_spaceWithinCatchParens="catch"
#LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Conversi\u00f3n de Tipo
LBL_spaceWithinAnnotationParens=Anotaci\u00f3n
LBL_spaceWithinBraces=Llaves
LBL_spaceWithinArrayInitBrackets=Corchetes de Inicializaci\u00f3n del Arreglo

LBL_Other=Otro
LBL_spaceBeforeComma=Antes de una Coma
LBL_spaceAfterComma=Despu\u00e9s de una Coma
LBL_spaceBeforeSemi=Antes de un Punto y Coma
LBL_spaceAfterSemi=Despu\u00e9s de un Punto y Coma
LBL_spaceBeforeColon=Antes de dos puntos
LBL_spaceAfterColon=Despu\u00e9s de dos puntos
LBL_spaceAfterTypeCast=Despu\u00e9s de Conversi\u00f3n de Tipo
LBL_wrp_extendsImplementsKeyword=Palabra Clave &Extiende/Implementa\: 
LBL_wrp_extendsImplementsList=Listado de E&xtiende/Implementa\:
LBL_wrp_methodParameters=&Par\u00e1metros del M\u00e9todo\:
LBL_wrp_throwsKeyword=Palabra clave &Throws\:
LBL_wrp_throwsList=Listado de Th&rows\:
LBL_wrp_methodCallArgs=Argumentos de Llamada al M\u00e9todo\:
LBL_wrp_annotationArgs=Arg&umentos de Anotaci\u00f3n\:
LBL_wrp_chainedMethodCalls=Llamadas Encadenadas al M\u00e9todo\:
LBL_wrp_arrayInit=Inicializador del arreglo\:
LBL_wrp_tryResources=Try Re&sources\:
LBL_wrp_multiCatches=Dis&junctive Catch Types\:
LBL_wrp_for=&For\:
LBL_wrp_forStatement=Sentencia F&or\:
LBL_wrp_ifStatement=Sentencia &If\:
LBL_wrp_whileStatement=Sentencia &While\:
LBL_wrp_doWhileStatement=Sentencia &Do ... While
LBL_wrp_assert=&Afirmaci\u00f3n\:
LBL_wrp_enumConstants=&Constantes Enum\:
LBL_wrp_annotations=A&notaciones\:
LBL_wrp_binaryOps=Operadores &Binarios\:
LBL_wrp_afeterBinaryOps=Wrap After Binary Operators
LBL_wrp_ternaryOps=Operadores Ternarios\:
LBL_wrp_afterTernaryOps=Wrap After Ternary Operators
LBL_wrp_assignOps=Operadores de Asignaci\u00f3n\:

LBL_br_bracesPlacement=Ubicaci\u00f3n de Llaves
LBL_br_bracesGeneration=Generaci\u00f3n de Llaves
LBL_al_newLines=Nuevas L\u00edneas
LBL_al_multilineAlignment=Alineaci\u00f3n Multil\u00ednea
LBL_bp_ClassDecl=Declaraci\u00f3n de la &Clase\:
LBL_bp_MethodDecl=Declaraci\u00f3n del &M\u00e9todo\:
LBL_bp_Other=&Otro\:
LBL_bp_SpecialElseIf=Tratamiento E&special de "else if" 
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=despu\u00e9s de los modificado&res
LBL_am_MethodParams=&Par\u00e1metros del M\u00e9todo
LBL_am_CallArgs=Arg&umentos de las Llamadas al M\u00e9tod
LBL_am_AnnotationArgs=Argumentos de &Anotaciones
LBL_an_Implements=Lista de I&mplements
LBL_am_Throws=Lista de &Throws
LBL_am_Paren=Parenti&zaci\u00f3n
LBL_am_BinaryOp=Operadores &Binarios
LBL_am_TernaryOp=Operadores Ter&narios
LBL_am_Assign=Asi&gnaci\u00f3n
LBL_am_For=&For
LBL_am_ArrayInit=Iniciali&zador de Arreglo
LBL_am_TryResources=Try Re&sources
LBL_am_MultiCatch=Dis&junctive Catch Types

LBL_IndentCasesFromSwitch=Sangrar Instrucciones Case en &Switch

#SAMPLE_Default=public class ClassA {public int number = 1;private String text ="A";public ClassA() {}public void meth(String text, int number) {}}

#SAMPLE_TabsIndents=public class ClassA {public int number = 1;private String letters[] = new String[]{ "A", "B" };public int meth(String text, int number) {if ( text == null ) {text = "a";}else if (text.length() == 0) {text = "empty";}else {number++;}label:switch(number) {case 1\:return meth("text", 22);case 2\:return 20;default\:return -1;}} }

#SAMPLE_Align=@Anno(paramA="aValue", paramB="bValue")public class ClassA implements InterfaceA, InterfaceB {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) throws ExceptionA, ExceptionB {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number =\nnumber + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = (number +\ni) * 2;}}}

#SAMPLE_Braces=public class ClassA {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number = number + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = number + i;}while(number > 0) {number--;}}}

#SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")@Deprecated public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {private static final String letters[] = new String[]{ "A", "B", "C", "D" };public int number = 1;public ClassA() {}public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {assert nuber + text.length() < 20 : "message";if (number==13 && object instanceof Runnable )method( "Some text", 12, new Object());for( int i = 1; i < 100; i++ )System.out.println(i);while ( this.number < 2 && number != 3 )this.number++;do method1().method2().method3();while ( this.number < 2 && number != 3 );return number > 100 ? -1 : -2;}public enum Where {NORTH, EAST, SOUTH, WEST;}}


#SAMPLE_BlankLines=package org.netbeans.samples;import java.util.List;import java.util.Map;public class ClassA {public int i;public int j;public ClassA() {}public void methodA() {}public void methodB() {}public class innerClass {}public static interface innerInterface {}}

#SAMPLE_Spaces=@Anno(paramA="aValue", paramB="bValue")public class ClassA {public int number = 1;private String text ="A";static float[] floats = new float[3];protected double[] doubles = new double[]{3.67,40,2e-30};static {floats[0]=12.6f;}public ClassA() {}public int meth(String text, int number) {if (number==13) {return (int)System.currentTimeMillis();}else {}for( int i = 20; i < 100; i++) {synchronized(this) {while(i%13>5)meth( text + " ", number++);}}for(float f : floats)System.out.println(f);switch(number) {case 1\:do { out( (2+3)*this.number--); } while(this.number > 6);return 10;case 2\:try {toString();}catch ( IllegalStateException illegalStateException ) {illegalStateException.printStackTrace();}finally {return 20;}default\:return number > 100 ? -1 : -2;}} }



#nlFinallyCheckBox1.text="finall&y"


AN_Preview=Vista previa
AD_Preview=Vista previa
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Etiquetas de sangr\u00eda absoluta
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=L\u00edneas de comentario inician con estrella
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Sangr\u00eda adicional para sentencias case
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Sangr\u00eda de los miembros de clase de nivel superior
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Tama\u00f1o de la sangr\u00eda en espacios
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Tama\u00f1o de la sangr\u00eda de la etiqueta en espacios

