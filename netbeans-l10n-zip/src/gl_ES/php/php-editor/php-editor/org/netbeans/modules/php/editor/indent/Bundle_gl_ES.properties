# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2006 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

# Formating options

LBL_CodeGeneration=Xeraci\u00f3n de c\u00f3digo
LBL_Wrapping=Axuste
LBL_BlankLines=Li\u00f1as en branco
LBL_Spaces=Espazos
LBL_Imports=Importaci\u00f3ns

LBL_bp_SAMELINE=Mesma li\u00f1a
LBL_bp_NEWLINE=Nova li\u00f1a
LBL_bp_NEWLINE_INDENTED= Nova li\u00f1a identada
LBL_bp_PRESERVE=Preservar existentes

LBL_bg_GENERATE=Xerar
LBL_bg_LEAVE_ALONE=Deixar s\u00f3
LBL_bg_ELIMINATE=Eliminar

LBL_wrp_WRAP_ALWAYS=Sempre
LBL_wrp_WRAP_IF_LONG=Se \u00e9 Long
LBL_wrp_WRAP_NEVER=Nunca

LBL_ExpandTabToSpaces=&Expandir tabuladores mediante espazos
LBL_TabSize=&Tama\u00f1o da tabulaci\u00f3n:
LBL_IndentSize=Tama\u00f1o da &sangr\u00eda:
LBL_ContinuationIndentSize=Tama\u00f1o a &continuaci\u00f3n de sangr\u00eda:
LBL_LabelIndent=Sangr\u00eda de &etiqueta\:
LBL_AbsoluteLabelIndent=Sangr\u00eda &absoluta da etiqueta
LBL_IndentTopLevelClassMemberts=&Sangrar os membros da clase do nivel superior
LBL_AddLeadingStarInComment=Engadir un asterisco ao comezo do comentario
LBL_RightMargin=Marxe de&reita:


LBL_BeforeKeywords=Antes das palabras chave
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Antes dos par\u00e9nteses
LBL_spaceBeforeMethodDeclParen=Declaraci\u00f3n de m\u00e9todo
LBL_spaceBeforeMethodCallParen=Chamada de M\u00e9todo
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Par\u00e1metros da anotaci\u00f3n

LBL_AroundOperators=Arredor dos operadores
LBL_spaceAroundUnaryOps=Operadores unarios
LBL_spaceAroundBinaryOps=Operadores binarios
LBL_spaceAroundTernaryOps=Operadores ternarios
LBL_spaceAroundAssignOps=Operadores de asignaci\u00f3n
LBL_br_bracesPlacement=Colocaci\u00f3n dos par\u00e9nteses:
LBL_br_bracesGeneration=Xeraci\u00f3n de par\u00e9nteses
LBL_al_newLines=Novas li\u00f1as
LBL_al_multilineAlignment=Ali\u00f1amento multili\u00f1a


#SAMPLE_Default=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {public int number = 1;private String text ="A";public ClassA() {}public void method(String text, int number) {} }

#SAMPLE_TabsIndents=public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {public int number = 1;private String letters[] = new String[]{ "A", "B", "C", "D" };public int method(String text, int number) {if ( text == null ) {text = "a";}else if (text.length() == 0) {text = "empty";}else {number++;}label:switch(number) {case 1\:return method("text", 22);case 2\:return 20;default\:return -1;}} }

#SAMPLE_AlignBraces=@Anno(paramA="a Value", paramB="bValue")public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {public int number = 1;private String letters[] = new String[]{ "A", "B", "C", "D" };public ClassA() {}public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {assert nuber + text.length() < 20 : "message";if ( text == null ) {text = "a";}else if (text.length() == 0) {text = number == 2 ? "empty" : "nonempty";number = ((op3() + 2) * op4);}else {number++;}for( int i = 1; i < 100; i++ ) {}while ( this.number < 2 && number != 3 ) {method( "Some text", 12, new Object());}do {try {op1().op2.op3().op4();}catch ( Throwable t ) {log();}finally {close();}} while ( this.number < 2 && number != 3 );}public enum Where {NORTH, EAST, SOUTH, WEST;}}

#SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")@Deprecated public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {private static final String letters[] = new String[]{ "A", "B", "C", "D" };public int number = 1;public ClassA() {}public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {assert nuber + text.length() < 20 : "message";if (number==13 && object instanceof Runnable )method( "Some text", 12, new Object());for( int i = 1; i < 100; i++ )System.out.println(i);while ( this.number < 2 && number != 3 )this.number++;do method1().method2().method3();while ( this.number < 2 && number != 3 );return number > 100 ? -1 : -2;}public enum Where {NORTH, EAST, SOUTH, WEST;}}


#SAMPLE_BlankLines=package org.netbeans.samples;import java.util.List;import java.util.Map;public class ClassA {public int i;public int j;public ClassA() {}public void methodA() {}public void methodB() {}public class innerClass {}public static interface innerInterface {}}

#SAMPLE_Spaces=@Anno(paramA="a Value", paramB="bValue")public class ClassA {public int number = 1;private String text ="A";static float[] floats = new float[3];protected double[] doubles = new double[]{3.67,40,2e-30};static {floats[0]=12.6f;}public ClassA() {}public int method(String text, int number) {if (number==13) {return (int)System.currentTimeMillis();}else {{}}for( int i = 20; i < 100; i++) {synchronized(this) {while(i%13>5)method( text + " ", number++);}}for(float f : floats)System.out.println(f);switch(number) {case 1\:do { out( (2+3)*this.number--); } while(this.number > 6);return 10;case 2\:try {toString();}catch ( IllegalStateException illegalStateException ) {illegalStateException.printStackTrace();}finally {return 20;}default\:return number > 100 ? -1 : -2;}} }



nlFinallyCheckBox1.text="finall&y"


AN_Preview=Previsualizaci\u00f3n
AD_Preview=Previsualizaci\u00f3n
LBL_bp_ClassDecl=
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Campo de continuaci\u00f3n da sangr\u00eda 
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleName=N\u00famero de continuaci\u00f3n da sangr\u00eda
FmtTabsIndents.initialIndentSizeField.AccessibleContext.accessibleDescription=Campo do tama\u00f1o inicial da sangr\u00eda

