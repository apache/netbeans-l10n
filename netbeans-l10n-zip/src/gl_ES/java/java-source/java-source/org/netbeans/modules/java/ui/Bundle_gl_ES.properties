LBL_TabsAndIndents=Tabulaci\u00f3ns e identaci\u00f3ns
LBL_CodeGeneration=Xeraci\u00f3n de c\u00f3digo
LBL_Alignment=Ali\u00f1amento
LBL_Braces=Chaves
LBL_Wrapping=Axuste
LBL_BlankLines=Li\u00f1as en branco
LBL_Spaces=Espazos
LBL_Imports=Importaci\u00f3ns

LBL_bp_SAME_LINE=Mesma li\u00f1a
LBL_bp_NEW_LINE=Nova li\u00f1a
LBL_bp_NEW_LINE_HALF_INDENTED=Nova li\u00f1a con media sangr\u00eda
LBL_bp_NEW_LINE_INDENTED= Nova li\u00f1a identada

LBL_bg_GENERATE=Xerar
LBL_bg_LEAVE_ALONE=Deixar s\u00f3
LBL_bg_ELIMINATE=Eliminar

LBL_wrp_WRAP_ALWAYS=Sempre
LBL_wrp_WRAP_IF_LONG=Se \u00e9 Long
LBL_wrp_WRAP_NEVER=Nunca

LBL_ExpandTabToSpaces=&Expandir tabuladores mediante espazos
LBL_TabSize=&Tama\u00f1o da tabulaci\u00f3n:
LBL_IndentSize=Tama\u00f1o da &sangr\u00eda:
LBL_ContinuationIndentSize=Tama\u00f1o a &continuaci\u00f3n de sangr\u00eda:
LBL_LabelIndent=Indentaci\u00f3n de &etiqueta\:
LBL_AbsoluteLabelIndent=Sangr\u00eda &absoluta da etiqueta
LBL_IndentTopLevelClassMemberts=&Sangrar os membros da clase do nivel superior
LBL_AddLeadingStarInComment=Enga&dir asterisco inicial no comentario
LBL_RightMargin=Marxe de&reita:

LBL_Naming=Naming\:
LBL_PreferLongerNames=Nomes longos preferibelmente
LBL_Prefix=Prefixo
LBL_Suffix=Sufixo
LBL_Field=Field\:
LBL_StaticField=Static Field\:
LBL_Parameter=Par\u00e1metro\:
LBL_LocalVariable=Local Variable\:
LBL_Misc=Misc\:
LBL_QualifyFieldAccess=Acceso ao campo cualificado
LBL_UseIsForBooleanGetters=Use Is For Boolean Getters
LBL_AddOverrideAnnotation=Engadir anotaci\u00f3ns de sobreescritura
LBL_FinalMofier=Final Modifier\:
LBL_ParametersFinal=Xerar par\u00e1metros Final
LBL_LocalVariablesFinal=Xerar variables locais Final
LBL_ImportOredering=Import Ordering\:
LBL_ImportUp=Mover cara a arriba
LBL_ImportDown=Mover cara a abaixo
LBL_blBeforePackage=Before &Package\:
LBL_blAfterPackage=After P&ackage\:
LBL_blBeforeImports=Before &Imports\:
LBL_blAfterImports=After Imports\:
LBL_blBeforeClass=Before &Class\:
LBL_blAfterClass=After C&lass\:
LBL_blAfterClassHeader=After Class &Header\:
LBL_blBeforeFields=Before &Field\:
LBL_blAfterFields=After Fi&eld\:
LBL_blBeforeMethods=Before &Method\:
LBL_blAfterMethods=After Me&thod\:

LBL_BeforeKeywords=Antes das palabras chave
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Antes dos par\u00e9nteses
LBL_spaceBeforeMethodDeclParen=Declaraci\u00f3n de m\u00e9todo
LBL_spaceBeforeMethodCallParen=Chamada de M\u00e9todo
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeTryParen="try"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Par\u00e1metros da anotaci\u00f3n

LBL_AroundOperators=Arredor dos operadores
LBL_spaceAroundUnaryOps=Operadores unarios
LBL_spaceAroundBinaryOps=Operadores binarios
LBL_spaceAroundTernaryOps=Operadores ternarios
LBL_spaceAroundAssignOps=Operadores de asignaci\u00f3n

LBL_BeforeLeftBraces=Antes das chaves de apertura
LBL_spaceBeforeClassDeclLeftBrace=Declaraci\u00f3n de clase
LBL_spaceBeforeMethodDeclLeftBrace=Declaraci\u00f3n de m\u00e9todo
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeDoLeftBrace="do"
#LBL_spaceBeforeSwitchLeftBrace="switch"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
#LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Inicializador est\u00e1tico
LBL_spaceBeforeArrayInitLeftBrace=Inicializador do array

LBL_WithinParentheses=Sen par\u00e9nteses
LBL_spaceWithinParens=Par\u00e9nteses
LBL_spaceWithinMethodDeclParens=Declaraci\u00f3n de m\u00e9todo
LBL_spaceWithinMethodCallParens=Chamada de M\u00e9todo
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinTryParens="try"
#LBL_spaceWithinCatchParens="catch"
#LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Tipo de conversi\u00f3n
LBL_spaceWithinAnnotationParens=Anotaci\u00f3n
LBL_spaceWithinBraces=Chaves
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets

LBL_Other=Outros
LBL_spaceBeforeComma=Antes da v\u00edrgula
LBL_spaceAfterComma=Despois da v\u00edrgula
LBL_spaceBeforeSemi=Antes do punto e coma
LBL_spaceAfterSemi=Despois do punto e coma
LBL_spaceBeforeColon=Antes da coma
LBL_spaceAfterColon=Despois da coma
LBL_spaceAfterTypeCast=Despois do tipo de conversi\u00f3n
LBL_wrp_extendsImplementsKeyword=&Extende/Implementa a chave\: 
LBL_wrp_extendsImplementsList=E&xtende/Implementa a lista\:
LBL_wrp_methodParameters=&Par\u00e1metros do m\u00e9todo\:
LBL_wrp_throwsKeyword=&Lanza a palabra chave\:
LBL_wrp_throwsList=La&nza a lista\:
LBL_wrp_methodCallArgs=Argumentos da chamado ao m\u00e9todo\:
LBL_wrp_annotationArgs=Arg&umentos da anotaci\u00f3n\:
LBL_wrp_chainedMethodCalls=Chamadas a m\u00e9todo e&ncadenadas\:
LBL_wrp_arrayInit=Iniciali&zador do array\:
LBL_wrp_tryResources=Try Re&sources\:
LBL_wrp_multiCatches=Dis&junctive Catch Types\:
LBL_wrp_for=&For\:
LBL_wrp_forStatement=Sentenza f&or\:
LBL_wrp_ifStatement=Instruci\u00f3n &if\:
LBL_wrp_whileStatement=Sentenza &while\:
LBL_wrp_doWhileStatement=Sentenza &do ... while
LBL_wrp_assert=&Aserci\u00f3n\:
LBL_wrp_enumConstants=Enumerar &constantes\:
LBL_wrp_annotations=A&nnotations\:
LBL_wrp_binaryOps=Operadores &binarios\:
LBL_wrp_afeterBinaryOps=Wrap After Binary Operators
LBL_wrp_ternaryOps=O&peradores ternarios\:
LBL_wrp_afterTernaryOps=Wrap After Ternary Operators
LBL_wrp_assignOps=Operadores de asi&gnaci\u00f3n\:

LBL_br_bracesPlacement=Localizaci\u00f3n das chaves
LBL_br_bracesGeneration=Xeraci\u00f3n de par\u00e9nteses
LBL_al_newLines=Novas li\u00f1as
LBL_al_multilineAlignment=Ali\u00f1amento multili\u00f1a
LBL_bp_ClassDecl=Declaraci\u00f3n da &clase\:
LBL_bp_MethodDecl=Declaraci\u00f3n do &m\u00e9todo\:
LBL_bp_Other=&Outro\:
LBL_bp_SpecialElseIf=&Special "else if" Treatment
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=despois dos modificado&res
LBL_am_MethodParams=&Par\u00e1metros do m\u00e9todo
LBL_am_CallArgs=Arg&umentos da chamada ao m\u00e9todo
LBL_am_AnnotationArgs=&Argumentos da anotaci\u00f3n
LBL_an_Implements=I&mplementa unha lista
LBL_am_Throws=&Lanza lista
LBL_am_Paren=Parentiza&do
LBL_am_BinaryOp=Operadores &binarios
LBL_am_TernaryOp=Operadores ter&narios
LBL_am_Assign=Asi&gnaci\u00f3n
LBL_am_For=&For
LBL_am_ArrayInit=Iniciali&zador do array
LBL_am_TryResources=Try Re&sources
LBL_am_MultiCatch=Dis&junctive Catch Types

LBL_IndentCasesFromSwitch=Sangrar instruci\u00f3ns case no &Switch

#SAMPLE_Default=public class ClassA {public int number = 1;private String text ="A";public ClassA() {}public void meth(String text, int number) {}}

#SAMPLE_TabsIndents=public class ClassA {public int number = 1;private String letters[] = new String[]{ "A", "B" };public int meth(String text, int number) {if ( text == null ) {text = "a";}else if (text.length() == 0) {text = "empty";}else {number++;}label:switch(number) {case 1\:return meth("text", 22);case 2\:return 20;default\:return -1;}} }

#SAMPLE_Align=@Anno(paramA="aValue", paramB="bValue")public class ClassA implements InterfaceA, InterfaceB {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) throws ExceptionA, ExceptionB {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number =\nnumber + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = (number +\ni) * 2;}}}

#SAMPLE_Braces=public class ClassA {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number = number + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = number + i;}while(number > 0) {number--;}}}

#SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")@Deprecated public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {private static final String letters[] = new String[]{ "A", "B", "C", "D" };public int number = 1;public ClassA() {}public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {assert nuber + text.length() < 20 : "message";if (number==13 && object instanceof Runnable )method( "Some text", 12, new Object());for( int i = 1; i < 100; i++ )System.out.println(i);while ( this.number < 2 && number != 3 )this.number++;do method1().method2().method3();while ( this.number < 2 && number != 3 );return number > 100 ? -1 : -2;}public enum Where {NORTH, EAST, SOUTH, WEST;}}


#SAMPLE_BlankLines=package org.netbeans.samples;import java.util.List;import java.util.Map;public class ClassA {public int i;public int j;public ClassA() {}public void methodA() {}public void methodB() {}public class innerClass {}public static interface innerInterface {}}

#SAMPLE_Spaces=@Anno(paramA="aValue", paramB="bValue")public class ClassA {public int number = 1;private String text ="A";static float[] floats = new float[3];protected double[] doubles = new double[]{3.67,40,2e-30};static {floats[0]=12.6f;}public ClassA() {}public int meth(String text, int number) {if (number==13) {return (int)System.currentTimeMillis();}else {}for( int i = 20; i < 100; i++) {synchronized(this) {while(i%13>5)meth( text + " ", number++);}}for(float f : floats)System.out.println(f);switch(number) {case 1\:do { out( (2+3)*this.number--); } while(this.number > 6);return 10;case 2\:try {toString();}catch ( IllegalStateException illegalStateException ) {illegalStateException.printStackTrace();}finally {return 20;}default\:return number > 100 ? -1 : -2;}} }



#nlFinallyCheckBox1.text="finall&y"


AN_Preview=Previsualizaci\u00f3n
AD_Preview=Previsualizaci\u00f3n
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Indent Labels absolutely
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=Comment lines starting with leading star
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Sangrado adicional para as instruci\u00f3ns case
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Indent for top-level class members
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Indent size in spaces
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Label indentation size in spaces

