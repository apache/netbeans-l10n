#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#
# Contributor(s):
#
# Portions Copyrighted 2010 Sun Microsystems, Inc.
#
DN_org.netbeans.modules.java.hints.perf.ManualArrayCopy=Manuelles Array-Kopieren
DESC_org.netbeans.modules.java.hints.perf.ManualArrayCopy=Findet Code, in dem Arrays mit Hilfe von Schleifen manuell kopiert werden.
ERR_manual-array-copy-coll=Manuelles Kopieren eines Arrays in eine Collection
FIX_manual-array-copy-coll=Durch "Collection.addAll(Arrays.asList(...))" ersetzen
ERR_manual-array-copy=Manuelles Kopieren eines Arrays
FIX_manual-array-copy=Durch System.arraycopy ersetzen

DN_org.netbeans.modules.java.hints.perf.SizeEqualsZero=Nutzung von ".size() == 0"
DESC_org.netbeans.modules.java.hints.perf.SizeEqualsZero=Wenn m\u00f6glich ".isEmpty()" oder "!.isEmpty()" anstelle von ".size() == 0" oder ".size() != 0" verwenden
ERR_SizeEqualsZero=".size() == 0" kann durch ".isEmpty()" ersetzt werden
ERR_SizeEqualsZeroNeg=".size() != 0" kann durch "!.isEmpty() ersetztwerden
FIX_UseIsEmpty=".isEmpty()" anstelle von ".size() == 0" nutzen
FIX_UseIsEmptyNeg=".isEmpty()" anstelle von ".size() != 0" nutzen
CONF_LBL_SizeEqualsZero=Auch auf ".size() != 0" pr\u00fcfen
CONF_TP_SizeEqualsZero=Soll dieser Hinweis auch Vorkommen von ".size() != 0" anzeigen?

DN_org.netbeans.modules.java.hints.perf.Tiny.stringConstructor=Zeichenkettenkonstruktor
DESC_org.netbeans.modules.java.hints.perf.Tiny.stringConstructor=Die Nutzung des Konstruktors von java.lang.String ist normalerweise \u00fcberfl\u00fcssig.
ERR_StringConstructor=Aufruf des Zeichenkettenkonstruktor
FIX_StringConstructor=Aufruf des Zeichenkettenkonstruktor entfernen
CONF_LBL_SizeEqualsZero=Aufrufe von String.substring in String-Konstruktoren ignorieren
CONF_TP_SizeEqualsZero=Aufrufe von java.lang.String.substring in String-Konstruktoren ignorieren

DN_org.netbeans.modules.java.hints.perf.Tiny.stringEqualsEmpty=String.equals("")
DESC_org.netbeans.modules.java.hints.perf.Tiny.stringEqualsEmpty=String.equals("") kann durch String.length() == 0 (JDK 5 und \u00e4lter), bzw. String.isEmpty() (JDK6 und neuer) ersetzt werden
ERR_StringEqualsEmpty=String.equals(...) mit leerer Zeichenkette
FIX_StringEqualsEmpty=Zu "String.length() == 0" \u00e4ndern
FIX_StringEqualsEmptyNeg=Zu "String.length() != 0" \u00e4ndern
FIX_StringEqualsEmpty16=Zu "String.isEmpty()" \u00e4ndern

DN_org.netbeans.modules.java.hints.perf.StringBuffer2Builder=Nutzlose Verwendung von StringBuffer
DESC_org.netbeans.modules.java.hints.perf.StringBuffer2Builder=Wenn m\u00f6glich StringBuilder anstelle von StringBuffer verwenden.
ERR_StringBuffer2Builder=StringBuffer kann durch StringBuilder ersetzt werden
FIX_StringBuffer2Builder=Durch StringBuilder ersetzen

DN_org.netbeans.modules.java.hints.perf.Tiny.lengthOneStringIndexOf=Einzelzeichen in String.indexOf
DESC_org.netbeans.modules.java.hints.perf.Tiny.lengthOneStringIndexOf=Ein einzelnes Zeichen in String.indexOf kann durch ein Character ersetzt werden (z.B .indexOf("j") => indexOf('j'))
#the string:
ERR_LengthOneStringIndexOf=Einzelzeichen {0} in String.indexOf
FIX_LengthOneStringIndexOf=Durch Character ersetzen

DN_org.netbeans.modules.java.hints.perf.Tiny.getClassInsteadOfDotClass=".getClass()" ist durch ".class" ersetzbar
DESC_org.netbeans.modules.java.hints.perf.Tiny.getClassInsteadOfDotClass=Findet Aufrufe von ".getClass()" direkt auf dem neu erzeugten Objekt
ERR_GetClassInsteadOfDotClass=Aufruf von ".getClass()" kann durch ".class" ersetzt werden
FIX_GetClassInsteadOfDotClass=Aufruf von ".getClass()" durch ".class" ersetzen

DN_org.netbeans.modules.java.hints.perf.Tiny.constantIntern=Aufruf von String.intern() auf Konstante
DESC_org.netbeans.modules.java.hints.perf.Tiny.constantIntern=Aufrufe von String.intern() auf Konstanten sind \u00fcberfl\u00fcssig.
ERR_ConstantIntern=Der Aufruf von String.intern() auf Konstanten ist \u00fcberfl\u00fcssig
FIX_ConstantIntern=Aufruf von String.intern() entfernen

DN_org.netbeans.modules.java.hints.perf.NoBooleanConstructor=Erzeugung neuer Booleans
DESC_org.netbeans.modules.java.hints.perf.NoBooleanConstructor=Die Erzeugung neuer Booleans ist ineffizient und normalerweise nutzlos.
ERR_NoBooleanConstructor=Erzeugung neuer Booleans ist ineffizient
FIX_NoBooleanConstructorBoolean=Aufruf des Boolean-Konstruktors entfernen
FIX_NoBooleanConstructorString=Aufruf des Boolean-Konstruktors entfernen

DN_org.netbeans.modules.java.hints.perf.InitialCapacity.collections=Collections ohne initiale Kapazit\u00e4t
DESC_org.netbeans.modules.java.hints.perf.InitialCapacity.collections=Sucht nach Collections, f\u00fcr die keine initiale Kapazit\u00e4t angegeben wurde. Es werden nur Collections untersucht, bei denen Arrays verwendet werden.
ERR_InitialCapacity_collections=Erzeugung von Collection ohne initiale Kapazit\u00e4t

DN_org.netbeans.modules.java.hints.perf.InitialCapacity.stringBuilder=StringBuilder ohne initiale Kapazit\u00e4t
DESC_org.netbeans.modules.java.hints.perf.InitialCapacity.stringBuilder=Sucht nach Instanziierungen von StringBuilder oder StringBuffer, bei denen keine initiale Kapazit\u00e4t angegeben wird.
ERR_InitialCapacity_stringBuilder=Instanziierung von StringBuilder oder StringBuffer ohne initiale Kapazit\u00e4t

DN_org.netbeans.modules.java.hints.perf.Tiny.enumSet=Set kann durch EnumSet ersetzt werden
DESC_org.netbeans.modules.java.hints.perf.Tiny.enumSet=Findet Sets, die durch EnumSet ersetzt werden k\u00f6nnen.
DN_org.netbeans.modules.java.hints.perf.Tiny.enumMap=Map kann durch EnumMap ersetzt werden
DESC_org.netbeans.modules.java.hints.perf.Tiny.enumMap=Finds instantiations of Maps that can be replaced with EnumMap
ERR_Tiny_enumSet=Set kann durch java.util.EnumSet ersetzt werden
ERR_Tiny_enumMap=Map kann durch java.util.EnumMap ersetzt werden
FIX_Tiny_enumMap=Map durch java.util.EnumMap ersetzen

