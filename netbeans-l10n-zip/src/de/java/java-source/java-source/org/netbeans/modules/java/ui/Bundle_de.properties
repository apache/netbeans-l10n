LBL_TabsAndIndents=Tabulatoren und Einr\u00fcckungen
LBL_CodeGeneration=Quelltexterzeugung
LBL_Alignment=Ausrichtung
LBL_Braces=Klammern
LBL_Wrapping=Umbr\u00fcche
LBL_BlankLines=Leere Zeilen
LBL_Spaces=Leerzeichen
LBL_Imports=Importe

LBL_bp_SAME_LINE=Gleiche Zeile
LBL_bp_NEW_LINE=Neue Zeile
LBL_bp_NEW_LINE_HALF_INDENTED=Neue Zeile, halb einger\u00fcckt
LBL_bp_NEW_LINE_INDENTED= Neue Zeile, einger\u00fcckt

LBL_bg_GENERATE=Erzeugen
LBL_bg_LEAVE_ALONE=Nichts machen
LBL_bg_ELIMINATE=Eliminieren

LBL_wrp_WRAP_ALWAYS=Immer
LBL_wrp_WRAP_IF_LONG=Wenn zu lang
LBL_wrp_WRAP_NEVER=Nie

LBL_ExpandTabToSpaces=T&abulatoren in Leerzeichen wandeln
LBL_TabSize=&Tabulatorgr\u00f6\u00dfe
LBL_IndentSize=&Einr\u00fcckungsgr\u00f6\u00dfe:
LBL_ContinuationIndentSize=&Einr\u00fcckung bei Fortf\u00fchrung:
LBL_LabelIndent=&Labeleinr\u00fcckung\:
LBL_AbsoluteLabelIndent=&Absolute Label-Einr\u00fcckung
LBL_IndentTopLevelClassMemberts=&Klassenmitglieder der oberen Ebene einr\u00fccken
LBL_AddLeadingStarInComment=&F\u00fchrenden Stern in Kommentar einf\u00fcgen
LBL_RightMargin=&Rechter Rand:

LBL_Naming=Benennung\:
LBL_PreferLongerNames=L\u00e4ngere Namen bevorzugen
LBL_Prefix=Pr\u00e4fix
LBL_Suffix=Suffix
LBL_Field=Feld\:
LBL_StaticField=Feld (static)\:
LBL_Parameter=Parameter\:
LBL_LocalVariable=Lokale Variable\:
LBL_Misc=Verschiedenes\:
LBL_QualifyFieldAccess=Feldzugriff qualifizieren
LBL_UseIsForBooleanGetters="Is" f\u00fcr get-Methoden von "Boolean" benutzen
LBL_AddOverrideAnnotation=Override-Annotation hinzuf\u00fcgen
LBL_FinalMofier=Modifizierer (final)\:
LBL_ParametersFinal=Erzeugte Parameter "final" machen
LBL_LocalVariablesFinal=Erzeugte lokale Variablen "final" machen
LBL_ImportOredering=Sortierung f\u00fcr Importe\:
LBL_ImportUp=Nach oben
LBL_ImportDown=Nach unten
LBL_blBeforePackage=Vor "&package"\:
LBL_blAfterPackage=Nach "p&ackage"\:
LBL_blBeforeImports=Vor "&import"\:
LBL_blAfterImports=Nach "import"\:
LBL_blBeforeClass=Vor "&class"\:
LBL_blAfterClass=Nach "c&lass"\:
LBL_blAfterClassHeader=Nach dem Klassenheader\:
LBL_blBeforeFields=Vor &Feldern\:
LBL_blAfterFields=Nach Fe&ldern\:
LBL_blBeforeMethods=Vor &Methoden\:
LBL_blAfterMethods=Nach Me&thoden\:

LBL_BeforeKeywords=Vor Schl\u00fcsselw\u00f6rtern
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Vor runden Klammern
LBL_spaceBeforeMethodDeclParen=Methodendeklaration
LBL_spaceBeforeMethodCallParen=Methodenaufruf
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeTryParen="try"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotationsparameter

LBL_AroundOperators=Um Operatoren herum
LBL_spaceAroundUnaryOps=Un\u00e4re Operatoren
LBL_spaceAroundBinaryOps=Bin\u00e4re Operatoren
LBL_spaceAroundTernaryOps=Tern\u00e4re Operatoren
LBL_spaceAroundAssignOps=Zuweisungsoperatoren

LBL_BeforeLeftBraces=Vor linken Klammern
LBL_spaceBeforeClassDeclLeftBrace=Klassendeklaration
LBL_spaceBeforeMethodDeclLeftBrace=Methodendeklaration
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeDoLeftBrace="do"
#LBL_spaceBeforeSwitchLeftBrace="switch"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
#LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Statischer Initialisierer
LBL_spaceBeforeArrayInitLeftBrace=Array-Initialisierer

LBL_WithinParentheses=Innerhalb von runden Klammern
LBL_spaceWithinParens=Runde Klammern
LBL_spaceWithinMethodDeclParens=Methodendeklaration
LBL_spaceWithinMethodCallParens=Methodenaufruf
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinTryParens="try"
#LBL_spaceWithinCatchParens="catch"
#LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Typcast
LBL_spaceWithinAnnotationParens=Anmerkung
LBL_spaceWithinBraces=Klammern
LBL_spaceWithinArrayInitBrackets=Klammern von Array-Initialisierern

LBL_Other= Andere
LBL_spaceBeforeComma=Vor Kommata
LBL_spaceAfterComma=Hinter Kommata
LBL_spaceBeforeSemi=Vor Semikola
LBL_spaceAfterSemi=Hinter Semikola
LBL_spaceBeforeColon=Vor Doppelpunkten
LBL_spaceAfterColon=Hinter Doppelpunkten
LBL_spaceAfterTypeCast=Nach Typcast
LBL_wrp_extendsImplementsKeyword=Schl\u00fcss&elw\u00f6rter "extends"/"implements"\: 
LBL_wrp_extendsImplementsList=Liste f\u00fcr "e&xtends"/"implements"\:
LBL_wrp_methodParameters=Methoden&parameter\:
LBL_wrp_throwsKeyword="&throws"-Schl\u00fcsselwort\:
LBL_wrp_throwsList="th&rows"-Liste\:
LBL_wrp_methodCallArgs=Argumente f\u00fcr Methodenaufrufe\:
LBL_wrp_annotationArgs=Arg&umente f\u00fcr Anmerkungen\:
LBL_wrp_chainedMethodCalls=&Verkettete Methodenaufrufe\:
LBL_wrp_arrayInit=Initi&alisierung f\u00fcr Arrays\:
LBL_wrp_tryResources=Ver&suche Ressourcen\:
LBL_wrp_multiCatches=Dis&junktive Catch-Typen\:
LBL_wrp_for=&For\:
LBL_wrp_forStatement="f&or"-Anweisung\:
LBL_wrp_ifStatement="&if"-Anweisung\:
LBL_wrp_whileStatement="&while"-Anweisung\:
LBL_wrp_doWhileStatement=&Do... While-Anweisung
LBL_wrp_assert=&Assert\:
LBL_wrp_enumConstants="enum"-&Konstanten\:
LBL_wrp_annotations=A&nnotationen\:
LBL_wrp_binaryOps=&Bin\u00e4roperatoren\:
LBL_wrp_afeterBinaryOps=Nach Bin\u00e4roperatoren umbrechen
LBL_wrp_ternaryOps=&Te&rn\u00e4roperatoren\:
LBL_wrp_afterTernaryOps=Nach Tern\u00e4roperatoren umbrechen
LBL_wrp_assignOps=Zuweisun&gsoperatoren\:

LBL_br_bracesPlacement=Platzierung von Klammern
LBL_br_bracesGeneration=Erzeugung von Klammern
LBL_al_newLines=Neue Zeilen
LBL_al_multilineAlignment=Ausrichtung \u00fcber mehrere Zeilen
LBL_bp_ClassDecl=&Klassendeklaration\:
LBL_bp_MethodDecl=&Methodendeklaration\:
LBL_bp_Other=&Andere\:
LBL_bp_SpecialElseIf=&Spezielle "else if"-Behandlung
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=Nach Modifizierern
LBL_am_MethodParams=Methoden&parameter
LBL_am_CallArgs=Arg&umente f\u00fcr Methodenaufruf
LBL_am_AnnotationArgs=&Argumente f\u00fcr Anmerkungen
LBL_an_Implements=Liset von I&mplements
LBL_am_Throws=Liste von &Throws
LBL_am_Paren=Geklammert
LBL_am_BinaryOp=&Bin\u00e4re Operatoren
LBL_am_TernaryOp=Ter&n\u00e4re Operatoren
LBL_am_Assign=Zuweisun&g
LBL_am_For=&For
LBL_am_ArrayInit=Array-Initialisierer
LBL_am_TryResources=Ver&suche Ressourcen
LBL_am_MultiCatch=Dis&junktive Catch-Typen

LBL_IndentCasesFromSwitch="Case"-Anweisung in "&Switch" einr\u00fccken

#SAMPLE_Default=public class ClassA {public int number = 1;private String text ="A";public ClassA() {}public void meth(String text, int number) {}}

#SAMPLE_TabsIndents=public class ClassA {public int number = 1;private String letters[] = new String[]{ "A", "B" };public int meth(String text, int number) {if ( text == null ) {text = "a";}else if (text.length() == 0) {text = "empty";}else {number++;}label:switch(number) {case 1\:return meth("text", 22);case 2\:return 20;default\:return -1;}} }

#SAMPLE_Align=@Anno(paramA="aValue", paramB="bValue")public class ClassA implements InterfaceA, InterfaceB {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) throws ExceptionA, ExceptionB {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number =\nnumber + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = (number +\ni) * 2;}}}

#SAMPLE_Braces=public class ClassA {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number = number + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = number + i;}while(number > 0) {number--;}}}

#SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")@Deprecated public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {private static final String letters[] = new String[]{ "A", "B", "C", "D" };public int number = 1;public ClassA() {}public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {assert nuber + text.length() < 20 : "message";if (number==13 && object instanceof Runnable )method( "Some text", 12, new Object());for( int i = 1; i < 100; i++ )System.out.println(i);while ( this.number < 2 && number != 3 )this.number++;do method1().method2().method3();while ( this.number < 2 && number != 3 );return number > 100 ? -1 : -2;}public enum Where {NORTH, EAST, SOUTH, WEST;}}


#SAMPLE_BlankLines=package org.netbeans.samples;import java.util.List;import java.util.Map;public class ClassA {public int i;public int j;public ClassA() {}public void methodA() {}public void methodB() {}public class innerClass {}public static interface innerInterface {}}

#SAMPLE_Spaces=@Anno(paramA="aValue", paramB="bValue")public class ClassA {public int number = 1;private String text ="A";static float[] floats = new float[3];protected double[] doubles = new double[]{3.67,40,2e-30};static {floats[0]=12.6f;}public ClassA() {}public int meth(String text, int number) {if (number==13) {return (int)System.currentTimeMillis();}else {}for( int i = 20; i < 100; i++) {synchronized(this) {while(i%13>5)meth( text + " ", number++);}}for(float f : floats)System.out.println(f);switch(number) {case 1\:do { out( (2+3)*this.number--); } while(this.number > 6);return 10;case 2\:try {toString();}catch ( IllegalStateException illegalStateException ) {illegalStateException.printStackTrace();}finally {return 20;}default\:return number > 100 ? -1 : -2;}} }



#nlFinallyCheckBox1.text="finall&y"


AN_Preview=Vorschau
AD_Preview=Vorschau
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Labels absolut einr\u00fccken
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=Kommentarzeilen beginnen mit einem Stern
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Zus\u00e4tzliche Einr\u00fcckung f\u00fcr "case"-Anweisungen
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Einr\u00fcckung f\u00fcr obere Klassenmitglieder
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Einr\u00fcckung in Leerzeichen
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Labeleinr\u00fcckung in Leerzeichen

