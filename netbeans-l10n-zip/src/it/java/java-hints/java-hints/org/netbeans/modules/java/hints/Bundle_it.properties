# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
#The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2010 Sun
#Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

#
# This bundle defines the localized name of the module, as will be shown
# in the options dialog and the setup wizard, and the category folder it will
# be found in, in the options dialog under System | Modules
#


# Braces
LBL_Braces_For=For Loops Must Use Braces
LBL_Braces_While=While Loops Must Use Braces
LBL_Braces_DoWhile=Do-While Loops Must Use Braces
LBL_Braces_If=If-Else Statements Must Use Braces

DSC_Braces_For=Warns if a <CODE>for</CODE> loop does not<BR>have its body wrapped in curly braces.<BR>
DSC_Braces_While=While Loops Must Use Braces
DSC_Braces_DoWhile=Do-While Loops Must Use Braces
DSC_Braces_If=If-Else Statements Must Use Braces

LBL_Braces_Fix=Add Braces

# Assignment to itself
LBL_ATI=Assignment To Itself
DSC_ATI=Assignment To Itself

LBL_ATI_Remove_FIX=Remove The Assignment
LBL_ATI_Qualify_FIX=Qualify with this
LBL_ATI_NewParameter_FIX=Introduce Parameter
LBL_ATI_NewField_FIX=Introduce Field

# Imports
LBL_Imports_DELEGATE=Delegate - non GUI
LBL_Imports_UNUSED=Unused Import
LBL_Imports_DUPLICATE=Multiple Import
LBL_Imports_SAME_PACKAGE=Import From The Same Package
LBL_Imports_DEFAULT_PACKAGE=Import From java.lang Package
LBL_Imports_EXCLUDED=Import from Excluded
LBL_Imports_STAR=Star import

DSC_Imports_DELAGATE=Delegate - non GUI
DSC_Imports_UNUSED=Unused Import
DSC_Imports_DUPLICATE=Multiple Import
DSC_Imports_SAME_PACKAGE=Import From The Same Package
DSC_Imports_DEFAULT_PACKAGE=Import From java.lang Package
DSC_Imports_EXCLUDED=Import from package or class which has been labelled "Excluded" in the Code Completer
DSC_Imports_STAR=Star import

LBL_Imports_Fix_One_SAME_PACKAGE=Remove import from same package
LBL_Imports_Fix_All_SAME_PACKAGE=Remove all imports from same package

LBL_Imports_Fix_One_DEFAULT_PACKAGE=Remove import from java.lang package
LBL_Imports_Fix_All_DEFAULT_PACKAGE=Remove all imports from java.lang package

# equals and hashcode
MSG_MissingHashCode=Generate missing hashCode or equals
HINT_MissingHashCode=Checks whether a class which overrides equals method also overrides hashCode.
MSG_GenHashCode=Generate missing hashCode()
MSG_GenEquals=Generate missing equals(Object)

# export non accessible element
MSG_ExportNonAccessibleElement=Exporting non-public type through public API
MSG_ExportNonAccessibleElementMakeNonVisible=Make package private
HINT_ExportNonAccessibleElement=Checks that return types and parameter types of allpublic methods and all types of public fields are publicly available from other packages.Having private or package private types in a package API is useless.


# Annotation as super interface
# {0} name of the annotation
LBL_AnnotationAsSuperInterface=Don't use Annotation as super interface
HNT_AnnotationAsSuperInterface=Don't use Annotation {0} as super interface
DSC_AnnotationAsSuperInterface=Despite the compiler permitting such constructs,Annotations should not be used as superinterfaces.

# Utility class
MSG_UtilityClass=Utility class without constructor
HINT_UtilityClass=Finds out classes containing only static elements and still being instantiable.
MSG_PrivateConstructor=Create private constructor
MSG_MakePrivate=Make constructor private
MSG_PublicConstructor=Utility class with visible constructor
HINT_PublicConstructor=Finds out classes containing only static elements with public or protected constructors.

#Standard Javac warnings
LBL_Javac_DEPRECATED=Deprecato
LBL_Javac_UNCHECKED=Unchecked
LBL_Javac_FALLTHROUGH=Fallthrough
LBL_Javac_SERIALIZATION=Serialization
LBL_Javac_UNNECESSARY_CAST=Unnecessary Cast
LBL_Javac_EMPTY_STATEMENT_AFTER_IF=Empty Statement After If
LBL_Javac_OVERRIDES=Overrides
LBL_Javac_DIVISION_BY_ZERO=Division By Zero
LBL_Javac_RAWTYPES=Raw Types
LBL_Javac_CAN_USE_DIAMOND=Can Use Diamond

DSC_Javac_DEPRECATED=Warn when code uses deprecated API.
DSC_Javac_UNCHECKED=Warn when unchecked conversions may cause ClassCastExceptions at runtime.
DSC_Javac_FALLTHROUGH=Warn when a case can fall through to the next case.
DSC_Javac_SERIALIZATION=Warn when a class which implements java.io.Serializable does not declare a serialVersionUID.
DSC_Javac_FINALLY=Warn when a finally block interrupts flow of a try/catch block.
DSC_Javac_UNNECESSARY_CAST=Warn when an object is cast unnecessarily to the same type or a supertype.
DSC_Javac_EMPTY_STATEMENT_AFTER_IF=Empty Statement After If
DSC_Javac_OVERRIDES=Warn when an overriding method is not annotated with @Overrides
DSC_Javac_DIVISION_BY_ZERO=Division By Zero
DSC_Javac_RAWTYPES=Raw Types
DSC_Javac_CAN_USE_DIAMOND=Warns about places where the diamond operator in JDK 7 can be used instead of explicit type parameters

# double check
MSG_DoubleCheck=Double-checked locking
HINT_DoubleCheck=Searches for examples of double checked locking - e.g.when a variable is tested before as well as inside a synchronized block.
ERR_DoubleCheck=Double-checked locking
FIX_DoubleCheck=Remove the outer conditional statement

LBL_IllegalInstanceOf=Illegal Use of instanceOf operator
DSC_IllegalInstanceOf=Show illegal use of instanceof on javax.lang.model.elements, javax.lang.model.type and com.sun.source.tree
MSG_IllegalInstanceOf=Illegal Use of instanceOf

#Wrong string comparison
LBL_WrongStringComparison=Comparing Strings using == or !=
DSC_WrongStringComparison=Checks for usages of == or != operator for comparing Strings.<BR>String comparisons should generally be done using the equals() method.

FIX_WrongStringComparison_NullCheck=Use equals() with null check
FIX_WrongStringComparison_TernaryNullCheck=Use equals() with null check (ternary)
FIX_WrongStringComparison_NoNullCheck=Use equals()
FIX_WrongStringComparison_ReverseOperands=Use equals() and reverse operands

WrongStringComparisonCustomizer.ternaryNullCheck.text=Check for null using ternary conditional operator
WrongStringComparisonCustomizer.stringLiteralFirst.text=Put String literals first when possible
ACSD_Ternary_Null_Check=Controls whether the fix uses a ternary conditional null check.
ACSD_String_Literals_First=Generates less code by avoiding a null check if one of the operands is a String literal.

#Empty statements
LBL_Empty_FOR_LOOP=Empty statement after 'for'
LBL_Empty_ENHANCED_FOR_LOOP=Empty statement after 'for'
LBL_Empty_WHILE_LOOP=Empty statement after 'while'
LBL_Empty_DO_WHILE_LOOP=Empty statement after 'do'
LBL_Empty_IF=Empty statement after 'if/else'
LBL_Empty_BLOCK=Empty statement

DSC_Empty_FOR_LOOP=Checks for 'for' statements in form<BR><CODE>for(...);</CODE>.
DSC_Empty_WHILE_LOOP=Checks for 'while' statements in form<BR><CODE>while(...);</CODE>.
DSC_Empty_DO_WHILE_LOOP=Checks for 'do/while' statements in form<BR><CODE>do;<BR>while</CODE>.
DSC_Empty_IF=Checks for 'if/else' statements in form<BR><CODE>if(...);<BR>else;</CODE>.
DSC_Empty_BLOCK=Checks for empty statements in blocks usually representedas superfluous semicolon.

MSG_HiddenField=Field hides another field
HINT_HiddenField=Declaration of a field in a class can hide declaration of another field in superclasses. Although possible, this is not very good programming style.
MSG_FixHiddenFiledText=Rename the field
MSG_FixHiddenByVariableFiledText=Rinomina variabile blocco
MSG_HiddenFieldByVar=Local variable hides a field
HINT_HiddenFieldByVar=Declaration of a variable in a method can hide declaration of a field declared in the surrounding class. Although possible, this is not very good programming style.

LBL_EmptyCancel=Empty cancel() for cancelable tasks
DSC_EmptyCancel=Warn about empty cancel() methods for cancelable tasks
MSG_EmptyCancel=Empty cancel()

#{0}:
#     0 - field
#     1 - method
#     2 - other (unknown)
#{1}: element simple name
MSG_StaticAccess=Accessing static {0,choice,0#field|1#method|1<element} {1}
MSG_StaticAccessName=Accessing static via reference
HINT_StaticAccess=Java language allows access to static fields thru instance variables, however this is often misleading and harder to read.
MSG_StaticAccessText=Replace with class reference

#ConvertAnonymousToInner:
HINT_ConvertAnonymousToInner=Convert Anonymous to Member
DN_ConvertAnonymousToInner=Convert Anonymous to Member
DESC_ConvertAnonymousToInner=Convert Anonymous to Member
FIX_ConvertAnonymousToInner=Convert Anonymous to Member

ERR_CaretNotInAnonymousInnerclass=Caret not in anonymous class.
ERR_SelectionNotSupported=Selection not supported.

CTL_ConvertAnonymousToInner=Convert &Anonymous to Member...

HINT_AddOverrideAnnotation=Add @Override Annotation
DN_AddOverrideAnnotation=Add @Override Annotation
DESC_AddOverrideAnnotation=Add @Override Annotation
FIX_AddOverrideAnnotation=Add @Override Annotation

HINT_AssignResultToVariable=Assign Return Value To New Variable
DN_AssignResultToVariable=Assign Return Value To New Variable
DESC_AssignResultToVariable=Assign Return Value To New Variable
FIX_AssignResultToVariable=Assign Return Value To New Variable

HINT_WrongPackage=Incorrect Package
DN_WrongPackage=Wrong Package
DESC_WrongPackage=Wrong Package
#{0}:
#    0: Remove package
#    1: Change package
#{1}: target package name
FIX_WrongPackageFix={0,choice,0#Remove package declaration|1#Change package declaration to {1}}
FIX_WrongPackageMove=Move class to correct folder
ERR_CannotMoveAlreadyExists=Cannot move the source, the target path already exists and is not a folder.
ERR_CannotMove=Cannot move the source.

HINT_SuspiciousNamesCombination=Suspicious names combination
DN_SuspiciousNamesCombination=Suspicious Names Combination
DESC_SuspiciousNamesCombination=Suspicious Names Combination

ERR_EQUALS_NOT_CHECKING_TYPE=equals() method not checking type of its parameter

DN_FieldUnusedParam=Assign Unused Constructor Parameter to Field
DSC_FieldUnusedParam=Assign Unused Constructor Parameter to Field
FIX_AssignToExisting=Assign to Existing Field
FIX_CreateField=Create Field
ERR_UnusedParameter=Parametro non usato


DSC_EqualsMethod=Implementation of .equals methods not checking the type of the input parameter
DN_EqualsMethod=.equals Method not Checking Type
FIX_CreateDeclaration=Create Declaration
DN_DeclarationForInstanceof=Declaration for instanceof
ERR_DeclarationForInstanceof=Declaration for instanceof

DSC_SynchronizationOnNonFinalField=Synchronization on non-final field
ERR_SynchronizationOnNonFinalField=Synchronization on non-final field
DN_SynchronizationOnNonFinalField=Synchronization on non-final field

HINT_SerialVersionUID=Add default serialVersionUID
HINT_SerialVersionUID_Generated=Add generated serialVersionUID

FieldForUnusedParamCustomizer.finalFields.text=<html>Fields are <code>final</code></html>
ACSD_Final_Fields=Make fields created by this hint final.

DSC_StaticImport=Convert method to static import. Feedback to http://www.netbeans.org/issues/show_bug.cgi?id=89258
DN_StaticImport=Static imports
ERR_StaticImport=Convert method to static import
HINT_StaticImport=Convert {0} to static import
HINT_StaticImport2=Add static import for {0}

DN_StringBuilderAppend=String concatenation in StringBuilder.append
DESC_StringBuilderAppend=Looks for string concatenation in the parameter of an invocation of the append method of StringBuilder or StringBuffer.
ERR_StringBuilderAppend=String concatenation in {0}.append
FIX_StringBuilderAppend=Use chain of .append methods instead of string concatenation

#ThisIsAnonymous hint
DN_org.netbeans.modules.java.hints.ThisInAnonymous=Synchronizing on this in anonymous class
DESC_org.netbeans.modules.java.hints.ThisInAnonymous=<html>Synchronizing on <tt>this</tt> in anonymous or local class is probably a result of refactoring and possibly a mistake
ERR_ThisInAnonymous=Synchronizing on this in anonymous class
ERR_ThisInAnonymousLocal=Synchronizing on this in local class
FIX_ThisInAnonymous=Synchronize on enclosing class

#LoggerNotStaticFinal hint
DN_org.netbeans.modules.java.hints.LoggerNotStaticFinal=Logger declaration is not static final
DESC_org.netbeans.modules.java.hints.LoggerNotStaticFinal=Each class should have one unique logger. If declared as a field it should be static and final.
MSG_LoggerNotStaticFinal_checkLoggerDeclaration=The logger declaration field {0} should be static and final
MSG_LoggerNotStaticFinal_checkLoggerDeclaration_fix=Make field {0} static and final

#MultipleLoggers hint
DN_org.netbeans.modules.java.hints.MultipleLoggers=Multiple loggers
DESC_org.netbeans.modules.java.hints.MultipleLoggers=There are several loggers declared for a single class.
MSG_MultipleLoggers_checkMultipleLoggers=Multiple loggers {0} declared for {1} class

#NoLoggers hint
DN_org.netbeans.modules.java.hints.NoLoggers=No loggers
DESC_org.netbeans.modules.java.hints.NoLoggers=There is no logger declared for a class.
MSG_NoLoggers_checkNoLoggers=No logger declared for {0} class
MSG_NoLoggers_checkNoLoggers_Fix=Create logger field in {0} class

#ShiftOutOfRange hint
DN_org.netbeans.modules.java.hints.ShiftOutOfRange=Shift operation outside of the reasonable range
DESC_org.netbeans.modules.java.hints.ShiftOutOfRange=This inspection reports any instances of shift operations where the value shifted by is constant and outside of the reasonable range. Integer shift operations outside of the range 0..31 and long shift operations outside of therange 0..63 are reported. Shifting by negative or overly large values is almost certainly a coding error.
MSG_ShiftOutOfRange_int=Shift operation outside of the reasonable range 0..31
MSG_ShiftOutOfRange_long=Shift operation outside of the reasonable range 0..63

#ClassStructure hints
DN_org.netbeans.modules.java.hints.ClassStructure.finalClass=Final class
DESC_org.netbeans.modules.java.hints.ClassStructure.finalClass=Reports any instances of classes being declared final. Some coding standards discourage final classes.
MSG_FinalClass=Class {0} is declared final
FIX_RemoveFinalFromClass=Remove final modifier from the {0} class declaration
DN_org.netbeans.modules.java.hints.ClassStructure.finalMethod=Final method
DESC_org.netbeans.modules.java.hints.ClassStructure.finalMethod=Reports any instances of methods being declared final. Some coding standards discourage final classes.
MSG_FinalMethod=Method {0} is declared final
FIX_RemoveFinalFromMethod=Remove final modifier from the {0} method declaration
DN_org.netbeans.modules.java.hints.ClassStructure.finalPrivateMethod=Final private method
DESC_org.netbeans.modules.java.hints.ClassStructure.finalPrivateMethod=Reports any instances of methods being declared final and private. As private methods cannot be meaningfully overridden, declaring them final is redundant.
MSG_FinalPrivateMethod=Private method {0} is declared final
DN_org.netbeans.modules.java.hints.ClassStructure.finalStaticMethod=Final static method
DESC_org.netbeans.modules.java.hints.ClassStructure.finalStaticMethod=Reports any instances of methods being declared final and static. As static methods cannot be meaningfully overridden, declaring them final is redundant.
MSG_FinalStaticMethod=Static method {0} is declared final
DN_org.netbeans.modules.java.hints.ClassStructure.finalMethodInFinalClass=Final method in final class
DESC_org.netbeans.modules.java.hints.ClassStructure.finalMethodInFinalClass=Reports any instances of methods being declared final in classes that are declared final. This is unnecessary, and may be confusing.
MSG_FinalMethodInFinalClass=Method {0} is declared final in final class
DN_org.netbeans.modules.java.hints.ClassStructure.noopMethodInAbstractClass=No-op method in abstract class
DESC_org.netbeans.modules.java.hints.ClassStructure.noopMethodInAbstractClass=Reports any instances of no-op methods in abstract classes. It is usually a better design to make such methods abstract themselves, so that classes which inherit the methods will not forget to provide their own implementations.
MSG_NoopMethodInAbstractClass=No-op method {0} should be made abstract
DN_org.netbeans.modules.java.hints.ClassStructure.publicConstructorInNonPublicClass=Public constructor in non-public class
DESC_org.netbeans.modules.java.hints.ClassStructure.publicConstructorInNonPublicClass=Reports all constructors in non-public classes that are declared public.
MSG_PublicConstructorInNonPublicClass=Constructor is declared public in non-public class
FIX_RemovePublicFromConstructor=Remove public modifier from the constructor declaration
DN_org.netbeans.modules.java.hints.ClassStructure.protectedMemberInFinalClass=Protected member in final class
DESC_org.netbeans.modules.java.hints.ClassStructure.protectedMemberInFinalClass=Reports any instances of members being declared protected in classes that are declared final. Such members may be declared private or package-visible instead.
MSG_ProtectedMethodInFinalClass=Method {0} is declared protected in final class
MSG_ProtectedFieldInFinalClass=Field {0} is declared protected in final class
FIX_RemoveProtectedFromMethod=Remove protected modifier from the {0} method declaration
FIX_RemoveProtectedFromField=Remove protected modifier from the {0} field declaration
DN_org.netbeans.modules.java.hints.ClassStructure.markerInterface=Marker interface
DESC_org.netbeans.modules.java.hints.ClassStructure.markerInterface=Reports marker interfaces which have no methods or fields. Such interfaces may be confusing, and normally indicate a design failure. Interfaces which extend two or more other interfaces will not be reported.
MSG_MarkerInterface=Marker interface {0}
DN_org.netbeans.modules.java.hints.ClassStructure.classMayBeInterface=Class may be interface
DESC_org.netbeans.modules.java.hints.ClassStructure.classMayBeInterface=Reports any concrete or abstract classes which may be simplified to be interfaces. This occurs if the class has no superclass (other than Object), has no fields declared that are not static, final, and public, and has no methods declared that are not public and abstract, and no inner classes that cannot themselves be interfaces.
MSG_ClassMayBeInterface=Class {0} may be interface
FIX_ConvertClassToInterface=Convert class {0} to interface
DN_org.netbeans.modules.java.hints.ClassStructure.multipleTopLevelClassesInFile=Multiple top-level classes in file
DESC_org.netbeans.modules.java.hints.ClassStructure.multipleTopLevelClassesInFile=Reports any instances of multiple top-level classes in a single java file. Putting multiple top-level classes in a file can be confusing, and may degrade the usefulness of various software tools.
MSG_MultipleTopLevelClassesInFile=Multiple top-level classes in file

#AssignmentIssues hints
DN_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToForLoopParam=Assignment to for-loop parameter
DESC_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToForLoopParam=Reports any instances of assignment to variable declared in a for statement in the body of that statement. It also reports any attempt to increment or decrement the variable. While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
MSG_AssignmentToForLoopParam=Assignment to for-loop parameter {0}
DN_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToCatchBlockParameter=Assignment to catch-block parameter
DESC_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToCatchBlockParameter=Reports any instances of assignment to variable declared as a catch block parameter. While occasionally intended, this construct can be confusing.
MSG_AssignmentToCatchBlockParameter=Assignment to catch-block parameter {0}
DN_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToMethodParam=Assignment to method parameter
DESC_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToMethodParam=Reports any instances of assignment to a variable declared as a method parameter. It also reports any attempt to increment or decrement the variable. While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
MSG_AssignmentToMethodParam=Assignment to method parameter {0}
DN_org.netbeans.modules.java.hints.AssignmentIssues.nestedAssignment=Nested assignment
DESC_org.netbeans.modules.java.hints.AssignmentIssues.nestedAssignment=Reports any instances of assignment expressions nested inside other expressions. While admirably terse, such expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.
MSG_NestedAssignment=Nested assignment ''{0}''
DN_org.netbeans.modules.java.hints.AssignmentIssues.incrementDecrementUsed=Value of increment/decrement expression used
DESC_org.netbeans.modules.java.hints.AssignmentIssues.incrementDecrementUsed=Reports any instances of increment or decrement expressions nested inside other expressions. While admirably terse, such expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.
MSG_IncrementUsedAsExpression=Value of increment expression ''{0}'' is used
MSG_DecrementUsedAsExpression=Value of decrement expression ''{0}'' is used
FIX_IncrementUsedAsExpression=Extract increment expression ''{0}''
FIX_DecrementUsedAsExpression=Extract decrement expression ''{0}''
DN_org.netbeans.modules.java.hints.AssignmentIssues.replaceAssignWithOpAssign=Assignment replaceable with operator-assignment
DESC_org.netbeans.modules.java.hints.AssignmentIssues.replaceAssignWithOpAssign=Reports instances of assignment operations which can be replaced by operator-assignment. Code using operator-assignment may be clearer, and theoretically more performant.
MSG_ReplaceAssignmentWithOperatorAssignment=Assignment ''{0}'' is replaceable with operator-assignment
FIX_ReplaceAssignmentWithOperatorAssignment=Replace assignment ''{0}'' with operator-assignment

#IncompatibleMask hint
DN_org.netbeans.modules.java.hints.IncompatibleMask=Incompatible mask
DESC_org.netbeans.modules.java.hints.IncompatibleMask=This inspection reports any instances of bitwise mask expressions which are guaranteed to evaluate to false. Expressions checked are of the form (var & constant1) == constant2 or (var | constant1) == constant2, where constant1and constant2 are incompatible bitmask constants.
MSG_IncompatibleMask=IncompatibleMask: {0} is always false

#OverridableMethodCallInConstructor hint
DN_org.netbeans.modules.java.hints.OverridableMethodCallInConstructor=Problematic call in the constructor
DESC_org.netbeans.modules.java.hints.OverridableMethodCallInConstructor=Calling methods that can be overridden can be dangerous in the contructor because in the moment when the overridden method is called the object is not fully initialized.
MSG_org.netbeans.modules.java.hints.OverridableMethodCallInConstructor=Overridable method call in constructor
FIX_MakeMethod=Make the method {1} {0}
FIX_MakeClass=Make the class {1} {0}

#PointlessBitwiseExpression hint
DN_org.netbeans.modules.java.hints.PointlessBitwiseExpression=Pointless bitwise expression
DESC_org.netbeans.modules.java.hints.PointlessBitwiseExpression=This inspection reports any instances of pointless bitwise expressions. Such expressions include anding with zero, oring by zero, and shift by zero. Such expressions may be the result of automated refactorings not completely followed through to completion, and in any case are unlikely to be what the developer intended to do.
MSG_PointlessBitwiseExpression=Pointless bitwise expression
MSG_PointlessBitwiseExpression_fix=Zero constant should be removed

#LeakingThisInConstructor hint
DN_org.netbeans.modules.java.hints.LeakingThisInConstructor=Passing suspicious parameter in the constructor
DESC_org.netbeans.modules.java.hints.LeakingThisInConstructor=Using this as parameter can be dangerous in the contructor because the object is not fully initialized.
MSG_org.netbeans.modules.java.hints.LeakingThisInConstructor=Leaking this in constructor

#ThreadDumpStack hint
DN_org.netbeans.modules.java.hints.ThreadDumpStack=Thread Dump Stack
DESC_org.netbeans.modules.java.hints.ThreadDumpStack=This inspection reports any uses Thread.dumpStack().These are often temporary debugging statements, and should probably be either removed from production code,or replaced by a more robust logging facility.
MSG_ThreadDumpStack=Thread Dump Stack
MSG_ThreadDumpStack_fix=Thread.dumpStack() should be removed

#PrintStackTrace hint
DN_org.netbeans.modules.java.hints.PrintStackTrace=Print Stack Trace
DESC_org.netbeans.modules.java.hints.PrintStackTrace=This inspection reports any uses Throwable.printStackTrace() without arguments. These are often temporary debugging statements, and should probably be either removed from production code, or replaced by a more robust logging facility.
MSG_PrintStackTrace=Print Stack Trace
MSG_PrintStackTrace_fix=Throwable.printStackTrace() should be removed

#SystemOut hint
DN_org.netbeans.modules.java.hints.SystemOut=System out / err
DESC_org.netbeans.modules.java.hints.SystemOut=This inspection reports any uses of System.out or System.err. These are often temporary debugging statements, and should probably be either removed from production code, or replaced by a more robust logging facility.
MSG_SystemOut=Uses of System.out or System.err are often temporary debugging statements.
MSG_SystemOut_fix=Remove statement

#ObsoleteCollection hint
DN_org.netbeans.modules.java.hints.ObsoleteCollection=Obsolete Collection
DESC_org.netbeans.modules.java.hints.ObsoleteCollection=This inspection reports any uses of java.util.Vector or java.util.Hashtable. While still supported, these classes were made obsolete by the JDK1.2 collection classes, and should probably not be used in new development.
MSG_ObsoleteCollection=Obsolete Collection

#StaticNonFinalUsedInInitialization hint
DN_org.netbeans.modules.java.hints.StaticNonFinalUsedInInitialization=Static non-final variable used during initialization
DESC_org.netbeans.modules.java.hints.StaticNonFinalUsedInInitialization=Using static non-final variables can be dangerous in the initialization code because their values may depend on the order of initialization statements
MSG_org.netbeans.modules.java.hints.StaticNonFinalUsedInInitialization=Usage of static non-final variable during initialization

LBL_WarnHiddenStaticFields=Warn when the hidden field is static
TP_WarnHiddenStaticFields=Whether the hint should warn when the hidden field is static

LBL_Javac_FINALLY=finally
