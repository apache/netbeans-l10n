LBL_TabsAndIndents=Tabs and Indents
LBL_CodeGeneration=Code Generation
LBL_Alignment=Alignment
LBL_Braces=Braces
LBL_Wrapping=Wrapping
LBL_BlankLines=Blank Lines
LBL_Spaces=Spaces
LBL_Imports=Importa

LBL_bp_SAME_LINE=Same Line
LBL_bp_NEW_LINE=New Line
LBL_bp_NEW_LINE_HALF_INDENTED=New Line Half Indented
LBL_bp_NEW_LINE_INDENTED= New Line Indented

LBL_bg_GENERATE=Genera
LBL_bg_LEAVE_ALONE=Leave Alone
LBL_bg_ELIMINATE=Eliminate

LBL_wrp_WRAP_ALWAYS=Always
LBL_wrp_WRAP_IF_LONG=If Long
LBL_wrp_WRAP_NEVER=Mai

LBL_ExpandTabToSpaces=&Expand Tab to Spaces
LBL_TabSize=&Tab Size:
LBL_IndentSize=Dimensione dell'&Indentazione:
LBL_ContinuationIndentSize=Dimensione dell'indentazione della &Continuazione:
LBL_LabelIndent=&Label Indentation\:
LBL_AbsoluteLabelIndent=&Absolute Label Indentation
LBL_IndentTopLevelClassMemberts=&Indent Top Level Class Members
LBL_AddLeadingStarInComment=A&dd Leading Star In Comment
LBL_RightMargin=&Right Margin:

LBL_Naming=Naming\:
LBL_PreferLongerNames=Prefer Longer Names
LBL_Prefix=Prefisso
LBL_Suffix=Suffix
LBL_Field=Field\:
LBL_StaticField=Static Field\:
LBL_Parameter=Parameter\:
LBL_LocalVariable=Local Variable\:
LBL_Misc=Misc\:
LBL_QualifyFieldAccess=Qualify Field Access
LBL_UseIsForBooleanGetters=Use Is For Boolean Getters
LBL_AddOverrideAnnotation=Add Override Annotation
LBL_FinalMofier=Final Modifier\:
LBL_ParametersFinal=Make Generated Parameters Final
LBL_LocalVariablesFinal=Make Generated Local variables Final
LBL_ImportOredering=Import Ordering\:
LBL_ImportUp=Sposta in alto
LBL_ImportDown=Sposta in basso
LBL_blBeforePackage=Before &Package\:
LBL_blAfterPackage=After P&ackage\:
LBL_blBeforeImports=Before &Imports\:
LBL_blAfterImports=After Imports\:
LBL_blBeforeClass=Before &Class\:
LBL_blAfterClass=After C&lass\:
LBL_blAfterClassHeader=After Class &Header\:
LBL_blBeforeFields=Before &Field\:
LBL_blAfterFields=After Fi&eld\:
LBL_blBeforeMethods=Before &Method\:
LBL_blAfterMethods=After Me&thod\:

LBL_BeforeKeywords=Before Keywords
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Before Parentheses
LBL_spaceBeforeMethodDeclParen=Method Declaration
LBL_spaceBeforeMethodCallParen=Method Call
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeTryParen="try"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotation Parameters

LBL_AroundOperators=Around Operators
LBL_spaceAroundUnaryOps=Unary Operators
LBL_spaceAroundBinaryOps=Binary Operators
LBL_spaceAroundTernaryOps=Ternary Operators
LBL_spaceAroundAssignOps=Assignment Operators

LBL_BeforeLeftBraces=Before Left Braces
LBL_spaceBeforeClassDeclLeftBrace=Class Declaration
LBL_spaceBeforeMethodDeclLeftBrace=Method Declaration
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeDoLeftBrace="do"
#LBL_spaceBeforeSwitchLeftBrace="switch"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
#LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Static Initializer
LBL_spaceBeforeArrayInitLeftBrace=Array Initializer

LBL_WithinParentheses=Within Parentheses
LBL_spaceWithinParens=Parentheses
LBL_spaceWithinMethodDeclParens=Method Declaration
LBL_spaceWithinMethodCallParens=Method Call
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinTryParens="try"
#LBL_spaceWithinCatchParens="catch"
#LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Type Cast
LBL_spaceWithinAnnotationParens=Annotazione
LBL_spaceWithinBraces=Braces
LBL_spaceWithinArrayInitBrackets=Array Initializer Brackets

LBL_Other=Altri
LBL_spaceBeforeComma=Before Comma
LBL_spaceAfterComma=After Comma
LBL_spaceBeforeSemi=Before Semicolon
LBL_spaceAfterSemi=After Semicolon
LBL_spaceBeforeColon=Before Colon
LBL_spaceAfterColon=After Colon
LBL_spaceAfterTypeCast=After Type Cast
LBL_wrp_extendsImplementsKeyword=&Extends/Implements Keyword\: 
LBL_wrp_extendsImplementsList=E&xtends/Implements List\:
LBL_wrp_methodParameters=Method &Parameters\:
LBL_wrp_throwsKeyword=&Throws Keyword\:
LBL_wrp_throwsList=Th&rows List\:
LBL_wrp_methodCallArgs=Method Call Arguments\:
LBL_wrp_annotationArgs=Annotation Arg&uments\:
LBL_wrp_chainedMethodCalls=C&hained Method Calls\:
LBL_wrp_arrayInit=Array Initiali&zer\:
LBL_wrp_tryResources=Try Re&sources\:
LBL_wrp_multiCatches=Dis&junctive Catch Types\:
LBL_wrp_for=&For\:
LBL_wrp_forStatement=F&or Statement\:
LBL_wrp_ifStatement=&If Statement\:
LBL_wrp_whileStatement=&While Statement\:
LBL_wrp_doWhileStatement=&Do ... While Statement
LBL_wrp_assert=&Assert\:
LBL_wrp_enumConstants=Enum &Constants\:
LBL_wrp_annotations=A&nnotations\:
LBL_wrp_binaryOps=&Binary Operators\:
LBL_wrp_afeterBinaryOps=Wrap After Binary Operators
LBL_wrp_ternaryOps=Ternar&y Operators\:
LBL_wrp_afterTernaryOps=Wrap After Ternary Operators
LBL_wrp_assignOps=Assi&gnment Operators\:

LBL_br_bracesPlacement=Braces Placement
LBL_br_bracesGeneration=Braces Generation
LBL_al_newLines=New Lines
LBL_al_multilineAlignment=Multiline Alignment
LBL_bp_ClassDecl=&Class Declaration\:
LBL_bp_MethodDecl=&Method Declaration\:
LBL_bp_Other=&Other\:
LBL_bp_SpecialElseIf=&Special "else if" Treatment
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=after modifie&rs
LBL_am_MethodParams=Method &Parameters
LBL_am_CallArgs=Method Call Arg&uments
LBL_am_AnnotationArgs=&Annotation Arguments
LBL_an_Implements=I&mplements List
LBL_am_Throws=&Throws List
LBL_am_Paren=Parenthesize&d
LBL_am_BinaryOp=&Binary Operators
LBL_am_TernaryOp=Ter&nary Operators
LBL_am_Assign=Assi&gnment
LBL_am_For=&For
LBL_am_ArrayInit=Array Initiali&zer
LBL_am_TryResources=Try Re&sources
LBL_am_MultiCatch=Dis&junctive Catch Types

LBL_IndentCasesFromSwitch=Indent Case Statements In &Switch

#SAMPLE_Default=public class ClassA {public int number = 1;private String text ="A";public ClassA() {}public void meth(String text, int number) {}}

#SAMPLE_TabsIndents=public class ClassA {public int number = 1;private String letters[] = new String[]{ "A", "B" };public int meth(String text, int number) {if ( text == null ) {text = "a";}else if (text.length() == 0) {text = "empty";}else {number++;}label:switch(number) {case 1\:return meth("text", 22);case 2\:return 20;default\:return -1;}} }

#SAMPLE_Align=@Anno(paramA="aValue", paramB="bValue")public class ClassA implements InterfaceA, InterfaceB {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) throws ExceptionA, ExceptionB {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number =\nnumber + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = (number +\ni) * 2;}}}

#SAMPLE_Braces=public class ClassA {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number = number + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = number + i;}while(number > 0) {number--;}}}

#SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")@Deprecated public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {private static final String letters[] = new String[]{ "A", "B", "C", "D" };public int number = 1;public ClassA() {}public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {assert nuber + text.length() < 20 : "message";if (number==13 && object instanceof Runnable )method( "Some text", 12, new Object());for( int i = 1; i < 100; i++ )System.out.println(i);while ( this.number < 2 && number != 3 )this.number++;do method1().method2().method3();while ( this.number < 2 && number != 3 );return number > 100 ? -1 : -2;}public enum Where {NORTH, EAST, SOUTH, WEST;}}


#SAMPLE_BlankLines=package org.netbeans.samples;import java.util.List;import java.util.Map;public class ClassA {public int i;public int j;public ClassA() {}public void methodA() {}public void methodB() {}public class innerClass {}public static interface innerInterface {}}

#SAMPLE_Spaces=@Anno(paramA="aValue", paramB="bValue")public class ClassA {public int number = 1;private String text ="A";static float[] floats = new float[3];protected double[] doubles = new double[]{3.67,40,2e-30};static {floats[0]=12.6f;}public ClassA() {}public int meth(String text, int number) {if (number==13) {return (int)System.currentTimeMillis();}else {}for( int i = 20; i < 100; i++) {synchronized(this) {while(i%13>5)meth( text + " ", number++);}}for(float f : floats)System.out.println(f);switch(number) {case 1\:do { out( (2+3)*this.number--); } while(this.number > 6);return 10;case 2\:try {toString();}catch ( IllegalStateException illegalStateException ) {illegalStateException.printStackTrace();}finally {return 20;}default\:return number > 100 ? -1 : -2;}} }



#nlFinallyCheckBox1.text="finall&y"


AN_Preview=Anteprima
AD_Preview=Anteprima
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Indent Labels absolutely
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=Comment lines starting with leading star
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Additional indent for case statements
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Indent for top-level class members
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Indent size in spaces
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Label indentation size in spaces

