# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2007 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

DSC_ElNotAvail=Het origineel van het element dat geherstructureerd wordt is niet beschikbaar. Het was verwijdert of aanzienlijk verandert. Toepassingen kunnen niet verzamelt worden.
DSC_ElementNotResolved=Kan de niet-opgeloste elementen niet herstructureren
ERR_ProjectNotOpened=Cannot refactor {0} that is defined outside of an open project.

# --- SAFE DELETE REFACTORING ------------------------------------------------------
ERR_SafeDel=There was an error deleting <b>{0}</b>
LBL_ShowUsages=&Show Usages...
ERR_ReferencesFound=References to selected elements were found. Remove all references to these elements in order to safely delete your class.
ERR_SafeDel_FromReference=Safe Delete cannot be invoked from Class/Method References
ERR_SafeDel_InvalidType=Safe Delete can be invoked only on a Method, Field or Class
ERR_OverridesAbstractMethod=The selected method cannot be safely deleted since it implements an abstract method {0}. 

# --- EXTRACT INTERFACE REFACTORING ------------------------------------------------
TXT_ExtractInterface_CreateIfc=Create interface <b>{0}</b>.
TXT_ExtractInterface_Method=Create declaration of method <b>{0}</b> in the new interface.
TXT_ExtractInterface_MoveMethod=Move method <b>{0}</b> to the new interface.
TXT_ExtractInterface_Field=Move field <b>{0}</b> to the new interface.
TXT_ExtractInterface_Class=Move inner class <b>{0}</b> to the new interface.
TXT_ExtractInterface_Implements=Move <b>{0}</b> to the extends clause of the new interface.
TXT_ExtractInterface_AddImplements=Add <b>{0}</b> to the implements/extends clause.
ERR_ElementNotAvailable=Cannot resolve the element.
ERR_ExtractInterface_MembersNotAvailable=Nothing to extract.
ERR_ExtractInterface_WrongModifiers=Method {0} must be public and not static.
ERR_ExtractInterface_UnknownMember={0} member cannot be extracted.

# --- EXTRACT SUPER CLASS REFACTORING ------------------------------------------------
ERR_ExtractSC_MustBeClass=The selected type must be a class (cannot perform this operation on an interface, enum or annotation type).
# Illegal member (0 = member name)
ERR_ExtractSC_IllegalMember=Member "{0}" cannot be extracted into a super class. It does not belong to the source type.
ERR_ExtractSuperClass_MembersNotAvailable=Nothing to extract.
ERR_ExtractSuperClass_UnknownMember={0} member cannot be extracted.
TXT_ExtractSC_CreateSC=Create class <b>{0}</b>.
TXT_ExtractSC_Method=Create declaration of method <b>{0}</b> in the new super class.
TXT_ExtractSC_Member=Move <b>{0}</b> to the new super class.
TXT_ExtractSC_AddExtends=Set <b>{0}</b> to the extend clause.

# --- PULL UP REFACTORING ------------------------------------------------------
# *** Pre-check ***
# No supertype
ERR_PullUp_NoSuperTypes=Cannot pull up any members. The selected type has no supertypes in the currently opened projects.
# No member
ERR_PullUp_NoMembers=The selected type and its supertypes have no members that could be pulled up.
# *** Fast parameters check
# No selected member
ERR_PullUp_NoMembersSelected=No members are selected to be pulled up.
# No target type selected
ERR_PullUp_NoTargetType=No supertype is selected.
# *** Parameters check
# Illegal target type
ERR_PullUp_IllegalTargetType=The target type is not a supertype of the source type, or the source code for the target type is not available.
# Illegal member (0 = member name)
ERR_PullUp_IllegalMember=Member "{0}" cannot be pulled up. It does not belong to the source type or to one of the source type supertypes that are subtypes of the target type.
# Member already exists in the target type (0 = member name)
ERR_PullUp_MemberAlreadyExists=Member "{0}" already exists in the target type.
# *** Refactoring element descriptions
# Add abstract method to the target type (0 = method name)
ERR_CannotPullupDuplicateMembers=Cannot pull up two members with the same signature.
ERR_PullupNonPublicToInterface=Member "{0}" is being moved to interface, but is not public.

TXT_PullUp_AddMethod=Add abstract method\: <b>{0}</b>
# Move member to the target type (0 = member name)
TXT_PullUp_Member=Move <b>{0}</b> to the target type.

# --- PUSH DOWN REFACTORING ------------------------------------------------------
TXT_PushDown_Member=Copy <b>{0}</b> to the type <b>{1}</b>.
TXT_PushDown_Remove=Remove <b>{0}</b> element.
TXT_PushDown_Abstract=Make method <b>{0}</b> abstract.
TXT_PushDown_RelaxAccessModifier=Change modifier from <b>{0}</b> to <b>{1}</b>.
LBL_PushDown_private=private
LBL_PushDown_package_private=priv\u00e9 pakket
LBL_PushDown_protected=beschermd
ERR_PushDown_InvalidSource=Cannot resolve selected source: "{0}" -> "{1}".
ERR_PushDOwn_NoSubtype=Cannot push down any members. The selected type has no subtypes in the currently opened projects.
ERR_PushDown_NoMembers=The selected type has no members that could be pushed down.
ERR_PushDown_NoMembersSelected=No members are selected to be pushed down.
ERR_PushDown_AlreadyExists={0} already exists in {1}.

# --- INNER TO OUTER REFACTORING ------------------------------------------------
ERR_InnerToOuter_MustBeInnerClass=The selected type must be an inner type (cannot perform this operation on a top-level type).
ERR_InnerToOuter_FieldNameClash=Field named <b>{0}</b> already exists in this class.
ERR_InnerToOuter_ClassNameClash=Inner class named <b>{0}</b> already exists in the target class.
ERR_InnerToOuter_OuterUsed=The class being moved to the outer level uses members of its outer class. You should let the refactoring create an instance variable holding reference to the original outer class.
ERR_InnerToOuter_InnerHidden=One of the super types of the target class already defines an inner class named <b>{0}</b>.
TXT_InnerToOuter_MoveToOuter=Make this class an inner class of <b>{0}</b>.
TXT_InnerToOuter_MoveToTop=Make this class a top-level class.
TXT_InnerToOuter_Rename=Rename this class to <b>{0}</b>.
TXT_InnerToOuter_AddReference=Add a new instance field named <b>{0}</b> pointing to the original outer class, update class constructors.
TXT_InnerToOuter_AddConstructor=Add constructor since the default constructor will not be available in the super class.
TXT_InnerToOuter_AddConstructorInvocation=Add explicit constructor invocation since the default constructor will not be available in the super class.
TXT_InnerToOuter_RelaxAccessRights=Change from private to package private.
ERR_InnerToOuter_UseDeclareField=Cannot refactor "{0}". Use "Declare Field" option.
ERR_InnerToOuter_Anonymous=Cannot refactor anonymous classes.
WRN_InnerToOuterRefToPrivate=Inner class is using private feature {0} which will not be accessible after refactoring

# --- USE SUPERTYPE REFACTORING ------------------------------------------------------
TXT_UseSuperType=Use Supertype of <b>{0}</b> where possible
TXT_UseSuperTypeVariable=Change type of <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeReturnType=Change return type of <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeLocalVar=Change type of local variable(s) <b>{0}</b> to <b>{1}</b>
TXT_UseSuperTypeProblem=Type {0} is not visible within the body of {1}
ERR_UseSuperType_InvalidElement=Use Supertype can only be invoked on valid types
ERR_UseSuperTypeNoSuperType=No supertype selected.

# --- COPY CLASS ---------------------------------------------------------------
TXT_CopyClassToPackage=Create a new class {0} in package {1} as a copy of {2}

# rename error messages
ERR_RenameWrongType=Kan dit soort voorwerp niet hernoemen. Java package, method, field or class has to be selected.
ERR_Overrides=Deze methode overschrijft of implementeert methoden in super klassen/interfaces. Ze zullen allemaal hernoemd worden.
ERR_Overrides_Fatal=Deze methode overschrijft of implementeert methoden in super klassen/interfaces, daarvoor kan de naam niet verandert worden.
ERR_Overrides_tree=Deze methode overschrijft of implementeert een methode in {0}.   Deze methode wordt ook overschreven of ge\u00efmplementeerd in {1}.  Als je deze operatie echt wilt uitvoeren, roep het dan op voor de methode in {2}.
ERR_IsOverridden=Er zijn methoden in subklassen/uitvoerders van {0} die deze methode overschrijven of uitvoering. Ze zullen ook hernoemd worden.
ERR_WillBeOverridden=Na het hernoemen, wordt de originele methode "{0}" in {1} overschreven door methode "{2}" in {3}.
ERR_WillBeOverridden_access=Na het hernoemen, wordt de originele methode "{0}" in {1} overschreven door methode "{2}" in {3} met verminderde toegangsprivileges.
ERR_WillBeOverridden_static=Na het hernoemen, wordt de originele {0} methode "{1}" in {2} overschreven door {3} methode "{4}" in {5}.
ERR_WillBeOverridden_final=Na het hernoemen, wordt de originele finaal methode "{0}" in {1} overschreven door methode "{2}" in {3}.
ERR_WillOverride=Na het hernoemen, overschrijft methode "{0}" in {1} de originele methode "{2}" in {3}.
ERR_WillOverride_access=Na het hernoemen, overschrijft methode "{0}" in {1} de originele methode "{2}" in {3} met verhoogde toegangsprivileges.
ERR_WillOverride_static=Na het hernoemen, zal {0} methode "{1}" in {2} de originele {3} methode "{4}" in {5} overschrijven.
ERR_WillOverride_final=Na het hernoemen, zal methode "{0}" in {1} de originele finaal methode "{2}" in {3} overschrijven.
ERR_NameNotChanged=De naam is niet verandert. Geen veranderingen zullen aangebracht worden.
ERR_InvalidIdentifier="{0}" is not a valid Java identifier.
ERR_InvalidPackage="{0}" is geen geldige pakket indentificateur.
ERR_PackageExists=Pakket "{0}" bestaat al.
ERR_InnerClassClash=Kan niet hernoemen. Binnen klasse "{0}" bestaat al in klasse "{1}".
ERR_ClassClash=Kan niet hernoemen. Klasse {0} bestaat al in map {1}.
ERR_ClassPackageClash=Kan niet hernoemen. There is already folder {0} in {1}.
ERR_MethodClash=Kan niet hernoemen. Methode {0} met dezelfde handtekening bestaat al in klasse {1}.
ERR_FieldClash=Kan niet hernoemen. Veld {0} bestaat al in klasse {1}.
ERR_LocVariableClash=Kan niet hernoemen. {0} wordt al gebruikt.
ERR_Hides=Het veld dat hernoemd zal worden verbergt een veld in {0}.
ERR_WillHide=Het nieuwe veld zal een veld in {0} verbergen.
ERR_NameNotSet=Er is geen naam opgegeven.
ERR_CannotMoveIntoSamePackage=Kan de klasse(n) niet naar hetzelfde pakket verhuizen.
ERR_CannotRenameFile=Kan het element in het bibliotheek bestand: "{0}" niet hernoemen.
ERR_ResourceUnavailable=Kan methode "{0}" niet hernoemen. Bronbestand "{1}" is niet verkrijgbaar.
ERR_RenameNative=Attempt to rename native method "{0}". Renaming a native method can cause UnsatisfiedLinkError on runtime.
ERR_CannotRefactorThis=Cannot refactor "{0}".

#Rename package
TXT_RenamePackage=Rename file 

#where used error messages
ERR_WhereUsedWrongType=Kan niet naar toepassingen voor dit soort voorwerp zoeken. A Java element has to be selected.

# move class/package error messages
ERR_TargetFolderNotSet=Er is geen destinatie pakket gespecificeerd.
ERR_TargetFolderNotJavaPackage=A target folder is not java package.
ERR_SourceWithoutClass=De gekozen bron bevat geen enkele klasse.
ERR_SourceWithMoreClasses=Je kunt een klasse niet verhuizen vanuit een bron-bestand dat meerdere hoogste-niveau klassen bevat.
ERR_AccessesPackagePrivateFeature=Class "{0}" within the same package is using feature "{1}" of class you want to move ("{2}").
ERR_AccessesPackagePrivateClass=Klasse "{0}" in hetzelfde pakket gebruikt {1} klasse dat je wilt verhuizen ("{2}").
ERR_AccessesPackagePrivateConstructor=Klasse "{0}" in hetzelfde pakket gebruikt {1} constructeur die gedeclareerd is in de klasse die je wilt verhuizen ("{2}").
ERR_AccessesPackagePrivateFeature2=Class you want to move ("{0}") is using feature "{1}" of class "{2}" within the same package.
ERR_AccessesPackagePrivateClass2=Klasse die je wilt verhuizen ("{0}") gebruikt {1} klasse("{2}") in hetzelfde pakket.
ERR_AccessesPackagePrivateConstructor2=Klasse die je wilt verhuizen ("{0}") gebruikt {1} constructeur gedeclareerd in klasse ("{2}") in hetzelfde pakket.
ERR_PackageIsReadOnly=Pakket "{0}" is alleen-lezen.
ERR_ClassToMoveClashes=Klasse"{0}" bestaat al in het doelpakket.
ERR_ClassToMoveInDefaultPackage=Na de verhuizing zal het niet mogelijk om klassen naar het oorspronkelijke standaard pakket te importeren.
ERR_MovingClassToDefaultPackage=Als de klasse is verplaatst naar het standaard pakket, zullen klassen in andere pakketten niet in staat zijn om de verplaatste klasse te importeren.
ERR_FileAlreadyExists=Betand {0} bestaat al in pakket {1}.
ERR_PackageMovesToItself=Het bovenliggende pakket was gekozen als destinatie. Er zijn geen veranderingen aan te brengen.
ERR_CannotMovePackageToSubpackage=Een pakket kan niet naar een onderliggend pakket of naar zichzelf worden verplaatst.
ERR_DefaultPackageCannotBeMoved=Standaard pakket kan niet verhuisd worden.
ERR_CannotMoveFile=Kan bestand niet uit bibliotheek: "{0}" verhuizen.
ERR_MissingProjectDeps=There are references in project "{0}" to moved files, but source project "{0}" does not depend on target project "{1}". Projects need not compile.
ERR_ClasspathNotFound=No classpath defined for {0}.

# encapsulate field error messages
ERR_EncapsulateWrongType=Cannot encapsulate this type of object. A field has to be selected.
ERR_EncapsulateNoFields=No field found in {0}.
ERR_EncapsulateInIntf=Cannot encapsulate an interface field.
ERR_EncapsulateMethods=Getter and setter names have to be valid method names.
ERR_EncapsulateMethodsAccess=The accessibility of created methods is private but some selected fields are referenced from other sources.
ERR_EncapsulateMethodsDefaultAccess=The refactoring might break your code since created methods have a default accessibility but some selected fields are referenced from other sources.
ERR_EncapsulateInsideAssignment=Cannot replace {0} in {1} with void setter in {2}.
ERR_EncapsulateInsideConstructor=The accessibility of field {0} is private but it is referenced from constructor of class {1}.
ERR_EncapsulateWrongGetter=The getter {0} already exists but with wrong return type {1}.
ERR_EncapsulateWrongSetter=The setter {0} already exists but with wrong return type {1}.
ERR_EncapsulateNothingSelected=Nothing to encapsulate. You have to select some checkbox.

# change method signature error messages
ERR_MethodOverrides=De methode overschrijft of implementeert methoden in super klassen/interfaces.
ERR_MethodIsOverridden=Er zijn methoden in sub-klassen of uitvoerders van {0} die de methode  overschrijven of uitvoeren.
ERR_HasVarArg=Je kunt geen gebruik maken van de Change Method parameters voor het herstructureren van methoden met variabele argumenten.
ERR_newpar=Je moet {0} verschaffen voor alle nieuwe parameters.
ERR_parname=parameter naam
ERR_partype=parameter type
ERR_pardefv=standaard waarden
ERR_existingMethod=Kan handtekening niet veranderen. Methode {0} met dezelfde handtekening bestaat al in klasse {1}.
ERR_existingConstr=Kan handtekening niet veranderen. Constructeur met dezelfde handtekening bestaat al in klasse {0}.
ERR_NoValues=Je moet de waarden voor de nieuwe parameters verschaffen.
ERR_DuplicateName=Duplicaat parameter naam ({0}).
ERR_NameAlreadyUsed=Naam "{0}" wordt al gebruikt als de naam voor een lokale variabel.
ERR_CannotChangeModifiers=Kan modificatoren van methode in de interface niet veranderen.
ERR_StrongAccMod=Je kunt de toegangs modificateur tot {0}veranderen. Methode zal niet toegankelijk zijn voor sommige referenties. De bronnen zullen niet meer compileren na de restructuring!

ERR_ChangeParamsWrongType=Kan de parameters voor dit voorwerp niet veranderen. Een methode of de constructeur moet geselecteerd zijn.
MSG_NothingToFind=Je hebt niets geselecteerd om naar te zoeken. Selecteer zoek toepassingen, zoek overschrijdende methoden, of beide.
ERR_CannotRefactorLibraryClass=Cannot refactor library class "{0}".
ERR_MethodsInAnnotationsNotSupported=@interface members may not have parameters.
ERR_CannnotRefactorLibrary=Cannot change parameters of "{0}" which overrides method from library class.

ERR_VarargsFinalPosition=Varargs can be used only in the final argument position.
ERR_FindUsagesArrayType=Cannot perform find usages on []

