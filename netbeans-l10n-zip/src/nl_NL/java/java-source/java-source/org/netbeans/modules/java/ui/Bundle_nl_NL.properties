LBL_TabsAndIndents=Tabstoppen en inspringingen
LBL_CodeGeneration=Code ontwikkeling
LBL_Alignment=Uitlijning
LBL_Braces=Accolades
LBL_Wrapping=Tekstomloop
LBL_BlankLines=Blanco regels
LBL_Spaces=Spaties
LBL_Imports=Importen

LBL_bp_SAME_LINE=Dezelfde regel
LBL_bp_NEW_LINE=Nieuwe regel
LBL_bp_NEW_LINE_HALF_INDENTED=Nieuwe regel half inspringen
LBL_bp_NEW_LINE_INDENTED= Nieuwe ingesprongen regel

LBL_bg_GENERATE=Genereren
LBL_bg_LEAVE_ALONE=Met rust laten
LBL_bg_ELIMINATE=Schrappen

LBL_wrp_WRAP_ALWAYS=Altijd
LBL_wrp_WRAP_IF_LONG=Indien lang
LBL_wrp_WRAP_NEVER=Nooit

LBL_ExpandTabToSpaces=Tabstop vervangen door spaties
LBL_TabSize=&Tabstopmaat:
LBL_IndentSize=&Inspringingsmaat:
LBL_ContinuationIndentSize=Volgende inspringingsmaat:
LBL_LabelIndent=Etiketinspringing
LBL_AbsoluteLabelIndent=&Absolute etiketinspringing
LBL_IndentTopLevelClassMemberts=Topniveau klasseleden &inspringen
LBL_AddLeadingStarInComment=Ster voorvoegen aan opmerking
LBL_RightMargin=&Rechter marge:

LBL_Naming=Benaming\:
LBL_PreferLongerNames=Voorkeur geven aan langere namen
LBL_Prefix=Voorvoegsel
LBL_Suffix=Achtervoegsel
LBL_Field=Veld\:
LBL_StaticField=Statisch veld\:
LBL_Parameter=Parameter\:
LBL_LocalVariable=Plaatselijke variabel\:
LBL_Misc=Div\:
LBL_QualifyFieldAccess=Veldtoegang kwalificeren
LBL_UseIsForBooleanGetters=Gebruik is voor boole-waarde getters
LBL_AddOverrideAnnotation=Ophefaantekening toevoegen
LBL_FinalMofier=Definitieve modificator\:
LBL_ParametersFinal=Maak gegenereerde parameters definitief
LBL_LocalVariablesFinal=Maak gegenereerde plaatselijke parameters definitief
LBL_ImportOredering=Sortering van importeren\:
LBL_ImportUp=Naar boven
LBL_ImportDown=Naar beneden
LBL_blBeforePackage=Voor het &pakket\:
LBL_blAfterPackage=Na het p&akket\:
LBL_blBeforeImports=Voor &importen\:
LBL_blAfterImports=Na importen\:
LBL_blBeforeClass=Voor klasse\:
LBL_blAfterClass=Na klasse\:
LBL_blAfterClassHeader=Na klasse &header\:
LBL_blBeforeFields=Voor het veld\:
LBL_blAfterFields=Na het veld\:
LBL_blBeforeMethods=Voor de &methode\:
LBL_blAfterMethods=Na de me&thode\:

LBL_BeforeKeywords=Voor de trefwoorden
#LBL_spaceBeforeWhile="while"
#LBL_spaceBeforeElse="else"
#LBL_spaceBeforeCatch="catch"
#LBL_spaceBeforeFinally="finally"

LBL_BeforeParentheses=Voor de haakjes
LBL_spaceBeforeMethodDeclParen=Methodedeclaratie
LBL_spaceBeforeMethodCallParen=Methodeaanroep
#LBL_spaceBeforeIfParen="if"
#LBL_spaceBeforeForParen="for"
#LBL_spaceBeforeWhileParen="while"
#LBL_spaceBeforeTryParen="try"
#LBL_spaceBeforeCatchParen="catch"
#LBL_spaceBeforeSwitchParen="switch"
#LBL_spaceBeforeSynchronizedParen="synchronized"
LBL_spaceBeforeAnnotationParen=Annotatieparameters 

LBL_AroundOperators=Rondom operatoren
LBL_spaceAroundUnaryOps=Monadische operatoren
LBL_spaceAroundBinaryOps=Binaire operatoren
LBL_spaceAroundTernaryOps=Ternaire operatoren
LBL_spaceAroundAssignOps=Toewijzingsoperatoren

LBL_BeforeLeftBraces=Voor de linkse accolade
LBL_spaceBeforeClassDeclLeftBrace=Klassedeclaratie
LBL_spaceBeforeMethodDeclLeftBrace=Methodedeclaratie
#LBL_spaceBeforeIfLeftBrace="if"
#LBL_spaceBeforeElseLeftBrace="else"
#LBL_spaceBeforeWhileLeftBrace="while"
#LBL_spaceBeforeForLeftBrace="for"
#LBL_spaceBeforeDoLeftBrace="do"
#LBL_spaceBeforeSwitchLeftBrace="switch"
#LBL_spaceBeforeTryLeftBrace="try"
#LBL_spaceBeforeCatchLeftBrace="catch"
#LBL_spaceBeforeFinallyLeftBrace="finally"
#LBL_spaceBeforeSynchronizedLeftBrace="synchronized"
LBL_spaceBeforeStaticInitLeftBrace=Statische initialisatiefunctie
LBL_spaceBeforeArrayInitLeftBrace=Matrixinitialisatiefunctie

LBL_WithinParentheses=Tussen haakjes
LBL_spaceWithinParens=Haakjes
LBL_spaceWithinMethodDeclParens=Methodedeclaratie
LBL_spaceWithinMethodCallParens=Methodeaanroep
#LBL_spaceWithinIfParens="if"
#LBL_spaceWithinForParens="for"
#LBL_spaceWithinWhileParens="while"
#LBL_spaceWithinSwitchParens="switch"
#LBL_spaceWithinTryParens="try"
#LBL_spaceWithinCatchParens="catch"
#LBL_spaceWithinSynchronizedParens="synchronized"
LBL_spaceWithinTypeCastParens=Typecast
LBL_spaceWithinAnnotationParens=Annotatie
LBL_spaceWithinBraces=Accolades
LBL_spaceWithinArrayInitBrackets=Matrixinitialisatiefunctie accolades

LBL_Other=Andere
LBL_spaceBeforeComma=voor de komma
LBL_spaceAfterComma=Na de komma
LBL_spaceBeforeSemi=Voor de puntkomma
LBL_spaceAfterSemi=Na de puntkomma
LBL_spaceBeforeColon=Voor de dubbele punt
LBL_spaceAfterColon=Na de dubbele punt
LBL_spaceAfterTypeCast=Na de type-cast
LBL_wrp_extendsImplementsKeyword=Breidt-uit/implementeert trefwoord\: 
LBL_wrp_extendsImplementsList=Breidt-uit/implementeert lijst\:
LBL_wrp_methodParameters=Methode &parameters\:
LBL_wrp_throwsKeyword=Werp&t trefwoord op\:
LBL_wrp_throwsList=We&rpt lijst op\:
LBL_wrp_methodCallArgs=Methodeaanroep argumenten\:
LBL_wrp_annotationArgs=Annotatie arg&umenten\:
LBL_wrp_chainedMethodCalls=Geketende methode-aanroepen\: 
LBL_wrp_arrayInit=Matrixinitialisatiefunctie
LBL_wrp_tryResources=Try Re&sources\:
LBL_wrp_multiCatches=Dis&junctive Catch Types\:
LBL_wrp_for=&For\:
LBL_wrp_forStatement=F&or instructie\:
LBL_wrp_ifStatement=&If instructie\:
LBL_wrp_whileStatement=&While instructie\:
LBL_wrp_doWhileStatement=&Do ... While instructie
LBL_wrp_assert=Bevestigen\:
LBL_wrp_enumConstants=Vaste tekst &constanten
LBL_wrp_annotations=A&nnotaties\:
LBL_wrp_binaryOps=&Binaire operatoren\:
LBL_wrp_afeterBinaryOps=Wrap After Binary Operators
LBL_wrp_ternaryOps=Ternaire operatoren\:
LBL_wrp_afterTernaryOps=Wrap After Ternary Operators
LBL_wrp_assignOps=Toewijzingsoperatoren\:

LBL_br_bracesPlacement=Plaatsing van accolades
LBL_br_bracesGeneration=Ontwikkeling van accolades
LBL_al_newLines=Nieuwe regels
LBL_al_multilineAlignment=Meerdere regels uitlijning
LBL_bp_ClassDecl=Klassede&claratie\:
LBL_bp_MethodDecl=&Methodedeclaratie\:
LBL_bp_Other=Ander\:
LBL_bp_SpecialElseIf=&Speciale "else if" behandeling
#LBL_bg_If="&if"\:
#LBL_bg_For="&for"\:
#LBL_bg_While="&while"\:
#LBL_bg_DoWhile="&do ... while"\:
#LBL_nl_Else="&else"
#LBL_nl_While="w&hile"
#LBL_nl_Catch="c&atch"
#LBL_nl_Finally="finall&y"
LBL_nl_Modifiers=na modifie&rs
LBL_am_MethodParams=Method &parameters
LBL_am_CallArgs=Methodeaanroep arg&umenten
LBL_am_AnnotationArgs=&Annotatie argumenten
LBL_an_Implements=I&mplementeert lijst
LBL_am_Throws=Werpt lijst op
LBL_am_Paren=Tussen haakjes
LBL_am_BinaryOp=&Binaire operatoren
LBL_am_TernaryOp=Ter&naire operatoren
LBL_am_Assign=Toewijzin&g
LBL_am_For=Voor
LBL_am_ArrayInit=Matrixinitialisatiefunctie
LBL_am_TryResources=Try Re&sources
LBL_am_MultiCatch=Dis&junctive Catch Types

LBL_IndentCasesFromSwitch=Case-instructies inspringen in &schakeloptie

#SAMPLE_Default=public class ClassA {public int number = 1;private String text ="A";public ClassA() {}public void meth(String text, int number) {}}

#SAMPLE_TabsIndents=public class ClassA {public int number = 1;private String letters[] = new String[]{ "A", "B" };public int meth(String text, int number) {if ( text == null ) {text = "a";}else if (text.length() == 0) {text = "empty";}else {number++;}label:switch(number) {case 1\:return meth("text", 22);case 2\:return 20;default\:return -1;}} }

#SAMPLE_Align=@Anno(paramA="aValue", paramB="bValue")public class ClassA implements InterfaceA, InterfaceB {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) throws ExceptionA, ExceptionB {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number =\nnumber + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = (number +\ni) * 2;}}}

#SAMPLE_Braces=public class ClassA {private String letters[] = new String[]{"A", "B"};public int meth(String text, int number) {if ( text != null ) {try {meth( "Some text", text.length());} catch ( Throwable t ) {} finally {}} else {text = number == 0 ? "empty" : "nonempty";}do {number = number + 1;} while (number < 2);for( int i = 1; i < 100; i++ ) {number = number + i;}while(number > 0) {number--;}}}

#SAMPLE_Wrapping=@Anno(paramA="a Value", paramB="bValue")@Deprecated public class ClassA extends Object implements InterfaceA, InterfaceB, InterfaceC {private static final String letters[] = new String[]{ "A", "B", "C", "D" };public int number = 1;public ClassA() {}public int method(String text, int number, Object object) throws ExceptionA, ExceptionB {assert nuber + text.length() < 20 : "message";if (number==13 && object instanceof Runnable )method( "Some text", 12, new Object());for( int i = 1; i < 100; i++ )System.out.println(i);while ( this.number < 2 && number != 3 )this.number++;do method1().method2().method3();while ( this.number < 2 && number != 3 );return number > 100 ? -1 : -2;}public enum Where {NORTH, EAST, SOUTH, WEST;}}


#SAMPLE_BlankLines=package org.netbeans.samples;import java.util.List;import java.util.Map;public class ClassA {public int i;public int j;public ClassA() {}public void methodA() {}public void methodB() {}public class innerClass {}public static interface innerInterface {}}

#SAMPLE_Spaces=@Anno(paramA="aValue", paramB="bValue")public class ClassA {public int number = 1;private String text ="A";static float[] floats = new float[3];protected double[] doubles = new double[]{3.67,40,2e-30};static {floats[0]=12.6f;}public ClassA() {}public int meth(String text, int number) {if (number==13) {return (int)System.currentTimeMillis();}else {}for( int i = 20; i < 100; i++) {synchronized(this) {while(i%13>5)meth( text + " ", number++);}}for(float f : floats)System.out.println(f);switch(number) {case 1\:do { out( (2+3)*this.number--); } while(this.number > 6);return 10;case 2\:try {toString();}catch ( IllegalStateException illegalStateException ) {illegalStateException.printStackTrace();}finally {return 20;}default\:return number > 100 ? -1 : -2;}} }



#nlFinallyCheckBox1.text="finall&y"


AN_Preview=Preview
AD_Preview=Voorbeeld
FmtTabsIndents.absoluteLabelIndentCheckBox.AccessibleContext.accessibleDescription=Indent Labels absolutely
FmtTabsIndents.addLeadingStarInCommentCheckBox.AccessibleContext.accessibleDescription=Comment lines starting with leading star
FmtTabsIndents.indentCasesFromSwitchCheckBox.AccessibleContext.accessibleDescription=Additional indent for case statements
FmtTabsIndents.indentTopLevelClassMembersCheckBox.AccessibleContext.accessibleDescription=Indent for top-level class members
FmtTabsIndents.continuationIndentSizeField.AccessibleContext.accessibleDescription=Indent size in spaces
FmtTabsIndents.labelIndentField.AccessibleContext.accessibleDescription=Label indentation size in spaces

