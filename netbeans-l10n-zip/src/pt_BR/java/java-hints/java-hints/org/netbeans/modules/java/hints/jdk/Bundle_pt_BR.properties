DESC_containsForIndexOf=Localiza usos de String.indexOf que podem ser substitu\u00eddos por String.contains
DESC_IteratorToFor=Substitui os usos simples de Iterador por um loop for correspondente.
DN_containsForIndexOf=String.indexOf pode ser substitu\u00edda por String.contains
DN_IteratorToFor=Usar loop for JDK 5
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
# The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 2010 Sun
# Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
DN_org.netbeans.modules.java.hints.jdk.ThrowableInitCause=Throwable.initCause desnecess\u00e1rio
DESC_org.netbeans.modules.java.hints.jdk.ThrowableInitCause=Localiza chamadas de Throwable.initCause que podem ser substitu\u00eddas por chamadas simples do construtor. Quando a caixa de sele\u00e7\u00e3o "Nunca alterar o resultado de getMessage()" n\u00e3o estiver marcada, <code>(IllegalStateException) new IllegalStateException().initCause(ex)</code> ser\u00e1 reescrito como <code>new IllegalStateException(ex)</code>, que alterar\u00e1 o valor de getMessage(). Quando a caixa de sele\u00e7\u00e3o estiver marcada, o c\u00f3digo se tornar\u00e1 <code>new IllegalStateException(null, ex)</code>. Uma regra semelhante se aplica para a cria\u00e7\u00e3o de exce\u00e7\u00e3o de <code>getMessage()</code> ou <code>getLocalizedMessage()</code> da causa.
ERR_AnnotationProcessors.overridingGetSupportedAnnotations=Instru\u00e7\u00e3o AbstractProcessor.getSupportedAnnotationTypes() substitu\u00edda; pode haver problemas de desempenho durante o desenvolvimento
ERR_containsForIndexOf=String.indexOf pode ser substitu\u00edda por String.contains
ERR_IteratorToFor=Uso do Iterator para loop simples
ERR_IteratorToForArray=Usar melhoria para fazer loop para iterar sobre o array
# {0} - name of primitive class
FIX_ChangeBoxingToTypecast=Transmitir para {0} em vez de demarcar
FIX_ChangeTryToARM=Adicionar recursos \u00e0 try de fechamento
FIX_containsForIndexOf=String.indexOf pode ser substitu\u00edda por String.contains
FIX_ConvertToLambda=Usar express\u00e3o lambda
FIX_ConvertToMemberReference=Usar refer\u00eancia de membro
FIX_IteratorToFor=Converter para loop for
FIX_MergeTryResources=Adicionar a try-with-resources de fechamento
FIX_ThrowableInitCause=Usar construtor de exce\u00e7\u00e3o
ERR_ThrowableInitCause=Uso desnecess\u00e1rio de Throwable.initCause
# {0} - name of boxing class
FIX_UnnecessaryBoxing1=Remover novo(a) {0}
# {0} - name of boxing class
FIX_UnnecessaryBoxing2=Remover {0}.valueOf
# {0} - the type-specific unboxing method name
FIX_UnnecessaryUnboxing=Remover .{0}()
# template for generated label names, must form a valid Java identifiers
# {0} - unique integer
LABEL_OuterGeneratedLabel=OUTER_{0}
# initial label for breaking out of the innermost loop
LABEL_OuterGeneratedLabelInitial=OUTER
LBL_org.netbeans.modules.java.hints.jdk.ThrowableInitCause.STRICT_KEY=Manter sempre o resultado de getMessage()
MSG_AnonymousConvertibleToLambda=Essa cria\u00e7\u00e3o de classe interna an\u00f4nima pode ser transformada em uma express\u00e3o lambda.
# {0} - string literal value
TEXT_ChainedIfContainsSameValues=O valor de string ''{0}'' usado na compara\u00e7\u00e3o de Strings aparece antes na instru\u00e7\u00e3o if-else-if encadeada. Essa condi\u00e7\u00e3o nunca \u00e9 avaliada como verdadeira
TEXT_ConvertToSwitch=Converter em switch
# {0} - name of boxing class
TEXT_UnnecessaryBoxing=Demarca\u00e7\u00e3o desnecess\u00e1ria para {0}
TEXT_UnnecessaryUnboxing=Cancelamento de demarca\u00e7\u00e3o desnecess\u00e1rio
TP_org.netbeans.modules.java.hints.jdk.ThrowableInitCause.STRICT_KEY=Manter sempre o resultado de getMessage()

DN_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch=Usar altern\u00e2ncia de Strings quando poss\u00edvel.
DESC_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch=Marca cascatas de ifs que podem ser convertidas em altern\u00e2ncias de Strings.
ERR_ConvertToStringSwitch=Converter em altern\u00e2ncia de Strings
FIX_ConvertToStringSwitch=Converter em altern\u00e2ncia de Strings
LBL_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch.KEY_ALSO_EQ=Considerar tamb\u00e9m a compara\u00e7\u00e3o de String pelo operador ==
TP_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch.KEY_ALSO_EQ=Se a compara\u00e7\u00e3o de String pelo operador == deve ser considerada como uma compara\u00e7\u00e3o de string.

DN_org.netbeans.modules.java.hints.jdk.JoinCatches=Unir se\u00e7\u00f5es catch utilizando multicatch
DESC_org.netbeans.modules.java.hints.jdk.JoinCatches=Unir se\u00e7\u00f5es catch utilizando multicatch
ERR_JoinCatches=\u00c9 poss\u00edvel substituir por multicatch
FIX_JoinCatches=Substituir por multicatch

DN_org.netbeans.modules.java.hints.jdk.UseSpecificCatch=Utilizar catch espec\u00edfico
DESC_org.netbeans.modules.java.hints.jdk.UseSpecificCatch=Converte catch (Throwable) ou catch (Exce\u00e7\u00e3o) para multicatch (quando o n\u00edvel de origem de java for 7 ou superior) ou em v\u00e1rias cl\u00e1usulas de catch (para plataformas Java mais recentes) obtendo as exce\u00e7\u00f5es geradas pelo corpo try. Os tipos de exce\u00e7\u00e3o observadas podem ser configuradas; nomes totalmente qualificados devem ser usados.
ERR_UseSpecificCatch=\u00c9 poss\u00edvel substituir por multicatch ou v\u00e1rias cl\u00e1usulas de catch capturando exce\u00e7\u00f5es espec\u00edficas
FIX_UseSpecificCatch=Substituir por multicatch que captura exce\u00e7\u00f5es espec\u00edficas
FIX_UseSpecificCatchSplit=Gerar handlers de catch para exce\u00e7\u00f5es espec\u00edficas
FIX_UseSpecificCatchSingle=Substituir por catch({0})

DN_org.netbeans.modules.java.hints.jdk.ConvertToARM=Converter em try-with-resources
DESC_org.netbeans.modules.java.hints.jdk.ConvertToARM=Converte o bloco try finally em try-with-resources
TXT_ConvertToARM=Converter em try-with-resources

DN_Javac_canUseDiamond=\u00c9 poss\u00edvel utilizar Diamond
DESC_Javac_canUseDiamond=Adverte em que lugares o operador Diamond do JDK 7 pode ser utilizado no lugar dos par\u00e2metros de tipo expl\u00edcito
FIX_ConvertToDiamond=Utilizar infer\u00eancia a Diamond
ConvertToDiamondBulkHintPanel.jLabel1.text=Utilize o operador diamante para as novas express\u00f5es da inst\u00e2ncia em:
ConvertToDiamondBulkHintPanel.initializer.text=Inicializador de Vari\u00e1vel
ConvertToDiamondBulkHintPanel.assignment.text=Designa\u00e7\u00e3o
ConvertToDiamondBulkHintPanel.returnStatement.text=Instru\u00e7\u00e3o de Retorno
ConvertToDiamondBulkHintPanel.other.text=Outros
ConvertToDiamondBulkHintPanel.argument.text=Argumento do M\u00e9todo

DN_org.netbeans.modules.java.hints.jdk.AddUnderscores=Adicionar Sublinhado
DESC_org.netbeans.modules.java.hints.jdk.AddUnderscores=Proposto para adicionar sublinhados a literais de inteiros para melhorar sua legibilidade
ERR_org.netbeans.modules.java.hints.jdk.AddUnderscores=Sublinhados podem ser usados para melhorar a legibilidade
FIX_org.netbeans.modules.java.hints.jdk.AddUnderscores=Alterar o literal para: {0}
AddUnderscoresPanel.jLabel1.text=&Bin\u00e1rio:
AddUnderscoresPanel.jLabel3.text=&Hexadecimal:
AddUnderscoresPanel.jLabel2.text=&Decimal:
AddUnderscoresPanel.replaceExisting.text=&Tamb\u00e9m transforma literais com sublinhados

DN_AnnotationProcessors.overridingGetSupportedAnnotations=AbstractProcessor.getSupportedAnnotationTypes() \u00e9 substitu\u00eddo
DESC_AnnotationProcessors.overridingGetSupportedAnnotations=Substituir Processor.getSupportedAnnotationTypes() pode levar a carregamentos de classes desnecess\u00e1rios durante o desenvolvimento e pode impedir otimiza\u00e7\u00f5es importantes. Considere a utiliza\u00e7\u00e3o de @javax.annotation.processing.SupportedAnnotationTypes

DN_Javac_canUseLambda=Converter em Lambda ou Refer\u00eancia de Membro
DESC_Javac_canUseLambda=Converte classes internas an\u00f4nimas em express\u00f5es lambda ou refer\u00eancias de membro
LBL_Javac_canUseLambda_preferMemberReferences=Usar Refer\u00eancias de Membro Quando Poss\u00edvel
TP_Javac_canUseLambda_preferMemberReferences=Preferir a utiliza\u00e7\u00e3o de refer\u00eancias de membro em vez de express\u00f5es lambda quando poss\u00edvel
UseSpecificCatchCustomizer.btnRemoveGeneric.text=Remover
UseSpecificCatchCustomizer.lblGenericList.text=Tipos de Exce\u00e7\u00e3o Gen\u00e9ricos:
UseSpecificCatchCustomizer.btnAddGeneric.text=Adicionar


DN_UnnecessaryBoxing=Demarca\u00e7\u00e3o desnecess\u00e1ria
DESC_UnnecessaryBoxing=Uma demarca\u00e7\u00e3o expl\u00edcita usando, por exemplo, <b>new Integer(x)</b> ou <b>Integer.valueOf(x)</b> n\u00e3o \u00e9 necess\u00e1ria no JDK 5+. Esta dica detecta tais situa\u00e7\u00f5es e sugere a remo\u00e7\u00e3o da chamada de demarca\u00e7\u00e3o.
DN_UnnecessaryUnboxing=Cancelamento de demarca\u00e7\u00e3o desnecess\u00e1rio
DESC_UnnecessaryUnboxing=Um cancelamento de demarca\u00e7\u00e3o expl\u00edcito usando, por exemplo, <b>x.intValue()</b> n\u00e3o \u00e9 necess\u00e1rio no JDK 5+. A dica localiza tais chamadas e sugere a remo\u00e7\u00e3o.


OPTNAME_PreferCastsToBoxing=Preferir tipos de transmiss\u00e3o a demarca\u00e7\u00e3o
OPTDESC_PreferCastsToBoxing=Quando a altera\u00e7\u00e3o expl\u00edcita do tipo de valor \u00e9 necess\u00e1ria, prefira transmiss\u00e3o de tipo (com uma demarca\u00e7\u00e3o impl\u00edcita feita pelo compilador) \u00e0 demarca\u00e7\u00e3o manual.
LBL_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch.KEY_THRESHOLD=Contagem de ramifica\u00e7\u00f5es m\u00ednimas
TP_org.netbeans.modules.java.hints.jdk.ConvertToStringSwitch.KEY_THRESHOLD=A dica s\u00f3 aparecer\u00e1 quando a cadeia if-statement contiver pelo menos esse n\u00famero de ramifica\u00e7\u00f5es
OPT_ConvertIfToSwitch_EmptyDefault=Gerar padr\u00e3o vazio
DESC_ConvertIfToSwitch_EmptyDefault=Se a op\u00e7\u00e3o estiver marcada, a dica gerar\u00e1 um padr\u00e3o vazio, mesmo que nenhum `else'' final esteja presente

