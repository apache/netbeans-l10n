#
# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#
# Contributor(s):
#
# Portions Copyrighted 2010 Sun Microsystems, Inc.
#
DN_org.netbeans.modules.java.hints.perf.ManualArrayCopy=C\u00f3pia manual de array
DESC_org.netbeans.modules.java.hints.perf.ManualArrayCopy=Localiza ocorr\u00eancias de c\u00f3pias manuais de array via loop for
ERR_manual-array-copy-coll=C\u00f3pia manual de array para Cole\u00e7\u00e3o
FIX_manual-array-copy-coll=Substituir por Collection.addAll(Arrays.asList(...))
ERR_manual-array-copy=C\u00f3pia manual de array
FIX_manual-array-copy=Substituir por System.arraycopy

DN_org.netbeans.modules.java.hints.perf.SizeEqualsZero=Uso de .size() == 0
DESC_org.netbeans.modules.java.hints.perf.SizeEqualsZero=Usar .isEmpty() ou !.isEmpty() em vez de .size() == 0 ou .size() != 0 quando poss\u00edvel.
ERR_SizeEqualsZero=O uso de .size() == 0 pode ser substitu\u00eddo por .isEmpty()
ERR_SizeEqualsZeroNeg=O uso de .size() != 0 pode ser substitu\u00eddo por !.isEmpty()
FIX_RedundantToString=Remover .toString()
FIX_RemoveBoxingOfBoxed=Remover demarca\u00e7\u00e3o extra
FIX_ReplaceStringBufferByString=Substituir por String
# {0} - wrapper type simple name
# {1} - parse method name
FIX_UnnecessaryTempFromString1=Substituir por {0}.{1}()
# {0} - wrapper type simple name
FIX_UnnecessaryTempToString=Substituir por {0}.toString()
FIX_UseIsEmpty=Usar .isEmpty() em vez de .size() == 0
FIX_UseIsEmptyNeg=Usar .isEmpty() em vez de .size() != 0
LBL_org.netbeans.modules.java.hints.perf.SizeEqualsZero.CHECK_NOT_EQUALS=Verificar tamb\u00e9m .size() != 0
TEXT_BoxingOfBoxedValue=Demarca\u00e7\u00e3o de valor j\u00e1 demarcado
TEXT_RedundantToString=String.toString() redundante
TEXT_ReplaceStringBufferByString=Substituir StringBuffer/Builder por String
TEXT_UnnecessaryTempFromString=Inst\u00e2ncia tempor\u00e1ria desnecess\u00e1ria ao converter de String
TEXT_UnnecessaryTempToSring=Inst\u00e2ncia tempor\u00e1ria desnecess\u00e1ria ao converter para String
TP_org.netbeans.modules.java.hints.perf.SizeEqualsZero.CHECK_NOT_EQUALS=Esta dica tamb\u00e9m deveria reportar ocorr\u00eancias de ".size() != 0"?

DN_org.netbeans.modules.java.hints.perf.Tiny.stringConstructor=Construtor String
DESC_org.netbeans.modules.java.hints.perf.Tiny.stringConstructor=O uso do construtor java.lang.String \u00e9 geralmente in\u00fatil.
ERR_StringConstructor=Chamada de construtor String
FIX_StringConstructor=Remover chamada do construtor String
LBL_org.netbeans.modules.java.hints.perf.Tiny.SC_IGNORE_SUBSTRING=Ignorar construtores String que cont\u00eam chamadas de String.substring
TP_org.netbeans.modules.java.hints.perf.Tiny.SC_IGNORE_SUBSTRING=Ignorar construtores String que cont\u00eam chamadas de java.lang.String.substring

DN_org.netbeans.modules.java.hints.perf.Tiny.stringEqualsEmpty=String.equals("")
DESC_org.netbeans.modules.java.hints.perf.Tiny.stringEqualsEmpty=O uso de String.equals("") pode ser substitu\u00eddo por String.length() == 0 (no JDK5 e inferior) ou String.isEmpty() (no JDK6 e superior)
ERR_StringEqualsEmpty=String igual a string vazia
FIX_StringEqualsEmpty=Alterar para String.length() == 0
FIX_StringEqualsEmptyNeg=Alterar para String.length() != 0
FIX_StringEqualsEmpty16=Alterar para String.isEmpty()

DN_org.netbeans.modules.java.hints.perf.StringBuffer2Builder=Uso in\u00fatil de StringBuffer
DESC_org.netbeans.modules.java.hints.perf.StringBuffer2Builder=Usar StringBuilder em vez de StringBuffer quando poss\u00edvel.
ERR_StringBuffer2Builder=StringBuffer pode ser substitu\u00eddo por StringBuilder
FIX_StringBuffer2Builder=Substituir por StringBuilder

DN_org.netbeans.modules.java.hints.perf.Tiny.lengthOneStringIndexOf=Tamanho de uma String em String.indexOf
DESC_org.netbeans.modules.java.hints.perf.Tiny.lengthOneStringIndexOf=O tamanho de uma String literal em String.indexOf pode ser substitu\u00eddo por uma literal de caractere
#the string:
ERR_LengthOneStringIndexOf=Tamanho de uma string {0} em String.indexOf
FIX_LengthOneStringIndexOf=Substituir por uma literal de caractere

DN_org.netbeans.modules.java.hints.perf.Tiny.getClassInsteadOfDotClass=.getClass() substitu\u00edvel por .class
DESC_org.netbeans.modules.java.hints.perf.Tiny.getClassInsteadOfDotClass=Localiza inst\u00e2ncias de uma classe diretamente seguidas pela chamada de .getClass() no objeto rec\u00e9m-constru\u00eddo
ERR_GetClassInsteadOfDotClass=A chamada de .getClass() pode ser substitu\u00edda por .class
FIX_GetClassInsteadOfDotClass=Substituir chamada de .getClass() por .class

DN_org.netbeans.modules.java.hints.perf.Tiny.constantIntern=String.intern() chamada na constante
DESC_org.netbeans.modules.java.hints.perf.Tiny.constantIntern=As chamadas de String.intern() em constantes em tempo de compila\u00e7\u00e3o s\u00e3o desnecess\u00e1rias
ERR_ConstantIntern=A chamada de String.intern() de uma constante em tempo de compila\u00e7\u00e3o \u00e9 desnecess\u00e1ria
FIX_ConstantIntern=Remover chamada de String.intern()

DN_org.netbeans.modules.java.hints.perf.NoBooleanConstructor=Criando novo Booliano
DESC_org.netbeans.modules.java.hints.perf.NoBooleanConstructor=A cria\u00e7\u00e3o de novo Booliano \u00e9 ineficiente e normalmente in\u00fatil.
ERR_NoBooleanConstructor=A cria\u00e7\u00e3o de novo Booliano \u00e9 ineficiente
FIX_NoBooleanConstructorBoolean=Remover chamada do construtor Booliano
FIX_NoBooleanConstructorString=Remover chamada do construtor Booliano

DN_org.netbeans.modules.java.hints.perf.InitialCapacity.collections=Cole\u00e7\u00f5es sem capacidade inicial
DESC_org.netbeans.modules.java.hints.perf.InitialCapacity.collections=Procura inst\u00e2ncias de cole\u00e7\u00f5es sem capacidade inicial. S\u00e3o testadas somente as cole\u00e7\u00f5es com array.
ERR_InitialCapacity_collections=Instanciando cole\u00e7\u00e3o sem capacidade inicial especificada

DN_org.netbeans.modules.java.hints.perf.InitialCapacity.stringBuilder=StringBuilder sem capacidade inicial
DESC_org.netbeans.modules.java.hints.perf.InitialCapacity.stringBuilder=Procura inst\u00e2ncias de StringBuilder ou StringBuffer sem capacidade inicial.
ERR_InitialCapacity_stringBuilder=Instanciando StringBuilder ou StringBuffer sem capacidade especificada

DN_org.netbeans.modules.java.hints.perf.Tiny.enumSet=Set substitu\u00edvel por EnumSet
DESC_org.netbeans.modules.java.hints.perf.Tiny.enumSet=Localiza inst\u00e2ncias de Set que podem ser substitu\u00eddas por EnumSet
DN_org.netbeans.modules.java.hints.perf.Tiny.enumMap=Map substitu\u00edvel por EnumMap
DESC_org.netbeans.modules.java.hints.perf.Tiny.enumMap=Localiza inst\u00e2ncias de Map que podem ser substitu\u00eddas por EnumMap
ERR_Tiny_enumSet=Set pode ser substitu\u00eddo por java.util.EnumSet
ERR_Tiny_enumMap=Map pode ser substitu\u00eddo por java.util.EnumMap
FIX_Tiny_enumMap=Substituir Map por java.util.EnumMap

DN_org.netbeans.modules.java.hints.perf.Tiny.collectionsToArray=Array de elemento zero especificado para Collection.toArray
DESC_org.netbeans.modules.java.hints.perf.Tiny.collectionsToArray=A especifica\u00e7\u00e3o de array de elemento zero para Collection.toArray pode afetar o desempenho
ERR_Tiny_collectionsToArray=Array de elemento zero especificado para Collection.toArray
FIX_Tiny_collectionsToArray=Especificar array de tamanho igual ao tamanho da cole\u00e7\u00e3o

DN_ReplaceBufferByString=Substituir StringBuffer/StringBuilder por String
DESC_ReplaceBufferByString=A dica localizar\u00e1 e se oferecer\u00e1 para substituir inst\u00e2ncias de <b>StringBuffer</b> ou <b>StringBuilder</b> acessadas por m\u00e9todos <b>String</b> comuns e que nunca s\u00e3o especificadas para fora do m\u00e9todo ou s\u00e3o designadas a outra vari\u00e1vel. Manter esses dados em StringBuffer/Builder n\u00e3o faz sentido, e String seria mais eficiente.

DN_BoxingOfBoxedValue=Demarca\u00e7\u00e3o de valor j\u00e1 demarcado
DESC_BoxingOfBoxedValue=Reporta a demarca\u00e7\u00e3o de um valor j\u00e1 demarcado. O construtor ou <i>valueOf</i> utiliza um par\u00e2metro primitivo; portanto, um valor demarcado tem a demarca\u00e7\u00e3o cancelada primeiro e \u00e9 demarcado novamente, o que pode criar uma inst\u00e2ncia extra do encapsulador e afetar o desempenho.

DN_RedundantToString=String.toString() redundante
DESC_RedundantToString=Reporta chamadas de String.toString() completamente in\u00fateis; a String pode ser usada diretamente.

DN_UnnecessaryTempFromString=Inst\u00e2ncia tempor\u00e1ria desnecess\u00e1ria durante a convers\u00e3o de String
DESC_UnnecessaryTempFromString=Localiza ocorr\u00eancias de <i>new Integer("111").intValue()</i> e constru\u00e7\u00f5es semelhantes nas quais a inst\u00e2ncia demarcada \u00e9 criada apenas para fazer parsing do par\u00e2metro String. Os tipos de demarca\u00e7\u00e3o t\u00eam m\u00e9todos <i>parseXXX</i> que executam a convers\u00e3o sem criar a inst\u00e2ncia tempor\u00e1ria.

DN_UnnecessaryTempToString=Inst\u00e2ncia tempor\u00e1ria desnecess\u00e1ria durante a convers\u00e3o para String
DESC_UnnecessaryTempToString=Localiza lugares como <i>new Integer(11).toString()</i>, nos quais uma inst\u00e2ncia demarcada tempor\u00e1ria \u00e9 criada apenas para produzir uma representa\u00e7\u00e3o de String de uma primitiva. Os tipos de demarca\u00e7\u00e3o t\u00eam o m\u00e9todo est\u00e1tico <i>toString()</i> apenas para esse objetivo.


