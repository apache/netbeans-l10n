# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
#
# Contributor(s):
#
# Portions Copyrighted 2010 Sun Microsystems, Inc.

DESC_addExplicitLambdaParameters=Converte lambdas para usar tipos de par\u00e2metro expl\u00edcitos
DESC_expression2Return=Converte corpos lambda para usar blocos, em vez de express\u00f5es
DESC_FlipOperands=Girar operandos do operador bin\u00e1rio
DESC_ImplementMethods=Implementar M\u00e9todos Abstratos
DESC_InvertIf=Inverter\u00e1 uma instru\u00e7\u00e3o if, negar\u00e1 a condi\u00e7\u00e3o e alternar\u00e1 as instru\u00e7\u00f5es das se\u00e7\u00f5es then e else.
DESC_InvertifShowWhenElseMissing=Mostra a sugest\u00e3o mesmo que a parte else da instru\u00e7\u00e3o esteja faltando. A dica pode ser usada para auxiliar na recria\u00e7\u00e3o do c\u00f3digo, nesse caso.
DESC_JoinElseIf=Converte casos como <code>if - else { if }</code> info <code>if - else if</code>
DESC_lambda2Class=Converte express\u00f5es lambda em classes internas an\u00f4nimas
DESC_lambda2MemberReference=Converte express\u00f5es lambda em refer\u00eancias de membro
DESC_memberReference2Lambda=Converte refer\u00eancias de membro em express\u00f5es lambda
DESC_org.netbeans.modules.java.hints.suggestions.Move.moveInitialization=Move uma express\u00e3o de inicializa\u00e7\u00e3o de campos para os construtores.
DESC_org.netbeans.modules.java.hints.suggestions.Tiny.extractIf=Divide uma instru\u00e7\u00e3o if com uma condi\u00e7\u00e3o complexa, como instru\u00e7\u00e3o <code>if (cond1 || cond2);</code>, em duas instru\u00e7\u00f5es if, como instru\u00e7\u00e3o <code>if (cond1); instru\u00e7\u00e3o else if (cond2);</code>.
DESC_org.netbeans.modules.java.hints.suggestions.Tiny.mergeIfs=Combina duas instru\u00e7\u00f5es if aninhadas, como instru\u00e7\u00e3o <code>if (cond1) if (cond2);</code>, em uma instru\u00e7\u00e3o if, como instru\u00e7\u00e3o <code>if (cond1 && cond2);</code>.
DESC_splitIfCondition=Divide if cuja condi\u00e7\u00e3o \u00e9 || em dois ifs
DESC_ToOrIf=Converte casos como instru\u00e7\u00e3o <code>if (cond1); instru\u00e7\u00e3o else if (cond2);</code> em instru\u00e7\u00e3o <code>if (cond1 || cond2);</code>
DN_addExplicitLambdaParameters=Converter Lambda para Usar Tipos de Par\u00e2metros Expl\u00edcitos
DN_expression2Return=Converter Corpo Lambda para Usar um Bloco
DN_FlipOperands=Girar operandos do operador bin\u00e1rio
DN_ImplementMethods=Implementar M\u00e9todos Abstratos
DN_InvertIf=Inverter Se
DN_JoinElseIf=Junta ifs consecutivos em if-else
DN_lambda2Class=Converter Express\u00e3o Lambda em Classe Interna An\u00f4nima
DN_lambda2MemberReference=Converter Express\u00e3o Lambda em Refer\u00eancias de Membro
DN_memberReference2Lambda=Converter Refer\u00eancia de Membro em Express\u00e3o Lambda
DN_org.netbeans.modules.java.hints.suggestions.Move.moveInitialization=Mover inicializa\u00e7\u00e3o para construtor
DN_org.netbeans.modules.java.hints.suggestions.Tiny.extractIf=Dividir a condi\u00e7\u00e3o da instru\u00e7\u00e3o if
DN_org.netbeans.modules.java.hints.suggestions.Tiny.flipEquals=Inverter .equals
DESC_org.netbeans.modules.java.hints.suggestions.Tiny.flipEquals=Permite inverter o par\u00e2metro .equals e chamar local
DN_org.netbeans.modules.java.hints.suggestions.Tiny.mergeIfs=Combinar instru\u00e7\u00f5es if aninhadas
DN_splitIfCondition=Dividir condi\u00e7\u00e3o if
DN_ToOrIf=Dividir condi\u00e7\u00f5es if usando ||
DN_TooStrongCast=Tipo de transmiss\u00e3o muito forte

ERR_AlreadyExtends=O tipo proposto j\u00e1 tem subclasses da classe original
ERR_AlreadyImplements=O tipo proposto j\u00e1 implementa a interface original
# {0} - constant name
ERR_BadConstantName=O nome da constante n\u00e3o segue as conven\u00e7\u00f5es de nome: {0}
# {0} - maximum constant name length
ERR_ConstantNameMaxLength=O nome da constante deve ter menos de {0} caracteres
# {0} - minimum constant name length
ERR_ConstantNameMinLength=O nome da constante deve ter pelo menos {0} caracteres

ERR_ExtendsOther=O tipo proposto j\u00e1 tem subclasses em uma classe diferente
ERR_flipEquals=Inverter .equals

# {0} - the FQN of the type whose methods will be implemented
ERR_ImplementMethods=Implementar m\u00e9todos abstratos n\u00e3o implementados de {0}
ERR_InvertIf=Inverter Se

ERR_lambda2Class=\u00c9 poss\u00edvel usar classe an\u00f4nima
ERR_lambda2MemberReference=\u00c9 poss\u00edvel usar refer\u00eancia de membro



ERR_PackageNameNotValid=O nome do pacote n\u00e3o \u00e9 v\u00e1lido
ERR_SameClass=O tipo proposto \u00e9 igual ao tipo que ter\u00e1 subtipo


ERR_TypeNameNotValid=O nome do tipo n\u00e3o \u00e9 v\u00e1lido
FIX_addExplicitLambdaParameters=Usar tipos de par\u00e2metro expl\u00edcitos
# {0} - the new casted-to type; simple name
FIX_ChangeCastTo=Transmitir para {0}
FIX_ConvertIfsToSwitch=Converter instru\u00e7\u00e3o ifs em switch
FIX_expression2Return=Usar bloco como o corpo de lambda
FIX_flipEquals=Inverter .equals
DN_org.netbeans.modules.java.hints.suggestions.Tiny.convertToDifferentBase=Converter constante inteira em outra base
DESC_org.netbeans.modules.java.hints.suggestions.Tiny.convertToDifferentBase=Converter constante inteira em outra base
ERR_convertToDifferentBase=Converter a constante inteira em outro radical
FIX_convertToDifferentBase_16=Converter em constante hexadecimal
FIX_convertToDifferentBase_10=Converter em constante decimal
FIX_convertToDifferentBase_8=Converter em constante octal
FIX_convertToDifferentBase_2=Converter em constante bin\u00e1ria

DN_org.netbeans.modules.java.hints.suggestions.ExpandEnhancedForLoop=Expans\u00e3o Aprimorada para o Loop
DESC_org.netbeans.modules.java.hints.suggestions.ExpandEnhancedForLoop=Expans\u00e3o Aprimorada para o Loop
ERR_ExpandEhancedForLoop=Converter para (Iterador...) {}
FIX_ExpandEhancedForLoop=Converter para (Iterador...) {}

DN_org.netbeans.modules.java.hints.suggestions.Tiny.splitDeclaration=Dividir Declara\u00e7\u00e3o
DESC_org.netbeans.modules.java.hints.suggestions.Tiny.splitDeclaration=Divide a declara\u00e7\u00e3o com o inicializador em uma declara\u00e7\u00e3o e uma designa\u00e7\u00e3o
# {0} - one of the following Java operands: ==, !=, *, +, &, |, ^, &&, ||
FIX_FlipOperands1=Girar operandos de ''{0}''
# {0} - one of the following Java operands (source): <, >, >=, <=
# {1} - one of the following Java operands (target): >=, <=, <, >
FIX_FlipOperands2=Girar ''{0}'' para ''{1}''
# {0} - one of the following Java operands: /, %, -, <<, >>, >>>
FIX_FlipOperands3=Girar operandos de ''{0}'' (pode alterar as sem\u00e2nticas)
# {0} - the FQN of the type whose methods will be implemented
FIX_ImplementSuperTypeMethods=Implementar m\u00e9todos abstratos n\u00e3o implementados de {0}
FIX_InvertIf=Inverter Se
FIX_JoinElseIf=Juntar if aninhado para o if de fechamento
FIX_lambda2Class=Usar classe interna an\u00f4nima
FIX_lambda2MemberReference=Usar refer\u00eancia de membro
FIX_memberReference2Lambda=Usar express\u00e3o lambda
FIX_moveInitialization=Mover inicializador para construtor(es)
FIX_org.netbeans.modules.java.hints.suggestions.Tiny.extractIf=Dividir if em dois ifs
FIX_org.netbeans.modules.java.hints.suggestions.Tiny.mergeIfs=Combinar ifs anhinhados
# {0} - the type
FIX_RemoveUnneededCast=Remover transmiss\u00e3o redundante para {0}
FIX_splitDeclaration=Dividir em declara\u00e7\u00e3o e designa\u00e7\u00e3o
ERR_splitDeclaration=Pode dividir a declara\u00e7\u00e3o em uma declara\u00e7\u00e3o e em uma designa\u00e7\u00e3o

DN_org.netbeans.modules.java.hints.suggestions.CreateSubclass=Criar Subclasse
DESC_org.netbeans.modules.java.hints.suggestions.CreateSubclass=Criar Subclasse
ERR_CreateSubclass=Criar Subclasse
FIX_CreateSubclass=Criar Subclasse
ERR_ImplementAbstractClass=Implementar Classe Abstrata
FIX_ImplementAbstractClass=Implementar Classe Abstrata
ERR_ImplementInterface=Implementar Interface
FIX_ImplementInterface=Implementar Interface
FIX_splitIfCondition=Dividir if em dois ifs
FIX_ToOrIf=Juntar ifs usando ||
# template for generated label names, must form a valid Java identifiers
# {0} - unique integer
LABEL_OuterGeneratedLabel=OUTER_{0}
# initial label for breaking out of the innermost loop
LABEL_OuterGeneratedLabelInitial=OUTER
LBL_ClassName=Nome da Classe:
LBL_InvertIfShowWhenElseMissing=Mostrar quando a ramifica\u00e7\u00e3o else est\u00e1 faltando
LBL_PackageName=Nome do Pacote:
ERR_IncompatibleSupertype=A classe selecionada {0} tem um supertipo incompat\u00edvel

DN_org.netbeans.modules.java.hints.suggestions.Tiny.fillSwitch=Preencher Cases Ausentes para Altern\u00e2ncia
DESC_org.netbeans.modules.java.hints.suggestions.Tiny.fillSwitch=Adiciona cases \u00e0 instru\u00e7\u00e3o de altern\u00e2ncia. O modelo de cl\u00e1usula default deve ser uma instru\u00e7\u00e3o Java; ocorr\u00eancias de $expression ser\u00e3o substitu\u00eddas pela express\u00e3o em que a instru\u00e7\u00e3o de altern\u00e2ncia atua.
ERR_Tiny.fillSwitchDefault=a classe default est\u00e1 ausente
ERR_Tiny.fillSwitchCasesAndDefault=h\u00e1 cl\u00e1usulas case ausentes para algumas constantes enum, e esta \u00e9 a classe default
ERR_Tiny.fillSwitchCases=h\u00e1 cl\u00e1usulas case ausentes para algumas constantes enum
FIX_Tiny.fillSwitchDefault=Adicionar cl\u00e1usula default ausente
FIX_Tiny.fillSwitchCasesAndDefault=Adicionar cl\u00e1usulas case ausentes e a cl\u00e1usula default
FIX_Tiny.fillSwitchCases=Adicionar cl\u00e1usulas case ausentes

FillSwitchCustomizer.generateDefault.text=Gerar cl\u00e1usula default se ausente
FillSwitchCustomizer.jLabel1.text=Modelo:
FillSwitchCustomizer.jLabel1.AccessibleContext.accessibleDescription=Modelo de cl\u00e1usula default


DESC_TooStrongCast=Reporta tipos de transmiss\u00f5es que s\u00e3o muito restritas e a transmiss\u00e3o para um tipo mais geral seria suficiente para a express\u00e3o real. \u00c0s vezes, uma inst\u00e2ncia \u00e9 transmitida para um subtipo espec\u00edfico, mas os m\u00e9todos chamados ou campos usados da inst\u00e2ncia transmitida, geralmente s\u00e3o definidos por algum supertipo. Neste caso, transmitir para um tipo espec\u00edfico introduz um acoplamento desnecess\u00e1rio para o c\u00f3digo e limita sua extensibilidade. <p/>Esta inspe\u00e7\u00e3o ir\u00e1 sugerir usar o tipo mais geral que satisfa\u00e7a as necessidades da express\u00e3o. 

DN_ConvertIfToSwitch=Substituir cadeia de ifs por switch
DESC_ConvertIfToSwitch=\u00c0s vezes, instru\u00e7\u00f5es <i>if</i> s\u00e3o encadeadas e formam uma s\u00e9rie de compara\u00e7\u00f5es == com constantes. Essa situa\u00e7\u00e3o ser\u00e1 melhor lida se gravada com o uso da instru\u00e7\u00e3o <i>switch</i><. Essa dica sugere a altera\u00e7\u00e3o se o n\u00famero de <i>if</i>s exceder um limite.

OPT_ConvertIfToSwitch_Threshold=Contagem de ramifica\u00e7\u00f5es m\u00ednimas
DESC_ConvertIfToSwitch_Threshold=A dica s\u00f3 aparecer\u00e1 quando a cadeia de instru\u00e7\u00e3o if-else contiver pelo menos esse n\u00famero de ramifica\u00e7\u00f5es

OPT_ConvertIfToSwitch_EmptyDefault=Gerar padr\u00e3o vazio
DESC_ConvertIfToSwitch_EmptyDefault=Se a op\u00e7\u00e3o estiver marcada, a dica gerar\u00e1 um padr\u00e3o vazio, mesmo que nenhum `else'' final esteja presente

HINT_ConvertIfToSwitch=Substituir cadeia de ifs por switch

ConstantNameOptions.jLabel1.text=Padr\u00e3o de correspond\u00eancia:

ConstantNameOptions.immutableCheck.text=Verificar somente tipos imut\u00e1veis
ConstantNameOptions.jLabel3.text=Tamanho m\u00ednimo:
ConstantNameOptions.jLabel4.text=m\u00e1ximo:

DN_ConstantNameHint=Conven\u00e7\u00f5es de nomes de constantes
DESC_ConstantNameHint=Verifica se os nomes das constantes seguem as conven\u00e7\u00f5es estabelecidas. Uma constante \u00e9 o campo <b>est\u00e1tico</b> e <b>final</b>. A conven\u00e7\u00e3o de nomes \u00e9 definida usando uma express\u00e3o regular com tamanho m\u00ednimo e m\u00e1ximo do identificador. Se um tamanho for definido como 0, a restri\u00e7\u00e3o n\u00e3o ser\u00e1 aplicada. Defina a express\u00e3o de correspond\u00eancia como string vazia para desativar correspond\u00eancias de express\u00e3o regular. <p/>Se <i>Verificar somente tipos imut\u00e1veis</i> estiver marcado, somente primitivas e valores imut\u00e1veis ser\u00e3o verificados. Os valores imut\u00e1veis incluem <b>nulos</b>, arrays de tamanho zero (de qualquer tipo), valores de enumera\u00e7\u00e3o e determinadas classes JDK predefinidas, como <b>java.awt.Color</b> e semelhantes.<p/>Voc\u00ea pode aumentar a lista de tipos tratados como valores imut\u00e1veis com suas pr\u00f3prias classes.
# {0} - string literal value
TEXT_ChainedIfContainsSameValues=O valor de constante ''{0}'' usado na compara\u00e7\u00e3o aparece antes na instru\u00e7\u00e3o if-else-if encadeada. Essa condi\u00e7\u00e3o nunca \u00e9 avaliada como verdadeira
# {0} - the current type simple name
# {1} - list of types that should be used 
TEXT_TooStrongCast=A transmiss\u00e3o do tipo {0} \u00e9 muito forte. {1} deve ser usada
# {0} - the type name

# {0} - the preceding portion of list
# {1} - the type name
TEXT_TooStrongCastListLast={0} ou {1}
# {0} - the preceding portion of list
# {1} - the type name

# {0} - the type simple name
TEXT_UnnecessaryCast=Transmiss\u00e3o desnecess\u00e1ria para {0}

