Sig#DependenciesChildren
MSG_REMOVING_DEPENDENCY=Eliminando a dependencia {0}

DependencyPanel.jLabel1.text=Tipo da bib&lioteca
DependencyPanel.jTextField1.text=
DependencyPanel.jLabel2.text=Estratexia &de despregue
DependencyPanel.jLabel3.text=&Cami\u00f1o
DependencyPanel.jTextField2.text=
DependencyPanel.jLabel4.text=Ficheiro &Exp
DependencyPanel.jTextField3.text=

#Depend
ACTION_REMOVE_DEPENDENCY=Eliminar
LIBRARIES_NODE_NAME=Bibliotecas
DependenciesEditorPanel.libsLabel.text=&Bibliotecas
DependenciesEditorPanel.addButton.text=Eng&adir
DependenciesEditorPanel.remButton.text=Elimina&r
DependenciesEditorPanel.moveUpButton.text=Mo&ver cara a arriba
DependenciesEditorPanel.moveDownButton.text=Mover cara a a&baixo
DependenciesEditorPanel.editButton.text=&Editar
DependenciesEditorPanel.depStrategyField.text=
DependenciesEditorPanel.pathField.text=
DependenciesEditorPanel.pathLabel.text=&Cami\u00f1o
DependenciesEditorPanel.depStrategyLabel.text=E&stratexia de despregue
TTL_EDIT_LIBRARY=Editar detalles da biblioteca

#DependenciesPanel
MSG_LOADING=Cargando e resolvendo as bibliotecas...
MSG_LOAD_FAILED=Non foi pos\u00edbel resolver as bibliotecas - probabelmente 
ChooseDependencyKindPanelVisual.jarFileDescription.text=<html>Depende dun ficheiro JAR que ten no disco.  Use this option if you have either <ul><li>A JAR file that should not be deployed, but represents some API that exists on the target card, or</li><li>A JAR file which contains classes that should be included into your project's JAR file</li></ul>
ChooseDependencyKindPanelVisual.projectDescription.text=<html>Depende doutro proxecto que ten no disco.  If the project is a Java Card project, it will be be deployed as needed before this project is deployed.
ChooseDependencyKindPanelVisual.jarfileButton.text=Ficheiro JAR
ChooseDependencyKindPanelVisual.projectButton.text=Proxecto

WIZARD_CHOOSE_LIBRARY_KIND=Escoller tipo
ChooseOriginPanelVisual.originField.text=
ChooseOriginPanelVisual.originLbl.text=Orixe
ChooseOriginPanelVisual.browseOriginButton.text=E&xaminar...
LBL_FILE=Ficheiro
LBL_PROJECT=Proxecto
FILE_FILTER_EXP_FILES=Cartafol ou ZIP/JAR
TTL_BROWSE_SOURCES=Atopar cartafol fonte, Zip ou ficheiro JAR
FILE_FILTER_SOURCES=Cartafoles, ficheiros ZIP ou JAR
FILE_FILTER_SIGNATURE=Ficheiros de sinatura (.sig, .signature)
FILE_FILTER_JAR_FILES=Ficheiros Java Archive
TTL_BROWSE_SIGFILE=Atopar ficheiro de sinatura
ERR_EXP_FILE_MISSING=Export file not set or not a file
ERR_EXPECTING_DIR=''{0}'' non \u00e9 un cartafol
ERR_EXPECTING_FILE=''{0}'' non \u00e9 un ficheiro
ERR_NON_EXISTENT_FILE=Non se estabeleceu a localizaci\u00f3n do ficheiro do proxecto/JAR
ERR_ORIGIN_NOT_SET=Non se estabeleceu a localizaci\u00f3n do ficheiro do proxecto/JAR
ERR_SOURCE_FILE_DOES_NOT_EXIST=Non existe a localizaci\u00f3n das fontes
ERR_MISSING_MANIFEST=O ficheiro JAR non ten META-INF/MANFEST.MF
#WizardDepKind
JAR_WITH_EXP_FILE=Jar With Exp File ({0})
PROJECT=Proxecto
JAR_FILE=Ficheiro JAR ({0})
CLSLIB_JAR=JAR da biblioteca cl\u00e1sica ({0})
EXTLIB_JAR=JAR da biblioteca de extensi\u00f3n ({0})
JAVA_PROJECT=Proxecto Java

#ChooseOriginWizardPanel
ERR_NON_EXISTENT_JAR_FILE=Non existe {0}
ERR_NOT_FILE=Non \u00e9 un ficheiro: {0}
ERR_NOT_FOLDER=Non \u00e9 un cartafol: {0}
ERR_EXP_FILE_NOT_SET=Export file not set
ERR_EXP_FILE_NON_EXISTENT=Non existe {0}
ERR_PROJECT_CANNOT_DEPEND_ON_SELF=Non \u00e9 pos\u00edbel engadir un proxecto a si mesmo como unha biblioteca
ERR_NOT_PROJECT_ROOT={0} non \u00e9 un cartafol ra\u00edz do proxecto
ERR_NOT_PROJECT={0} non \u00e9 un proxecto
ERR_NOT_LIBRARY_PROJECT={0} non \u00e9 un proxecto de biblioteca
ERR_WRONG_MANIFEST_TAG=Jar manifest should list Application-Type as {0}, not ''{1}''
ERR_NOT_JAVA_PROJECT=Not a Java project - nothing to include in classpath: {0}
ERR_CLASSIC_TO_EXT_DEPENDENCY=Classic projects may not depend on Java Card 3 projects or vice-versa

#ChooseDeploymentStrategyPanelVisual
WIZARD_STEP_CHOOSE_DEPLOYMENT_STRATEGY=Seleccionar estratexia de despregue
WARNING_DEPLOYMENT_STRATEGY=Important: Build script support for deployment strategies is not yet implemented. Currently your dependencies will only be added to the compile-time classpath.  This means all dependencies currently must be manually deployed.\n\nSet up your deployment strategy as meets your long-term needs;  build-script support for complex dependencies will be available in an upcoming build.

#DependencyWizardIterator
TTL_ADD_LIBRARY=Engadir biblioteca

#AddDependencyAction
ACTION_ADD_DEPENDENCY=Engadir biblioteca...
MSG_LOADING_DEPS=Cargando dependencias...
WIZARD_STEP_CHOOSE_ORIGIN=Escoller ficheiros

#AddDependencyWizardIterator
LOCATION_IN_WIZARD={0} de {1}

#ChooseDependencyKindWizardPanel
ERR_CHOOSE_DEP_KIND=Escoller o tipo da biblioteca a engadir

#ChooseDependencyKindWizardPanel
ERR_CHOOSE_DEPLOYMENT=Escoller como despregar a biblioteca
ChooseOriginPanelVisual.sourcesLabel.text=Fonte&s
ChooseOriginPanelVisual.sourcesField.text=
ChooseOriginPanelVisual.browseSourcesButton.text=Examina&r
ChooseSigOrExpFilePanelVisual.fileLabel.text=Ficheiro Exp (opcional)
ChooseSigOrExpFilePanelVisual.fileField.text=
ChooseSigOrExpFilePanelVisual.browseFileButton.text=E&xaminar...

#IntermediatePanelKind
SIG_FILE=Ficheiro de sinatura
EXP_FILE=Exportar cami\u00f1o (opcional)
SIG_FILE.desc=Requ\u00edrese un ficheiro de sinatura para despregar un applet cl\u00e1sico ou proxectos de biblioteca
EXP_FILE.desc=Java Card libraries which are intended to be deployed to a device require a directory or zip file of .exp (export) files, 1 per package file in the same package structure as the classes.  If this library comes with a set of export files, set the path to the root directory here. \n\nIf no export path is set, the only deployment options will be to assume this JAR's classes are already on the card, or to bundle this JAR's classes into your project.
#ChooseSigOrExpFilePanelVisual
ERR_FILE_DOES_NOT_EXIST={0} non existe
ERR_SIG_FILE_NOT_SET=Non se estabeleceu o ficheiro de sinatura
LBL_EXP_FILE=Exportar cami\u00f1o (opcional)
LBL_SIG_FILE=Ficheiro de sinatura
NAME_EXP_FILE_PANEL=Escoller ficheiro de exportaci\u00f3n 
NAME_SIG_FILE_PANEL=Localizar ficheiro de sinatura
EditOneDependencyPanel.deploymentStrategyLabel.text=Estratexia &de despregue
EditOneDependencyPanel.pathLabel.text=&Cami\u00f1o
EditOneDependencyPanel.pathField.text=
MSG_BAD_JAR=Non foi pos\u00edbel ler o JAR {0}
MSG_NOT_PROJECT=Non \u00e9 un proxecto: {0}
MSG_NOT_PROJECT_ROOT=Non \u00e9 un cartafol ra\u00edz de proxecto: {0}
MSG_WRONG_JAR_TYPE=Non \u00e9 pos\u00edbel usar un JAR dun aplicativo/applet como unha biblioteca ({0})
MSG_WRONG_PROJECT_TYPE=Non \u00e9 pos\u00edbel usar un proxecto dun aplicativo/applet como unha biblioteca ({0})
MSG_CLASSIC_LIB_REQUIRES_EXP=Exportar os ficheiros requiridos para usar unha biblioteca cl\u00e1sica
MSG_EXT_PROJECT_REQUIRES_EXT_DEP=Java Card 3 projects cannot call Classic Library JARs
MSG_CLASSIC_PROJECT_REQUIRES_CLASSIC_DEP=Java Card Classic projects cannot call Java Card 3 JARs
MSG_DEPEND_ON_SELF=Non \u00e9 pos\u00edbel que un proxecto dependa de si mesmo
MSG_PROJECT_MUST_BE_FOLDER=O proxecto debe ser un cartafol: {0}
ERR_NO_BUILD_SCRIPT=Non \u00e9 pos\u00edbel atopar un script de construci\u00f3n Ant para o proxecto en {0}
LBL_BROWSE=E&xaminar
ERR_SIG_FILE_REQUIRED=Requ\u00edrese un ficheiro de sinatura para despregar na tarxeta
ERR_SIG_FILE_DOES_NOT_EXIST=Non existe o ficheiro
ERR_SIG_FILE_IS_DIR=Non \u00e9 pos\u00edbel que o ficheiro de sinatura sexa un cartafol

