# Package specific ResourceBundle properties file

SOAPBindingValidator.Transport_URI_required=Es necessita la URI de transport a l'element <soap:binding>
SOAPBindingValidator.Unsupported_transport=The <soap:binding> element only supports a transport URI of http://schemas.xmlsoap.org/soap/http.  No other transport is currently supported.
SOAPBindingValidator.Unsupported_style_attribute=The <soap:binding> element supports a style attribute with a value of either "rpc" or "document".
SOAPBindingValidator.Only_one_binding_allowed=Only one <soap:binding> element is allowed per binding.
SOAPOperationValidator.Unsupported_style_attribute=The <soap:operation> element supports a style attribute with a value of either "rpc" or "document".
SOAPBodyValidator.R2717_Literal_Binding=WS-I R2717: An rpc-literal binding MUST have the namespace attribute specified, the value of which MUST be an absolute URI, on contained soapbind:body elements.

SOAPBodyValidator.Unsupported_use_attribute=The <soap:body> element supports a use attribute with a value of either "literal" or "encoded".
SOAPBodyValidator.No_abstract_message=The <soap:body> element is defined for a message that does not exist.
SOAPBodyValidator.Only_one_body_allowed=Only one <soap:body> element is allowed per binding message.
SOAPBodyValidator.Atleast_one_body_Required=At least one <soap:body> element is required per input/ouput message in a soap operation.
SOAPBodyValidator.Part_already_in_use_by_elem=Part ''{0}'' of message {1} is already in use by the {2} element.

SOAPFaultValidator.Unsupported_use_attribute=The <soap:fault> element supports a use attribute with a value of either "literal" or "encoded".
SOAPFaultValidator.Missing_name=The <soap:fault> element requires the name attribute
SOAPFaultValidator.No_soap_fault_defined=Missing <soap:fault> element for the binding fault.
SOAPFaultValidator.Only_one_fault_allowed=Only one <soap:fault> element is allowed per binding fault.
SOAPFaultValidator.Fault_name_not_match=The value of the name attribute on <soap:fault> element MUST match the value of the name attribute on its parent <wsdl:fault> element. 

SOAPHeaderValidator.Missing_message=The <soap:header> element requires the message attribute
SOAPHeaderValidator.Missing_part=The <soap:header> element requires the part attribute
SOAPHeaderValidator.Missing_use=The <soap:header> element requires the use attribute
SOAPHeaderValidator.Unsupported_header_use_attribute=The <soap:header> element supports a use attribute with a value of either "literal" or "encoded".
SOAPHeaderValidator.Part_already_in_use_by_elem=Part ''{0}'' of message {1} is already in use by the {2} element.

SOAPHeaderFaultValidator.Missing_header_fault_message=The <soap:headerfault> element requires the message attribute
SOAPHeaderFaultValidator.Missing_header_fault_part=The <soap:headerfault> element requires the part attribute
SOAPHeaderFaultValidator.Missing_header_fault_use=The <soap:headerfault> element requires the use attribute
SOAPHeaderFaultValidator.Unsupported_header_fault_use_attribute=The <soap:headerfault> element supports a use attribute with a value of either "literal" or "encoded".

SOAPAddressValidator.Missing_location=The <soap:address> element requires the location attribute
SOAPAddressValidator.Unsupported_location_attribute=The <soap:address> element must have a location attribute that is a valid URL.
SOAPAddressValidator.Missing_SoapAddress=A port specifying soap binding needs to specify a soap address.
SOAPAddressValidator.Only_one_SoapAddress_allowed=Only one <soap:address> element is allowed per port.
SOAPAddressValidator.Unsupported_Token_Format=The <soap:address> element can contain tokens in the following formats: 1)${URL} 2)http(s)://${host}:${Http(s)DefaultPort}/${context}. Either the whole URL is defined as a token or tokens can be optionally defined for host, port(only ${HttpDefaultPort} or ${HttpsDefaultPort} is allowed), and service context.

