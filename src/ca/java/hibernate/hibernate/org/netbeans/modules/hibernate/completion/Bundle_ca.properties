# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# 
# Contributor(s):
# 
# Portions Copyrighted 2008 Sun Microsystems, Inc.

#Generator classes
INCREMENT_GENERATOR_DESC=Generates identifiers of type <code>long</code>, <code>short</code> or <code>int</code> that are unique only when no other process is inserting data into the same table. No utilitzar en un cl\u00faster.
IDENTITY_GENERATOR_DESC=Supports identify columns in DB2, MySQL, MS SQL Server, Sybase and HypersonicSQL. El valor de l'identificador retornat \u00e9s del tipus <code>long</code>, <code>short</code> o <code>int</code>.
SEQUENCE_GENERATOR_DESC=Uses a sequence in DB2, PostgreSQL, Oracle, SAP DB, McKoi or a generator in Interbase. El valor de l'identificador retornat \u00e9s del tipus <code>long</code>, <code>short</code> o <code>int</code>.
HILO_GENERATOR_DESC=Uses a hi/lo algorithm to efficiently generate identifiers of type <code>long</code>, <code>short</code> or <code>int</code>, given a table and column (by default <code>hibernate_unique_key</code> and <code>next_hi</code> respectively) as a source of hi values. The hi/lo algorithm generates identifiers that are unique only for a particular database.
SEQHILO_GENERATOR_DESC=Uses a hi/lo algorithm to efficiently generate identifiers of type <code>long</code>, <code>short</code> or <code>int</code>, given a named database sequence.
UUID_GENERATOR_DESC=Uses a 128-bit UUID algorithm to generate identifiers of type string, unique within a network (the IP address is used). The UUID is encoded as a string of hexadecimal digits of length 32.
GUID_GENERATOR_DESC=Uses a database-generated GUID string on MS SQL Server and MySQL.
NATIVE_GENERATOR_DESC=Picks <code>identity</code>, <code>sequence</code> or <code>hilo</code> depending upon the capabilities of the underlying database.
ASSIGNED_GENERATOR_DESC=Allows the application assign an identifier to the object before save() is called. This is the default strategy if no &lt;generator&gt; element is specified.
SELECT_GENERATOR_DESC=Retrieves a primary key assigned by a database trigger by selecting the row by some unique key and retrieving the primary key value.
FOREIGN_GENERATOR_DESC=Uses the identifier of another associated object. Usually used in conjunction with a &lt;one-to-one&gt; primary key association.
SEQUENCE_IDENTITY_GENERATOR_DESC=A specialized sequence generation strategy which utilizes a database sequence for the actual value generation, but combines this with JDBC3 getGeneratedKeys to actually return the generated identifier value as part of the insert statement execution. This strategy is only known to be supported on Oracle 10g drivers targeted for JDK 1.4. Note comments on these insert statements are disabled due to a bug in the Oracle drivers.

#Hibernate types
BIG_DECIMAL_DESC=Type mapping from <code>java.math.BigDecimal</code> to <code>NUMERIC</code> (or Oracle <code>NUMBER</code>).
BIG_INTEGER_DESC=Type mapping from <code>java.math.Biginteger</code> to <code>NUMERIC</code> (or Oracle <code>NUMBER</code>).
BINARY_DESC=Type mapping from <code>byte[]</code> to an appropriate SQL binary type.
BLOB_DESC=Type mapping for the JDBC class <code>java.sql.Blob</code>.
BOOLEAN_DESC=Type mapping from <code>boolean</code> or <code>java.lang.Boolean</code> to an appropriate (vendor-specific) SQL column type.
BYTE_DESC=Type mapping from <code>byte</code> or <code>java.lang.Byte</code> to an appropriate (vendor-specific) SQL column type.
CALENDAR_DESC=Type mapping from <code>java.util.Calendar</code> to SQL type <code>TIMESTAMP</code> (or equivalent).
CALENDAR_DATE_DESC=Type mapping from <code>java.util.Calendar</code> to SQL type <code>DATE</code> (or equivalent).
CHARACTER_DESC=Type mapping <code>char</code> or <code>java.lang.Character</code> to an appropriate (vendor-specific) SQL column type.
CLASS_DESC=Type mapping <code>java.lang.Class</code> to <code>VARCHAR</code> (or Oracle <code>VARCHAR2</code>). A <code>Class</code> is mapped to its fully qualified name.
CLOB_DESC=Type mapping for the JDBC class <code>java.sql.Clob</code>.
CURRENCY_DESC=Type mapping from <code>java.util.Currency</code> to <code>VARCHAR</code> (or Oracle <code>VARCHAR2</code>). Instances of <code>Currency</code> are mapped to their ISO codes.
DATE_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>DATE</code> (or equivalent).
DOUBLE_DESC=Type mapping from <code>double</code> or <code>java.lang.Double</code> to an appropriate (vendor-specific) SQL column type. 
FLOAT_DESC=Type mapping from <code>float</code> or <code>java.lang.Float</code> to an appropriate (vendor-specific) SQL column type.
IMM_BINARY_DESC=Type mapping for <code>byte[]</code>, where Hibernate treats the object as immutable.
IMM_CALENDAR_DESC=Type mapping from <code>java.util.Calendar</code> to SQL type <code>TIMESTAMP</code> (or equivalent), where Hibernate treats the object as immutable.
IMM_CALENDAR_DATE_DESC=Type mapping from <code>java.util.Calendar</code> to SQL type <code>DATE</code> (or equivalent), where Hibernate treats the object as immutable.
IMM_DATE_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>DATE</code> (or equivalent), where Hibernate treats the object as immutable.
IMM_SERIALIZABLE_DESC=Type mapping from serializable Java types to an appropriate SQL binary type, where Hibernate treats the object as immutable.
IMM_TIME_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>TIME</code> (or equivalent), where Hibernate treats the object as immutable.
IMM_TIMESTAMP_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>TIMESTAMP</code> (or equivalent), where Hibernate treats the object as immutable.
INTEGER_DESC=Type mapping from  <code>int</code> or <code>java.lang.Integer</code> to an appropriate (vendor-specific) SQL column type.
#INTEGER_DESC=<b>Java type:</b>  <code>int</code> or <code>java.lang.Integer</code> <br> <b>Standard SQL built-in type:</b> <code>INTEGER</code>
LOCALE_DESC=Type mapping from <code>java.util.Locale</code> to <code>VARCHAR</code> (or Oracle <code>VARCHAR2</code>). Instances of Locale are mapped to their ISO codes.
LONG_DESC=Type mapping from <code>long</code> or <code>java.lang.Long</code> to an appropriate (vendor-specific) SQL column type.
SERIALIZABLE_DESC=Type mapping serializable Java types to an appropriate SQL binary type.
SHORT_DESC=Type mapping from <code>short</code> or <code>java.lang.Short</code> to an appropriate (vendor-specific) SQL column type.
STRING_DESC=Type mapping from <code>java.lang.String</code> to <code>VARCHAR</code> (or Oracle <code>VARCHAR2</code>).
TEXT_DESC=Type mapping from long Java strings to a SQL <code>CLOB</code> or <code>TEXT</code> type.
TIME_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>TIME</code> (or equivalent).
TIMESTAMP_DESC=Type mapping from <code>java.util.Date</code> and its subclasses to SQL type <code>TIMESTAMP</code> (or equivalent).
TIMEZONE_DESC=Type mapping from <code>java.util.TimeZone</code> to <code>VARCHAR</code> (or Oracle <code>VARCHAR2</code>). Instances of <code>TimeZone</code> are mapped to their ID.
TRUE_FALSE_DESC=Una codificaci\u00f3 alternativa de Java per a <code>boolean</code> o <code>java.lang.Boolean</code>.
YES_NO_DESC=Una codificaci\u00f3 alternativa de Java per a <code>boolean</code> o <code>java.lang.Boolean</code>.

# Hibernate configuration properties
AUTOCOMMIT_DESC=JDBC autocommit mode.
AUTO_CLOSE_SESSION_DESC=Enable automatic session close at end of transaction.
BYTECODE_PROVIDER_DESC=Specifies the bytecode provider to use to optimize the use of reflection in Hibernate.
BATCH_STRATEGY_DESC=Select a custom batcher.
BATCH_VERSIONED_DATA_DESC=Include versioned data in batching?
C3P0_ACQUIRE_INCREMENT_DESC=Number of connections acquired when pool is exhausted.
C3P0_IDLE_TEST_PERIOD_DESC=Idle time before a C3P0 pooled connection is validated.
C3P0_MAX_SIZE_DESC=Maximum size of C3P0 connection pool.
C3P0_MAX_STATEMENTS_DESC=Maximum size of C3P0 statement cache.
C3P0_MIN_SIZE_DESC=Minimum size of C3P0 connection pool.
C3P0_TIMEOUT_DESC=Maximum idle time for C3P0 connection pool.
CACHE_PROVIDER_DESC=The <code>CacheProvider</code> implementation class.
CACHE_REGION_PREFIX_DESC=The <code>CacheProvider</code> region name prefix.
CACHE_PROVIDER_CONFIG_DESC=The <code>CacheProvider</code> implementation class.
CACHE_NAMESPACE_DESC=The <code>CacheProvider</code> JNDI namespace, if pre-bound to JNDI.
CONNECTION_PROVIDER_DESC=The <code>ConnectionProvider</code> implementor to use when obtaining connections.
CONNECTION_PREFIX_DESC=The prefix for arbitrary JDBC connection properties.
CURRENT_SESSION_CONTEXT_CLASS_DESC=Context scoping impl for <code>SessionFactory.getCurrentSession()</code> processing.
DATASOURCE_DESC=<code>java.sql.Datasource</code> JNDI name.
DEFAULT_BATCH_FETCH_SIZE_DESC=The default batch size for batch fetching.
DEFAULT_CATALOG_DESC=A default database catalog name to use for unqualified table names.
DEFAULT_ENTITY_MODE_DESC=The EntityMode in which set the Session opened from the SessionFactory.
DEFAULT_SCHEMA_DESC=A default database schema (owner) name to use for unqualified table names.
DIALECT_DESC=Hibernate SQL <code>Dialect</code> class.
DRIVER_DESC=Classe controlador JDBC.
FLUSH_BEFORE_COMPLETION_DESC=Enable automatic flush during the JTA <code>beforeCompletion()</code> callback.
FORMAT_SQL_DESC=Habilitar el formatejament de l'SQL enregistrat a la consola.
GENERATE_STATISTICS_DESC=Habilitar la col\u00b7lecci\u00f3 d'estad\u00edstiques.
HBM2DDL_AUTO_DESC=Auto exportar/actualitzar l'esquema mitjan\u00e7ant l'eina hbm2ddl. Valid values are <code>update</code>, <code>create</code>, <code>create-drop</code> and <code>validate</code>.
ISOLATION_DESC=JDBC transaction isolation level.
JACC_CONTEXTID_DESC=L'ID de context jacc del desplegament.
JNDI_CLASS_DESC=JNDI initial context class, <code>Context.INITIAL_CONTEXT_FACTORY</code>.
JNDI_URL_DESC=JNDI provider URL, <code>Context.PROVIDER_URL</code>.
JPAQL_STRICT_COMPLIANCE_DESC=Conforme a JAP QL.
MAX_FETCH_DEPTH_DESC=Maximum depth of outer join fetching.
ORDER_UPDATES_DESC=Enable ordering of update statements by primary key value.
OUTPUT_STYLESHEET_DESC=An XSLT resource used to generate "custom" XML.
PASS_DESC=Contrasenya JDBC.
POOL_SIZE_DESC=Maximum number of inactive connections for Hibernate's connection pool.
PROXOOL_EXISTING_POOL_DESC=Proxool property to configure the Proxool Provider from an already existing pool (<code>true/false</code>).
PROXOOL_POOL_ALIAS_DESC=Proxool property with the Proxool pool alias to use (Required for <code>PROXOOL_EXISTING_POOL</code>, <code>PROXOOL_PROPERTIES</code>, or <code>PROXOOL_XML</code>).
PROXOOL_PREFIX_DESC=Proxool/Hibernate property prefix.
PROXOOL_PROPERTIES_DESC=Proxool property to configure the Proxool Provider using a properties file (<code>/path/to/proxool.properties</code>).
PROXOOL_XML_DESC=Proxool property to configure the Proxool Provider using an XML (<code>/path/to/file.xml</code>).
QUERY_CACHE_FACTORY_DESC=L'implementaci\u00f3 de la classe <code>QueryCacheFactory</code>.
QUERY_TRANSLATOR_DESC=The classname of the HQL query parser factory.
QUERY_SUBSTITUTIONS_DESC=A comma-separated list of token substitutions to use when translating a Hibernate query to SQL.
QUERY_STARTUP_CHECKING_DESC=Comprovar les consultes amb nom en l'arrencada (habilitat per defecte). Mainly intended for test environments. 
RELEASE_CONNECTIONS_DESC=Specifies how Hibernate should release JDBC connections.
SESSION_FACTORY_NAME_DESC=JNDI name to bind to <code>SessionFactory</code>.
SHOW_SQL_DESC=Habilitar l'enregistrament de l'SQL generat a la consola.
SQL_EXCEPTION_CONVERTER_DESC=The <code>SQLExceptionConverter</code> to use for converting SQLExceptions to Hibernate's <code>JDBCException</code> hierarchy. The default is to use the configured Dialect's preferred <code>SQLExceptionConverter</code>.
STATEMENT_BATCH_SIZE_DESC=Mida m\u00e0xima dels lots JDBC. Un valor diferent de zero habilita les actualitzacions de lots.
STATEMENT_FETCH_SIZE_DESC=Gives the JDBC driver a hint as to the number of rows that should be fetched from the database when more rows are needed. If 0, JDBC driver default settings will be used.
TRANSACTION_STRATEGY_DESC=L'implementador <code>TransactionFactory</code> a utilitzar per a crear <code>Transactions</code>.
TRANSACTION_MANAGER_STRATEGY_DESC=L'implementador <code>TransactionManagerLookup</code> a utilitzar per a l'obtenci\u00f3 de <code>TransactionManager</code>.
URL_DESC=URL JDBC.
USER_DESC=Usuari JDBC.
USE_GET_GENERATED_KEYS_DESC=Tells the JDBC driver to attempt to retrieve row Id with the JDBC 3.0 <code>PreparedStatement.getGeneratedKeys()</code> method. In general, performance will be better if this property is set to true and the underlying JDBC driver supports getGeneratedKeys().
USE_SCROLLABLE_RESULTSET_DESC=Use JDBC scrollable ResultSets. This property is only necessary when there is no ConnectionProvider, i.e. the user is supplying JDBC connections.
USE_STREAMS_FOR_BINARY_DESC=Utilitzar fluxes java.io per a llegir/escriure dades bin\u00e0ries des de o, cap a JDBC.
USE_IDENTIFIER_ROLLBACK_DESC=Determina si Hibernate utilitza el restaurador d'identificador.
USE_SQL_COMMENTS_DESC=Afegir comentaris a l'SQL generat.
USE_MINIMAL_PUTS_DESC=Optimize the cache for minimal puts instead of minimal gets.
USE_QUERY_CACHE_DESC=Habilitar la mem\u00f2ria cau de consultes (deshabilitat per defecte).
USE_SECOND_LEVEL_CACHE_DESC=Habilitar la mem\u00f2ria cau de segon nivell (habilitat per defecte).
USE_STRUCTURED_CACHE_DESC=Permetre la utilitzaci\u00f3 de mem\u00f2ria cau estructurada de segon nivell d'entrades.
USER_TRANSACTION_DESC=Nom JNDI de l'objecte <code>UserTransaction</code> de JTA.
USE_REFLECTION_OPTIMIZER_DESC=Utilitzar  biblioteques bytecode optimitzades per l'acc\u00e9s a propietats.
WRAP_RESULT_SETS_DESC=Enable wrapping of JDBC result sets in order to speed up column name lookups for broken JDBC drivers.


