# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
#
# Contributor(s):
#
#The Original Software is NetBeans. The Initial Developer of the Original
# Software is Sun Microsystems, Inc. Portions Copyright 1997-2010 Sun
#Microsystems, Inc. All Rights Reserved.
#
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.

#
# This bundle defines the localized name of the module, as will be shown
# in the options dialog and the setup wizard, and the category folder it will
# be found in, in the options dialog under System | Modules
#


# Braces
LBL_Braces_For=Los bucles For deben utilizar llaves 
LBL_Braces_While=Los bucles While deben utilizar llaves
LBL_Braces_DoWhile=Los bucles Do-While deben utilizar llaves
LBL_Braces_If=Las sentencias If-Else deben utilizar llaves

DSC_Braces_For=Advierte si un<CODE>para</CODE> bucle no<BR>tiene su cuerpo envuelto en las llaves.<BR>
DSC_Braces_While=Los bucles While deben utilizar llaves
DSC_Braces_DoWhile=Los bucles Do-While deben utilizar llaves
DSC_Braces_If=Las sentencias If-Else deben utilizar llaves

LBL_Braces_Fix=A\u00f1adir llaves

# Assignment to itself
LBL_ATI=Autoasignaci\u00f3n
DSC_ATI=Autoasignaci\u00f3n

LBL_ATI_Remove_FIX=Eliminar la asignaci\u00f3n
LBL_ATI_Qualify_FIX=Habilitar con esto
LBL_ATI_NewParameter_FIX=Introducir par\u00e1metro
LBL_ATI_NewField_FIX=Introducir campo

# Imports
LBL_Imports_DELEGATE=Sustituto - que no es interfaz gr\u00e1fica
LBL_Imports_UNUSED=Import no usado
LBL_Imports_DUPLICATE=Importaci\u00f3n m\u00faltiple
LBL_Imports_SAME_PACKAGE=Importaci\u00f3n del mismo paquete
LBL_Imports_DEFAULT_PACKAGE=Importaci\u00f3n del paquete java.lang
LBL_Imports_EXCLUDED=Importar desde excluidos
LBL_Imports_STAR=Iniciar importaci\u00f3n

DSC_Imports_DELAGATE=Sustituto - que no es interfaz gr\u00e1fica
DSC_Imports_UNUSED=Import no usado
DSC_Imports_DUPLICATE=Importaci\u00f3n m\u00faltiple
DSC_Imports_SAME_PACKAGE=Importaci\u00f3n del mismo paquete
DSC_Imports_DEFAULT_PACKAGE=Importaci\u00f3n del paquete java.lang
DSC_Imports_EXCLUDED=Importar desde el paquete o clase que ha sido etiquetado "Excluded" en el terminador de c\u00f3digo 
DSC_Imports_STAR=Iniciar importaci\u00f3n

LBL_Imports_Fix_One_SAME_PACKAGE=Eliminar importaci\u00f3n del mismo paquete
LBL_Imports_Fix_All_SAME_PACKAGE=Eliminar todas las importaciones del mismo paquete

LBL_Imports_Fix_One_DEFAULT_PACKAGE=Eliminar importaciones del paquete java.lang
LBL_Imports_Fix_All_DEFAULT_PACKAGE=Eliminar todas las importaciones del paquete java.lang

# equals and hashcode
MSG_MissingHashCode=Generar hashCode o equals perdidos
HINT_MissingHashCode=Comprueba si una clase con m\u00e9todos equals sobrescritos tambi\u00e9n sobrescribe a hashCode.
MSG_GenHashCode=Generar hashCode() perdido
MSG_GenEquals=Generar equals(Object) perdidos

# export non accessible element
MSG_ExportNonAccessibleElement=Exportando tipos no p\u00fablicos a trav\u00e9s de una API p\u00fablica
MSG_ExportNonAccessibleElementMakeNonVisible=Convertir paquete en privado
HINT_ExportNonAccessibleElement=Comprueba que devuelve tipos y tipos de par\u00e1metros de todos los m\u00e9todos p\u00fablicos y  que todos los tipos de campos p\u00fablicos est\u00e1n p\u00fablicamente disponibles desde otros paquetes. Tener tipos o paquetes privados en una API no tiene utilidad.


# Annotation as super interface
# {0} name of the annotation
LBL_AnnotationAsSuperInterface=No utilizar la anotaci\u00f3n como interfaz superior
HNT_AnnotationAsSuperInterface=No usar Anotaciones {0} como super interfaz
DSC_AnnotationAsSuperInterface=Aunque el compilador permita estas construcciones, las Anotaciones no deber\u00edan usarse como superinterfaces.

# Utility class
MSG_UtilityClass=Clase utility sin constructor
HINT_UtilityClass=Busca clases que contengan s\u00f3lo elementos est\u00e1ticos, pero que puedan crear objetos.
MSG_PrivateConstructor=Crear constructor privado
MSG_MakePrivate=Convertir en constructor privado
MSG_PublicConstructor=Clase utility con constructor visible
HINT_PublicConstructor=Busca clases que contengan s\u00f3lo elementos est\u00e1ticos con constructores p\u00fablicos o protegidos.

#Standard Javac warnings
LBL_Javac_DEPRECATED=Obsoleto
LBL_Javac_UNCHECKED=Desmarcado
LBL_Javac_FALLTHROUGH=Ca\u00edda en cascada
LBL_Javac_SERIALIZATION=Serializaci\u00f3n
LBL_Javac_UNNECESSARY_CAST=Conversi\u00f3n no necesaria
LBL_Javac_EMPTY_STATEMENT_AFTER_IF=Sentencia vac\u00eda despu\u00e9s de If
LBL_Javac_OVERRIDES=Redefiniciones
LBL_Javac_DIVISION_BY_ZERO=Divisi\u00f3n por cero
LBL_Javac_RAWTYPES=Tipos Raw
LBL_Javac_CAN_USE_DIAMOND=Puede usar Diamond

DSC_Javac_DEPRECATED=Advierte cuando el c\u00f3digo usa un API obsoleto.
DSC_Javac_UNCHECKED=Advierte cuando una conversi\u00f3n sin verificaci\u00f3n puede provocar un ClassCastExceptions  en tiempo de ejecuci\u00f3n.
DSC_Javac_FALLTHROUGH=Advierte cuando un "case" puede caer en el siguiente "case"
DSC_Javac_SERIALIZATION=Advierte cuando una clase el cual implemente a java.io.Serializable no declara un serialVersionUID.
DSC_Javac_FINALLY=Avisar cuando un bloque finally interrumpa el flujo de un bloque try/catch.
DSC_Javac_UNNECESSARY_CAST=Avisar cuando un objeto sea casteado de forma innecesaria al mismo tipo o supertipo.
DSC_Javac_EMPTY_STATEMENT_AFTER_IF=Sentencia vac\u00eda despu\u00e9s de If
DSC_Javac_OVERRIDES=Avisar cuando un m\u00e9todo sobreescrito no est\u00e9 anotado con @Overrides
DSC_Javac_DIVISION_BY_ZERO=Divisi\u00f3n por cero
DSC_Javac_RAWTYPES=Tipos Raw
DSC_Javac_CAN_USE_DIAMOND=Warns about places where the diamond operator in JDK 7 can be used instead of explicit type parameters

# double check
MSG_DoubleCheck=Bloqueo de verificado doble
HINT_DoubleCheck=Busca ejemplos de bloqueo de verificado doble - por ejemplo, cuando se prueba una variable antes y dentro de un bloque sincronizado.
ERR_DoubleCheck=Bloqueo de verificado doble
FIX_DoubleCheck=Eliminar la sentencia condicional exterior

LBL_IllegalInstanceOf=Utilizaci\u00f3n no permitida del operador instanceOf
DSC_IllegalInstanceOf=Muestra la utilizaci\u00f3n no permitida de instanceOf en javax.lang.model.elements, javax.lang.model.type y com.sun.source.tree
MSG_IllegalInstanceOf=Utilizaci\u00f3n no permitida de instanceOf

#Wrong string comparison
LBL_WrongStringComparison=Comparando cadenas mediante == o !=
DSC_WrongStringComparison=Compruebe usos de los operadores == o != para comparar cadenas.<BR>Generalmente se deben hacer comparaciones de cadena utilizando el m\u00e9todo equals().

FIX_WrongStringComparison_NullCheck=Usa equals() sin comprobar si es nulo.
FIX_WrongStringComparison_TernaryNullCheck=Usa equals() sin comprobar si es nulo (terna).
FIX_WrongStringComparison_NoNullCheck=Usar equals()
FIX_WrongStringComparison_ReverseOperands=Usa equals() y operandos para deshacer

WrongStringComparisonCustomizer.ternaryNullCheck.text=Verificar null al usar el operador condicional ternario
WrongStringComparisonCustomizer.stringLiteralFirst.text=Pon los literales String lo primero cuando sea posible
ACSD_Ternary_Null_Check=Controlar si el arreglo utiliza una verificaci\u00f3n de null condicional ternaria. 
ACSD_String_Literals_First=Genera menos codigo excluyendo la comprobacion de null si uno de los operando es un literal String.

#Empty statements
LBL_Empty_FOR_LOOP=Sentencia vac\u00eda despu\u00e9s de 'for'
LBL_Empty_ENHANCED_FOR_LOOP=Sentencia vac\u00eda despu\u00e9s de 'for'
LBL_Empty_WHILE_LOOP=Sentencia vac\u00eda despu\u00e9s de 'while'
LBL_Empty_DO_WHILE_LOOP=Sentencia vac\u00eda despu\u00e9s de 'do'
LBL_Empty_IF=Sentencia vac\u00eda despu\u00e9s de 'if/else'
LBL_Empty_BLOCK=Sentencia vac\u00eda

DSC_Empty_FOR_LOOP=Comprueba las sentencias 'for' de la forma <BR><CODE>for(...);</CODE>.
DSC_Empty_WHILE_LOOP=Comprueba las sentencias 'while' de la forma <BR><CODE>while(...);</CODE>.
DSC_Empty_DO_WHILE_LOOP=Comprueba las sentencias 'do/while' de la forma <BR><CODE>do;<BR>while</CODE>.
DSC_Empty_IF=Comprueba las sentencias 'if/else' de la forma<BR><CODE>if(...);<BR>else;</CODE>.
DSC_Empty_BLOCK=Comprueba las sentencias vac\u00edas en bloques generalmente representadas como puntos y comas superfluos.

MSG_HiddenField=El campo oculta a otro campo
HINT_HiddenField=La declaraci\u00f3n de un campo en una clase puede esconder la declaraci\u00f3n de otro campo en superclases. Aunque posible, este no es un estilo de programaci\u00f3n muy bueno.
MSG_FixHiddenFiledText=Cambiar nombre al campo
MSG_FixHiddenByVariableFiledText=Cambiar el nombre de la variable local
MSG_HiddenFieldByVar=La variable local oculta un campo
HINT_HiddenFieldByVar=La declaraci\u00f3n de una variable en un m\u00e9todo puede ocultar la declaraci\u00f3n de un campo declarado en una clase circundante. Aunque posible, este no es un estilo de programaci\u00f3n muy bueno.

LBL_EmptyCancel=cancel() vacio para tareas cancelables.
DSC_EmptyCancel=Warn about empty cancel() methods for cancelable tasks
MSG_EmptyCancel=cancel() vac\u00edo

#{0}:
#     0 - field
#     1 - method
#     2 - other (unknown)
#{1}: element simple name
MSG_StaticAccess=Acceso est\u00e1tico {0,choice,0#field|1#method|1<element} {1}
MSG_StaticAccessName=Acceso est\u00e1tico mediante referencia
HINT_StaticAccess=Java language allows access to static fields thru instance variables, however this is often misleading and harder to read.
MSG_StaticAccessText=Sustituir con referencia a una clase

#ConvertAnonymousToInner:
HINT_ConvertAnonymousToInner=Convertir an\u00f3nimo en miembro
DN_ConvertAnonymousToInner=Convertir an\u00f3nimo en miembro
DESC_ConvertAnonymousToInner=Convertir an\u00f3nimo en miembro
FIX_ConvertAnonymousToInner=Convertir an\u00f3nimo en miembro

ERR_CaretNotInAnonymousInnerclass=El cursor no est\u00e1 en una clase an\u00f3nima.
ERR_SelectionNotSupported=No se admite la selecci\u00f3n.

CTL_ConvertAnonymousToInner=Convertir an\u00f3nimo en miembro

HINT_AddOverrideAnnotation=A\u00f1adir anotaci\u00f3n @Override
DN_AddOverrideAnnotation=A\u00f1adir anotaci\u00f3n @Override
DESC_AddOverrideAnnotation=A\u00f1adir anotaci\u00f3n @Override
FIX_AddOverrideAnnotation=A\u00f1adir anotaci\u00f3n @Override

HINT_AssignResultToVariable=Asignar el valor devuelto a la nueva variable
DN_AssignResultToVariable=Asignar el valor devuelto a la nueva variable
DESC_AssignResultToVariable=Asignar el valor devuelto a la nueva variable
FIX_AssignResultToVariable=Asignar el valor devuelto a la nueva variable

HINT_WrongPackage=Paquete defectuoso
DN_WrongPackage=Paquete equivocado
DESC_WrongPackage=Paquete equivocado
#{0}:
#    0: Remove package
#    1: Change package
#{1}: target package name
FIX_WrongPackageFix={0,choice,0#Remover declaraci\u00f3n de paquete |1#Change declaraci\u00f3n de paquete a {1}}
FIX_WrongPackageMove=Mover la clase a la carpeta correcta
ERR_CannotMoveAlreadyExists=No se puede mover el c\u00f3digo fuente, la ruta de destino ya existe y no es una carpeta.
ERR_CannotMove=No se puede mover el c\u00f3digo fuente.

HINT_SuspiciousNamesCombination=Combinaci\u00f3n de nombres sospechosa
DN_SuspiciousNamesCombination=Combinaci\u00f3n de nombres sospechosa
DESC_SuspiciousNamesCombination=Combinaci\u00f3n de nombres sospechosa

ERR_EQUALS_NOT_CHECKING_TYPE=El m\u00e9todo equals() no comprueba el tipo de su par\u00e1metro

DN_FieldUnusedParam=Asignar sin utilizar par\u00e1metros del constructor a campo
DSC_FieldUnusedParam=Asignar sin utilizar par\u00e1metros del constructor a campo
FIX_AssignToExisting=Asignar a campo existente
FIX_CreateField=Crear campo
ERR_UnusedParameter=Par\u00e1metro no utilizado


DSC_EqualsMethod=La implementaci\u00f3n de m\u00e9todos .equals no comprueba el tipo del par\u00e1metro de entrada
DN_EqualsMethod=El m\u00e9todo .equals no comprueba el tipo
FIX_CreateDeclaration=Crear declaraci\u00f3n
DN_DeclarationForInstanceof=Declaraci\u00f3n para instanceof
ERR_DeclarationForInstanceof=Declaraci\u00f3n para instanceof

DSC_SynchronizationOnNonFinalField=Sincronizaci\u00f3n en campo que no es final
ERR_SynchronizationOnNonFinalField=Sincronizaci\u00f3n en campo que no es final
DN_SynchronizationOnNonFinalField=Sincronizaci\u00f3n en campo que no es final

HINT_SerialVersionUID=Agregar un serialVersionUID predeterminado
HINT_SerialVersionUID_Generated=Agregar un serialVersionUID generado

FieldForUnusedParamCustomizer.finalFields.text=<html>Los campos son <code>final</code></html>
ACSD_Final_Fields=Hacer campos creados por esta sugerencia final.

DSC_StaticImport=Convertir m\u00e9todo a un import est\u00e1tico Retroalimentaci\u00f3n en http://www.netbeans.org/issues/show_bug.cgi?id=89258
DN_StaticImport=Imports est\u00e1ticos
ERR_StaticImport=Convertir m\u00e9todo a un import est\u00e1tico
HINT_StaticImport=Convertir {0} a un import est\u00e1tico
HINT_StaticImport2=Agregar import est\u00e1tico para {0}

DN_StringBuilderAppend=Concatenaci\u00f3n de cadenas en un StringBuilder.append
DESC_StringBuilderAppend=Looks for string concatenation in the parameter of an invocation of the append method of StringBuilder or StringBuffer.
ERR_StringBuilderAppend=Concatenaci\u00f3n de cadenas en un {0}.append
FIX_StringBuilderAppend=Use chain of .append methods instead of string concatenation

#ThisIsAnonymous hint
DN_org.netbeans.modules.java.hints.ThisInAnonymous=Synchronizing on this in anonymous class
DESC_org.netbeans.modules.java.hints.ThisInAnonymous=<html>Synchronizing on <tt>this</tt> in anonymous or local class is probably a result of refactoring and possibly a mistake
ERR_ThisInAnonymous=Synchronizing on this in anonymous class
ERR_ThisInAnonymousLocal=Synchronizing on this in local class
FIX_ThisInAnonymous=Synchronize on enclosing class

#LoggerNotStaticFinal hint
DN_org.netbeans.modules.java.hints.LoggerNotStaticFinal=La declaraci\u00f3n del Logger no es est\u00e1tica y final
DESC_org.netbeans.modules.java.hints.LoggerNotStaticFinal=Cada clase debe tener s\u00f3lo un Logger If declared as a field it should be static and final.
MSG_LoggerNotStaticFinal_checkLoggerDeclaration=The logger declaration field {0} should be static and final
MSG_LoggerNotStaticFinal_checkLoggerDeclaration_fix=Volver el campo {0} est\u00e1tico y final

#MultipleLoggers hint
DN_org.netbeans.modules.java.hints.MultipleLoggers=Multiples loggers
DESC_org.netbeans.modules.java.hints.MultipleLoggers=There are several loggers declared for a single class.
MSG_MultipleLoggers_checkMultipleLoggers=Multiple loggers {0} declared for {1} class

#NoLoggers hint
DN_org.netbeans.modules.java.hints.NoLoggers=Sin loggers
DESC_org.netbeans.modules.java.hints.NoLoggers=There is no logger declared for a class.
MSG_NoLoggers_checkNoLoggers=No logger declared for {0} class
MSG_NoLoggers_checkNoLoggers_Fix=Create logger field in {0} class

#ShiftOutOfRange hint
DN_org.netbeans.modules.java.hints.ShiftOutOfRange=Shift operation outside of the reasonable range
DESC_org.netbeans.modules.java.hints.ShiftOutOfRange=This inspection reports any instances of shift operations where the value shifted by is constant and outside of the reasonable range. Integer shift operations outside of the range 0..31 and long shift operations outside of therange 0..63 are reported. Shifting by negative or overly large values is almost certainly a coding error.
MSG_ShiftOutOfRange_int=Shift operation outside of the reasonable range 0..31
MSG_ShiftOutOfRange_long=Shift operation outside of the reasonable range 0..63

#ClassStructure hints
DN_org.netbeans.modules.java.hints.ClassStructure.finalClass=Clase Final
DESC_org.netbeans.modules.java.hints.ClassStructure.finalClass=Reportar todas las instancias de clases que fueron declarados como final. Algunos est\u00e1ndares de c\u00f3digo desalientan el uso de clases finales
MSG_FinalClass=La clase {0} es declarada final
FIX_RemoveFinalFromClass=Eliminar el modificador final de la declaraci\u00f3n de la clase {0} 
DN_org.netbeans.modules.java.hints.ClassStructure.finalMethod=M\u00e9todo final
DESC_org.netbeans.modules.java.hints.ClassStructure.finalMethod=Reportar todas las instancias de m\u00e9todos que fueron declarados como final. Algunos est\u00e1ndares de c\u00f3digo desalientan el uso de clases finales
MSG_FinalMethod=El m\u00e9todo {0} es declarado final
FIX_RemoveFinalFromMethod=Eliminar el modificador final de la declaraci\u00f3n del m\u00e9todo {0} 
DN_org.netbeans.modules.java.hints.ClassStructure.finalPrivateMethod=M\u00e9todo privado y final
DESC_org.netbeans.modules.java.hints.ClassStructure.finalPrivateMethod=Reportar todas las instancias de m\u00e9todos que fueron declarados como final y privados. As private methods cannot be meaningfully overridden, declaring them final is redundant.
MSG_FinalPrivateMethod=El m\u00e9todo {0} es declarado final
DN_org.netbeans.modules.java.hints.ClassStructure.finalStaticMethod=M\u00e9todo est\u00e1tico y final
DESC_org.netbeans.modules.java.hints.ClassStructure.finalStaticMethod=Reportar todas las instancias de m\u00e9todos que fueron declarados como final y est\u00e1ticos. As static methods cannot be meaningfully overridden, declaring them final is redundant.
MSG_FinalStaticMethod=El m\u00e9todo est\u00e1tico {0} es declarado final
DN_org.netbeans.modules.java.hints.ClassStructure.finalMethodInFinalClass=M\u00e9todo final en una clase final
DESC_org.netbeans.modules.java.hints.ClassStructure.finalMethodInFinalClass=Reportar todas las instancias de m\u00e9todos que fueron declarados como final en clases declaradas como final. Esto es innecesario, y puede ser confuso.
MSG_FinalMethodInFinalClass=El m\u00e9todo {0} es declardo final en una clase final
DN_org.netbeans.modules.java.hints.ClassStructure.noopMethodInAbstractClass=No-op method in abstract class
DESC_org.netbeans.modules.java.hints.ClassStructure.noopMethodInAbstractClass=Reports any instances of no-op methods in abstract classes. It is usually a better design to make such methods abstract themselves, so that classes which inherit the methods will not forget to provide their own implementations.
MSG_NoopMethodInAbstractClass=No-op method {0} should be made abstract
DN_org.netbeans.modules.java.hints.ClassStructure.publicConstructorInNonPublicClass=Constructor p\u00fablico en una clase no p\u00fablica
DESC_org.netbeans.modules.java.hints.ClassStructure.publicConstructorInNonPublicClass=Reports all constructors in non-public classes that are declared public.
MSG_PublicConstructorInNonPublicClass=EL Constructor es declado p\u00fablico en una clase no p\u00fablica
FIX_RemovePublicFromConstructor=Eliminar el modificador public de la declaraci\u00f3n del constructor
DN_org.netbeans.modules.java.hints.ClassStructure.protectedMemberInFinalClass=Miembro protegido en una clase final
DESC_org.netbeans.modules.java.hints.ClassStructure.protectedMemberInFinalClass=Reports any instances of members being declared protected in classes that are declared final. Such members may be declared private or package-visible instead.
MSG_ProtectedMethodInFinalClass=El m\u00e9todo {0} es declarado como protegido en una clase final
MSG_ProtectedFieldInFinalClass=El campo {0} es declarada como protegida en una clase final
FIX_RemoveProtectedFromMethod=Eliminar el modificador protegido de la declaraci\u00f3n del m\u00e9todo {0}
FIX_RemoveProtectedFromField=Eliminar el modificador protegido de la declaraci\u00f3n del campo {0}
DN_org.netbeans.modules.java.hints.ClassStructure.markerInterface=Marcador de la interfaz
DESC_org.netbeans.modules.java.hints.ClassStructure.markerInterface=Reports marker interfaces which have no methods or fields. Such interfaces may be confusing, and normally indicate a design failure. Las interfaces que hereden de dos o m\u00e1s interfaces no ser\u00e1n reportadas.
MSG_MarkerInterface=Marcador de la interfaz  {0}
DN_org.netbeans.modules.java.hints.ClassStructure.classMayBeInterface=La clase podr\u00eda ser una interface
DESC_org.netbeans.modules.java.hints.ClassStructure.classMayBeInterface=Reports any concrete or abstract classes which may be simplified to be interfaces. This occurs if the class has no superclass (other than Object), has no fields declared that are not static, final, and public, and has no methods declared that are not public and abstract, and no inner classes that cannot themselves be interfaces.
MSG_ClassMayBeInterface=La clase {0} podr\u00eda ser una interface
FIX_ConvertClassToInterface=Convertir la clase {0} a una interfaz
DN_org.netbeans.modules.java.hints.ClassStructure.multipleTopLevelClassesInFile=Varias clases de primer nivel en el archivo
DESC_org.netbeans.modules.java.hints.ClassStructure.multipleTopLevelClassesInFile=Reports any instances of multiple top-level classes in a single java file. Putting multiple top-level classes in a file can be confusing, and may degrade the usefulness of various software tools.
MSG_MultipleTopLevelClassesInFile=Varias clases de primer nivel en el archivo

#AssignmentIssues hints
DN_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToForLoopParam=Assignment to for-loop parameter
DESC_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToForLoopParam=Reports any instances of assignment to variable declared in a for statement in the body of that statement. It also reports any attempt to increment or decrement the variable. While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
MSG_AssignmentToForLoopParam=Assignment to for-loop parameter {0}
DN_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToCatchBlockParameter=Assignment to catch-block parameter
DESC_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToCatchBlockParameter=Reports any instances of assignment to variable declared as a catch block parameter. While occasionally intended, this construct can be confusing.
MSG_AssignmentToCatchBlockParameter=Assignment to catch-block parameter {0}
DN_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToMethodParam=Assignment to method parameter
DESC_org.netbeans.modules.java.hints.AssignmentIssues.assignmentToMethodParam=Reports any instances of assignment to a variable declared as a method parameter. It also reports any attempt to increment or decrement the variable. While occasionally intended, this construct can be extremely confusing, and is often the result of a typo.
MSG_AssignmentToMethodParam=Assignment to method parameter {0}
DN_org.netbeans.modules.java.hints.AssignmentIssues.nestedAssignment=Asignaci\u00f3n anidada
DESC_org.netbeans.modules.java.hints.AssignmentIssues.nestedAssignment=Reports any instances of assignment expressions nested inside other expressions. While admirably terse, such expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.
MSG_NestedAssignment=Nested assignment ''{0}''
DN_org.netbeans.modules.java.hints.AssignmentIssues.incrementDecrementUsed=Value of increment/decrement expression used
DESC_org.netbeans.modules.java.hints.AssignmentIssues.incrementDecrementUsed=Reports any instances of increment or decrement expressions nested inside other expressions. While admirably terse, such expressions may be confusing, and violate the general design principle that a given construct should do precisely one thing.
MSG_IncrementUsedAsExpression=Value of increment expression ''{0}'' is used
MSG_DecrementUsedAsExpression=Value of decrement expression ''{0}'' is used
FIX_IncrementUsedAsExpression=Extraer la expresi\u00f3n de incremento ''{0}''
FIX_DecrementUsedAsExpression=Extraer la expresi\u00f3n de decremento ''{0}''
DN_org.netbeans.modules.java.hints.AssignmentIssues.replaceAssignWithOpAssign=Assignment replaceable with operator-assignment
DESC_org.netbeans.modules.java.hints.AssignmentIssues.replaceAssignWithOpAssign=Reports instances of assignment operations which can be replaced by operator-assignment. Code using operator-assignment may be clearer, and theoretically more performant.
MSG_ReplaceAssignmentWithOperatorAssignment=Assignment ''{0}'' is replaceable with operator-assignment
FIX_ReplaceAssignmentWithOperatorAssignment=Replace assignment ''{0}'' with operator-assignment

#IncompatibleMask hint
DN_org.netbeans.modules.java.hints.IncompatibleMask=Mascara no compatible
DESC_org.netbeans.modules.java.hints.IncompatibleMask=This inspection reports any instances of bitwise mask expressions which are guaranteed to evaluate to false. Expressions checked are of the form (var & constant1) == constant2 or (var | constant1) == constant2, where constant1and constant2 are incompatible bitmask constants.
MSG_IncompatibleMask=incompatibleMask: {0} es siempre falsa

#OverridableMethodCallInConstructor hint
DN_org.netbeans.modules.java.hints.OverridableMethodCallInConstructor=Problematic call in the constructor
DESC_org.netbeans.modules.java.hints.OverridableMethodCallInConstructor=Calling methods that can be overridden can be dangerous in the contructor because in the moment when the overridden method is called the object is not fully initialized.
MSG_org.netbeans.modules.java.hints.OverridableMethodCallInConstructor=Overridable method call in constructor
FIX_MakeMethod=Hacer el m\u00e9todo {1} {0}
FIX_MakeClass=Hacer la clase  {1} {0}

#PointlessBitwiseExpression hint
DN_org.netbeans.modules.java.hints.PointlessBitwiseExpression=Pointless bitwise expression
DESC_org.netbeans.modules.java.hints.PointlessBitwiseExpression=This inspection reports any instances of pointless bitwise expressions. Such expressions include anding with zero, oring by zero, and shift by zero. Such expressions may be the result of automated refactorings not completely followed through to completion, and in any case are unlikely to be what the developer intended to do.
MSG_PointlessBitwiseExpression=Pointless bitwise expression
MSG_PointlessBitwiseExpression_fix=Zero constant should be removed

#LeakingThisInConstructor hint
DN_org.netbeans.modules.java.hints.LeakingThisInConstructor=Passing suspicious parameter in the constructor
DESC_org.netbeans.modules.java.hints.LeakingThisInConstructor=Using this as parameter can be dangerous in the contructor because the object is not fully initialized.
MSG_org.netbeans.modules.java.hints.LeakingThisInConstructor=Leaking this in constructor

#ThreadDumpStack hint
DN_org.netbeans.modules.java.hints.ThreadDumpStack=Thread Dump Stack
DESC_org.netbeans.modules.java.hints.ThreadDumpStack=This inspection reports any uses Thread.dumpStack().These are often temporary debugging statements, and should probably be either removed from production code,or replaced by a more robust logging facility.
MSG_ThreadDumpStack=Thread Dump Stack
MSG_ThreadDumpStack_fix=Thread.dumpStack() debe ser removido

#PrintStackTrace hint
DN_org.netbeans.modules.java.hints.PrintStackTrace=Imprimir Stack Trace
DESC_org.netbeans.modules.java.hints.PrintStackTrace=This inspection reports any uses Throwable.printStackTrace() without arguments. These are often temporary debugging statements, and should probably be either removed from production code, or replaced by a more robust logging facility.
MSG_PrintStackTrace=Imprimir Stack Trace
MSG_PrintStackTrace_fix=Throwable.printStackTrace() debe ser removido

#SystemOut hint
DN_org.netbeans.modules.java.hints.SystemOut=System out / err
DESC_org.netbeans.modules.java.hints.SystemOut=Esta inspecci\u00f3n reporta cualquier uso de System.out o System.err These are often temporary debugging statements, and should probably be either removed from production code, or replaced by a more robust logging facility.
MSG_SystemOut=Uses of System.out or System.err are often temporary debugging statements.
MSG_SystemOut_fix=Remove statement

#ObsoleteCollection hint
DN_org.netbeans.modules.java.hints.ObsoleteCollection=Collection obsoleta
DESC_org.netbeans.modules.java.hints.ObsoleteCollection=This inspection reports any uses of java.util.Vector or java.util.Hashtable. While still supported, these classes were made obsolete by the JDK1.2 collection classes, and should probably not be used in new development.
MSG_ObsoleteCollection=Collection obsoleta

#StaticNonFinalUsedInInitialization hint
DN_org.netbeans.modules.java.hints.StaticNonFinalUsedInInitialization=Static non-final variable used during initialization
DESC_org.netbeans.modules.java.hints.StaticNonFinalUsedInInitialization=Using static non-final variables can be dangerous in the initialization code because their values may depend on the order of initialization statements
MSG_org.netbeans.modules.java.hints.StaticNonFinalUsedInInitialization=Usage of static non-final variable during initialization

LBL_WarnHiddenStaticFields=Warn when the hidden field is static
TP_WarnHiddenStaticFields=Whether the hint should warn when the hidden field is static

LBL_Javac_FINALLY=finally
