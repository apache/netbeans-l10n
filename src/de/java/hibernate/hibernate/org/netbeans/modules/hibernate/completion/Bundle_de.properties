# DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS HEADER.
#
# Copyright 1997-2010 Oracle and/or its affiliates. All rights reserved.
#
# Oracle and Java are registered trademarks of Oracle and/or its affiliates.
# Other names may be trademarks of their respective owners.
#
# The contents of this file are subject to the terms of either the GNU
# General Public License Version 2 only ("GPL") or the Common
# Development and Distribution License("CDDL") (collectively, the
# "License"). You may not use this file except in compliance with the
# License. You can obtain a copy of the License at
# http://www.netbeans.org/cddl-gplv2.html
# or nbbuild/licenses/CDDL-GPL-2-CP. See the License for the
# specific language governing permissions and limitations under the
# License.  When distributing the software, include this License Header
# Notice in each file and include the License file at
# nbbuild/licenses/CDDL-GPL-2-CP.  Oracle designates this
# particular file as subject to the "Classpath" exception as provided
# by Oracle in the GPL Version 2 section of the License file that
# accompanied this code. If applicable, add the following below the
# License Header, with the fields enclosed by brackets [] replaced by
# your own identifying information:
# "Portions Copyrighted [year] [name of copyright owner]"
# 
# If you wish your version of this file to be governed by only the CDDL
# or only the GPL Version 2, indicate your decision by adding
# "[Contributor] elects to include this software in this distribution
# under the [CDDL or GPL Version 2] license." If you do not indicate a
# single choice of license, a recipient has the option to distribute
# your version of this file under either the CDDL, the GPL Version 2 or
# to extend the choice of license to its licensees as provided above.
# However, if you add GPL Version 2 code and therefore, elected the GPL
# Version 2 license, then the option applies only if the new code is
# made subject to such option by the copyright holder.
# 
# Contributor(s):
# 
# Portions Copyrighted 2008 Sun Microsystems, Inc.

#Generator classes
INCREMENT_GENERATOR_DESC=Erzeugt Bezeichner der Typen <code>long</code>, <code>short</code> oder <code>int</code>, die allerdings nur eindeutig sind, wenn kein anderer Proze\u00df Daten in die gleiche Tabelle schreibt. Nicht im Cluster verwenden!
IDENTITY_GENERATOR_DESC=Unterst\u00fctzt die Identifizierung von Spalten in DB2, MySQL, MS SQL Server, Sybase und HypersonicSQL. Der zur\u00fcckgegebene Bezeichner hat den Typ <code>long</code>, <code>short</code> oder <code>int</code>.
SEQUENCE_GENERATOR_DESC=Benutzt eine Sequenz in DB2, PostgreSQL, Oracle, SAP DB, McKoi bzw. einen Generator in Interbase. Der zur\u00fcckgegebene Bezeichner hat den Typ <code>long</code>, <code>short</code> oder <code>int</code>.
HILO_GENERATOR_DESC=Benutzt einen "hoch/tief"-Algorithmus um effizient Bezeichner der Typen <code>long</code>, <code>short</code> oder <code>int</code> zu erzeugen, wobei eine gegebene Tabelle und Spalte (standardm\u00e4\u00dfig <code>hibernate_unique_key</code> und <code>next_hi</code>) als Quelle f\u00fcr die Hoch-Werte genutzt werden. Die vom "hoch/tief"-Algorithmus erzeugten Bezeichner sind nur f\u00fcr eine bestimmte Datenbank eindeutig.
SEQHILO_GENERATOR_DESC=Benutzt einen hoch/tief Algorithmus um effizient Bezeichner der Typen <code>long</code>, <code>short</code> oder <code>int</code> zu erzeugen, wobei eine angegebene Datenbanksequenz genutzt wird.
UUID_GENERATOR_DESC=Benutzt einen 128-bit UUID-Algorithmus um Bezeichner des Typs "String" zu erzeugen, die innerhalb eines Netzwerks eindeutig sind (Nutzung der IP-Adresse). Die UUID wird als Zeichenkette von Hexadezimalzahlen mit der L\u00e4nge 32 kodiert.
GUID_GENERATOR_DESC=Benutzt eine Datenbankgenerierten GUID-Zeichenkette auf MS-SQL-Servern und MySQL.
NATIVE_GENERATOR_DESC=Nutzt <code>identity</code>, <code>sequence</code> oder <code>hilo</code>, abh\u00e4ngig von den M\u00f6glichkeiten der unterliegenden Datenbank.
ASSIGNED_GENERATOR_DESC=Erlaubt es der Anwendung einen Bezeichner einem Objekt zuzuweisen, bevor save() aufgerufen wird. Dies ist die Standardstrategie, wenn keine &lt;Generator&gt;-Element angegeben wird.
SELECT_GENERATOR_DESC=Ruft einen Prim\u00e4rschl\u00fcssel ab. Dieser wurde von einem Datenbanktrigger zugeordnet indem eine Zeile mit einem eindeutigen Schl\u00fcssel gew\u00e4hlt wurde.
FOREIGN_GENERATOR_DESC=Benutzt den Bezeichner eines anderen, assoziierten Objektes. \u00dcblicherweise wird dies zusammen mit einer &lt;one-to-one&gt;-Prim\u00e4rschl\u00fcsselassoziation verwendet.
SEQUENCE_IDENTITY_GENERATOR_DESC=Eine spezialisierte Strategie f\u00fcr die Sequenzerzeugung, die eine Datenbanksequenz f\u00fcr die aktuelle Werterzeugung f\u00fcllt, aber in diesem Fall dieses Verfahren mit "JDBC3 getGeneratedKeys" verbindet, um den erzeugten Bezeichnerwert als Teil der "insert"-Anweisung zur\u00fcckgibt. Diese Strategie wird nur von den Treibern f\u00fcr Oracle 10g unterst\u00fctzt, die f\u00fcr das JDK 1.4 geschrieben wurden. Notizkommentare innerhalb dieser "insert"-Anweisungen sind aufgrund eines Fehlers in den Oracle-Treibern abgeschaltet.

#Hibernate types
BIG_DECIMAL_DESC=Typenzuordnung von <code>java.math.BigDecimal</code> auf <code>NUMERIC</code> (oder Oracle <code>NUMBER</code>).
BIG_INTEGER_DESC=Typenzuordnung von <code>java.math.Biginteger</code> auf <code>NUMERIC</code> (oder Oracle <code>NUMBER</code>).
BINARY_DESC=Typenzuordnung von <code>byte[]</code> zu einem passenden SQL-Bin\u00e4rtypen.
BLOB_DESC=Typenzuordnung f\u00fcr die JDBC-Klasse <code>java.sql.Blob</code>.
BOOLEAN_DESC=Typenzuordnung von <code>boolean</code> oder <code>java.lang.Boolean</code> auf einen passenden (anbieterspezifischen) SQL-Spaltentyp.
BYTE_DESC=Typenzuordnung von <code>byte</code> oder <code>java.lang.Byte</code> auf einen passenden (anbieterspezifischen) SQL-Spaltentyp.
CALENDAR_DESC=Typenzuordnung von <code>java.util.Calendar</code> auf den SQL-Typ <code>TIMESTAMP</code> (oder equivalent).
CALENDAR_DATE_DESC=Typenzuordnung von <code>java.util.Calendar</code> auf den SQL-Typ <code>DATE</code> (oder equivalent).
CHARACTER_DESC=Typenzuordnung von <code>char</code> oder <code>java.lang.Character</code> auf einen passenden (anbieterspezifischen) SQL-Spaltentyp.
CLASS_DESC=Typenzuordnung von <code>java.lang.Class</code> auf <code>VARCHAR</code> (oder Oracle <code>VARCHAR2</code>). Eine <code>Class</code> wird ihrem vollst\u00e4ndigen Namen zugeordnet.
CLOB_DESC=Typenzuordnung f\u00fcr die JDBC-Klasse <code>java.sql.Clob</code>.
CURRENCY_DESC=Typenzuordnung von <code>java.util.Currency</code> auf <code>VARCHAR</code> (oder Oracle <code>VARCHAR2</code>). Instanzen von <code>Currency</code> werden ihren ISO-Codes zugeordnet.
DATE_DESC=Typenzuordnung von <code>java.util.Date</code> und der Subklassen auf den SQL-Typ <code>DATE</code> (oder equivalent).
DOUBLE_DESC=Typenzuordnung von <code>double</code> oder <code>java.lang.Double</code> auf einen passenden (anbieterspezifischen) SQL-Spaltentyp. 
FLOAT_DESC=Typenzuordnung von <code>float</code> oder <code>java.lang.Float</code> auf einen passenden (anbieterspezifischen) SQL-Spaltentyp.
IMM_BINARY_DESC=Typenzuordnung f\u00fcr <code>byte[]</code>, wobei Hibernate das Objekt als nicht \u00e4nderbar behandelt.
IMM_CALENDAR_DESC=Typenzuordnung von <code>java.util.Calendar</code> auf den SQL-Typ <code>TIMESTAMP</code> (oder equivalent), wobei Hibernate das Objekt als nicht \u00e4nderbar behandelt.
IMM_CALENDAR_DATE_DESC=Typenzuordnung von <code>java.util.Calendar</code> auf den SQL-Typ <code>TIMESTAMP</code> (oder equivalent), wobei Hibernate das Objekt als nicht \u00e4nderbar behandelt.
IMM_DATE_DESC=Typenzuordnung von <code>java.util.Date</code> und der Subklassen auf den SQL-Typ <code>DATE</code> (oder equivalent), wobei Hibernate das Objekt als nicht \u00e4nderbar behandelt.
IMM_SERIALIZABLE_DESC=Typenzuordnung von serialisierbaren Javatypen auf einen passenden SQL-Bin\u00e4rtyp, wobei Hibernate das Objekt als nicht \u00e4nderbar behandelt.
IMM_TIME_DESC=Typenzuordnung von <code>java.util.Date</code> und der Subklassen auf den SQL-Typ <code>TIME</code> (oder equivalent).
IMM_TIMESTAMP_DESC=Typenzuordnung von <code>java.util.Date</code> und der Subklassen auf den SQL-Typ <code>TIMESTAMP</code> (oder equivalent).
INTEGER_DESC=Typenzuordnung von <code>int</code> oder <code>java.lang.Integer</code> auf einen passenden (anbieterspezifischen) SQL-Spaltentyp.
#INTEGER_DESC=<b>Java type:</b>  <code>int</code> or <code>java.lang.Integer</code> <br> <b>Standard SQL built-in type:</b> <code>INTEGER</code>
LOCALE_DESC=Typenzuordnung von <code>java.util.Locale</code> auf <code>VARCHAR</code> (oder Oracle <code>VARCHAR2</code>). Instanzen von "Locale" werden zu ihren ISO-Codes zugeordnet.
LONG_DESC=Typenzuordnung von <code>long</code> oder <code>java.lang.Long</code> auf einen passenden (anbieterspezifischen) SQL-Spaltentyp.
SERIALIZABLE_DESC=Typenzuordnung von serialisierbaren Javatypen auf einen passenden SQL-Bin\u00e4rtyp.
SHORT_DESC=Typenzuordnung von <code>short</code> oder <code>java.lang.Short</code> auf einen passenden (anbieterspezifischen) SQL-Spaltentyp.
STRING_DESC=Typenzuordnung von <code>java.util.String</code> auf <code>VARCHAR</code> (oder Oracle <code>VARCHAR2</code>).
TEXT_DESC=Typenzuordnung von Java-Zeichenketten f\u00fcr "long" auf den SQL-Typ <code>CLOB</code> oder <code>TEXT</code>.
TIME_DESC=Typenzuordnung von <code>java.util.Date</code> und den Subklassen auf den SQL-Typ <code>TIME</code> (oder equivalent).
TIMESTAMP_DESC=Typenzuordnung von <code>java.util.Date</code> und den Subklassen auf den SQL-Typ <code>TIMESTAMP</code> (oder equivalent).
TIMEZONE_DESC=Typenzuordnung von <code>java.util.TimeZone</code> auf <code>VARCHAR</code> (oder Oracle <code>VARCHAR2</code>). Instanzen von <code>TimeZone</code> werden ihrer ID zugeordnet.
TRUE_FALSE_DESC=Eine alternative Kodierung f\u00fcr Java <code>boolean</code> oder <code>java.lang.Boolean</code>.
YES_NO_DESC=Eine alternative Kodierung f\u00fcr Java <code>boolean</code> oder <code>java.lang.Boolean</code>.

# Hibernate configuration properties
AUTOCOMMIT_DESC=JDBC-Modus f\u00fcr automatisches Einreichen.
AUTO_CLOSE_SESSION_DESC=Aktiviert das automatische Schlie\u00dfen der Sitzung bei Ende der Transaktion.
BYTECODE_PROVIDER_DESC=Gibt das Bytecodeverfahren an, welches angewendet werden soll, um die Benutzung von "refelction" durch Hibernate zu optimieren.
BATCH_STRATEGY_DESC=Angepa\u00dfte Stapelverarbeitung w\u00e4hlen.
BATCH_VERSIONED_DATA_DESC=In Stapelverarbeitung versionierte Daten ber\u00fccksichtigen?
C3P0_ACQUIRE_INCREMENT_DESC=Nummer der anzufordernden Verbindungen, wenn der Pool geleert wird.
C3P0_IDLE_TEST_PERIOD_DESC=Leerlaufzeit, bevor eine Verbindung im C3P0-Pool validiert wird.
C3P0_MAX_SIZE_DESC=Maximale Gr\u00f6\u00dfe des C3P0-Verbindungspools.
C3P0_MAX_STATEMENTS_DESC=Maximale Gr\u00f6\u00dfe des C3P0-Anweisungscaches
C3P0_MIN_SIZE_DESC=Minimale Gr\u00f6\u00dfe des C3P0-Verbindungspools.
C3P0_TIMEOUT_DESC=Maximale Leerlaufzeit des C3P0-Verbindungspools.
CACHE_PROVIDER_DESC=Die Implementierungsklasse des <code>CacheProvider</code>. 
CACHE_REGION_PREFIX_DESC=Der Pr\u00e4fix f\u00fcr den Regionsnamen von <code>CacheProvider</code>.
CACHE_PROVIDER_CONFIG_DESC=Die Implementierungsklasse des <code>CacheProvider</code>. 
CACHE_NAMESPACE_DESC=Der JNDI-Namensraum des <code>CacheProvider</code>s (wenn pre-bound and JNDI).
CONNECTION_PROVIDER_DESC=Die beim Abruf von Verbindungen zu verwendende Implementierung von <code>ConnectionProvider</code>.
CONNECTION_PREFIX_DESC=Der Pr\u00e4fix f\u00fcr beliebige JDBC-Verbindungseigenschaften.
CURRENT_SESSION_CONTEXT_CLASS_DESC=Die kontextbasierte Implementierung f\u00fcr die Verarbeitung von <code>SessionFactory.getCurrentSession()</code>.
DATASOURCE_DESC=JNDI-Name f\u00fcr <code>java.sql.Datasource</code>.
DEFAULT_BATCH_FETCH_SIZE_DESC=Die standardm\u00e4\u00dfige Stapelgr\u00f6\u00dfe f\u00fcr Stapekbasiertes Abrufen.
DEFAULT_CATALOG_DESC=Ein standardm\u00e4\u00dfiger Katalogname f\u00fcr Datenbanken, der f\u00fcr unvollst\u00e4ndige Tabellennamen verwendet wird.
DEFAULT_ENTITY_MODE_DESC=Der Entit\u00e4tsmodus in den die Sitzung beim \u00d6ffnen durch die SessionFactory gebracht wird.
DEFAULT_SCHEMA_DESC=Ein standardm\u00e4\u00dfiger Schemaname f\u00fcr Datenbanken, der f\u00fcr unvollst\u00e4ndige Tabellennamen verwendet wird.
DIALECT_DESC=Klasse f\u00fcr den Hibernate SQL-<code>Dialect</code>
DRIVER_DESC=JDBC-Treiberklasse.
FLUSH_BEFORE_COMPLETION_DESC=Automatisches Leeren w\u00e4hrend des JTA-<code>beforeCompletion()</code>-Callbacks aktivieren.
FORMAT_SQL_DESC=Formatierung der SQL-Protokollierung in die Konsole aktivieren.
GENERATE_STATISTICS_DESC=Statistiksammlung aktivieren.
HBM2DDL_AUTO_DESC=Automatische(n) Export/Aktualisierung des Schemas \u00fcber hbm2dll. G\u00fcltige Werte sind <code>update</code>, <code>create</code>, <code>create-drop</code> und <code>validate</code>.
ISOLATION_DESC=Isolationslevel der JDBC-Transaktion.
JACC_CONTEXTID_DESC=Die Kontext-ID von jacc f\u00fcr die Installation.
JNDI_CLASS_DESC=Initiale Kontextklasse f\u00fcr JNDI, <code>Context.INITIAL_CONTEXT_FACTORY</code>.
JNDI_URL_DESC=Anbieter-URL f\u00fcr JNDI, <code>Context.PROVIDER_URL</code>.
JPAQL_STRICT_COMPLIANCE_DESC=\u00dcbereinstimmung zu JAP-QL.
MAX_FETCH_DEPTH_DESC=Maximale Tiefe eines "outer join"-Abrufs.
ORDER_UPDATES_DESC=Sortierung der "update"-Anweisung \u00fcber die Prim\u00e4rschl\u00fcssel aktivieren.
OUTPUT_STYLESHEET_DESC=Eine XSLT-Ressource, um angepa\u00dfte XML zu erzeugen.
PASS_DESC=JDBC-Passwort.
POOL_SIZE_DESC=Maximale Anzahl von inaktiven Verbindung im Verbindungspool von Hibernate.
PROXOOL_EXISTING_POOL_DESC=Proxool-Eigenschaft, um das Proxool-Verfahren aus einem bereits existenten Pool heraus zu konfigurieren (<code>true/false</code>).
PROXOOL_POOL_ALIAS_DESC=Proxool-Eigenschaft mit dem zu nutzenden Proxool-Alias (wird f\u00fcr <code>PROXOOL_EXISTING_POOL</code>, <code>PROXOOL_PROPERTIES</code>, oder <code>PROXOOL_XML</code> ben\u00f6tigt).
PROXOOL_PREFIX_DESC=Eigenschaftspr\u00e4fix f\u00fcr Proxool/Hibernate.
PROXOOL_PROPERTIES_DESC=Proxool-Eigenschaft um das Proxool-Verfahren so zu konfigurieren, da\u00df es eine Eigenschaftsdatei verwendet (<code>/Pfad/zu/proxool.properties</code>).
PROXOOL_XML_DESC=Proxool-Eigenschaft um das Proxool-Verfahren so zu konfigurieren, da\u00df es XML verwendet (<code>/Pfad/zu/file.xml</code>).
QUERY_CACHE_FACTORY_DESC=Die Implementierungsklasse f\u00fcr die <code>QueryCacheFactory</code>.
QUERY_TRANSLATOR_DESC=Der Klassenname f\u00fcr die Parserfactory f\u00fcr HQL-Abfragen.
QUERY_SUBSTITUTIONS_DESC=Eine kommaseparierte Liste von Eintr\u00e4gen, die w\u00e4hrend der \u00dcbersetzung einer Hibernateabfrage nach SQL verwendet werden.
QUERY_STARTUP_CHECKING_DESC=Benannte Abfragen beim Starten \u00fcberpr\u00fcfen (standardm\u00e4\u00dfig aktiviert). Haupts\u00e4chlich f\u00fcr Testumgebungen gedacht. 
RELEASE_CONNECTIONS_DESC=Legt fest, wie Hibernate JDBC-Verbindungen freigibt.
SESSION_FACTORY_NAME_DESC=JNDI-Name f\u00fcr das Binden an <code>SessionFactory</code>.
SHOW_SQL_DESC=Protokollierung des erzeugten SQL in die Konsole aktivieren.
SQL_EXCEPTION_CONVERTER_DESC=Der f\u00fcr die Konvertierung von SQLExceptions in Hibernate's <code>JDBCException</code>-Hierarchie zu nutzende <code>SQLExceptionConverter</code>. Standardm\u00e4\u00dfig wird der f\u00fcr den Dialekt pr\u00e4ferierte <code>SQLExceptionConverter</code> verwendet.
STATEMENT_BATCH_SIZE_DESC=Maximale JDBC-Stapelgr\u00f6\u00dfe. Ein Wert gr\u00f6\u00dfer als 0 aktiviert die Stapelbasierte Aktualisierung.
STATEMENT_FETCH_SIZE_DESC=Zeigt dem JDBC-Treiber wieviele Zeilen aus der Datenbank abgerufen werden sollen, wenn mehr Zeilen ben\u00f6tigt werden. Wenn 0, werden die Standardeinstellungen des JDBC-Treibers verwendet.
TRANSACTION_STRATEGY_DESC=Implementierung der <code>TransactionFactory</code>, die f\u00fcr die Erzeugung von <code>Transactions</code> benutzt wird.
TRANSACTION_MANAGER_STRATEGY_DESC=Implementierung des <code>TransactionManagerLookup</code>, der verwendet wird, um einen <code>TransactionManager</code> abzurufen.
URL_DESC=JDBC-URL.
USER_DESC=JDBC-Benutzer.
USE_GET_GENERATED_KEYS_DESC=Legt fest, dass der JDBC-Treiber versuchen soll, die Zeilen-ID mithilfe der in JDBC 3.0 verf\u00fcgbaren Methode <code>PreparedStatement.getGeneratedKeys()</code> abzurufen. Normalerweise ist die performanz besser, wenn diese Eigenschaft auf "true" gestellt wird und der Treiber die Methode getGeneratedKeys() auch unterst\u00fctzt.
USE_SCROLLABLE_RESULTSET_DESC=Benutzt das scrollbare JDBC-ResultSet. Diese Eigenschaft wird nur ben\u00f6tigt, wenn kein ConnectionProvider vorhanden ist, z.B. wenn der Benutzer die JDBC-Verbindung angibt.
USE_STREAMS_FOR_BINARY_DESC=Benutzt java.io Streams umd Daten von JDBC zu lesen oder dorthin zu schreiben.
USE_IDENTIFIER_ROLLBACK_DESC=Legt fest, ob Hibernate f\u00fcr Bezeichner das R\u00fcckg\u00e4ngigmachen nutzt.
USE_SQL_COMMENTS_DESC=F\u00fcgt Kommentare zum erzeugten SQL hinzu.
USE_MINIMAL_PUTS_DESC=Cache f\u00fcr minimale "puts" anstelle von minimalen "gets" optimieren.
USE_QUERY_CACHE_DESC=Abfragecache aktivieren (standardm\u00e4\u00dfig deaktiviert).
USE_SECOND_LEVEL_CACHE_DESC=Cache der zweiten Ebene aktivieren (standardm\u00e4\u00dfig aktiviert).
USE_STRUCTURED_CACHE_DESC=Benutzung von strukturierten Eintr\u00e4gen des Caches der zweiten Ebene aktivieren.
USER_TRANSACTION_DESC=JNDI-Name des JTA <code>UserTransaction</code> Objektes.
USE_REFLECTION_OPTIMIZER_DESC=\u00dcber Bytcodebibliotheken optimierten Eigenschaftszugriff verwenden.
WRAP_RESULT_SETS_DESC=Ummantelung von JDBC-Ergbenislisten aktivieren, um die Suche nach Spaltennamen mit defekten JDBC-Treiberen zu beschleunigen.


